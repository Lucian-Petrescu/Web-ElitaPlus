'************* THIS CODE HAS BEEN GENERATED FROM TEMPLATE DALObject.cst (4/11/2007)********************

#Region "EnrollmentData"

Public Class EnrollmentData

    Public CompanyId As Guid
    Public UserId As Guid

    Public Certificate As String
    Public Address As String
    Public City As String
    Public Region As String
    Public PostalCode As String
    Public CountryCode As String
    Public HomePhone As String
    Public WorkPhone As String

    Public Manufacturer As String
    Public Model As String
    Public EngineVersion As String
    Public Year As Integer

    Public VIN As String
    Public Mileage As Integer
    Public Tag As String
    Public InServiceDate As Date
    Public DeliveryDate As Date

    Public PurchasePrice As Double
    Public PurchaseDate As DateTime

    Public PlanCode As String
    Public Deductible As Double
    Public TermMonths As Integer
    Public TermMiles As Integer

    Public DealerCode As String
    Public AgentNumber As String
    Public QuoteItemNumber As Integer
    Public WarrantyDate As DateTime
    Public PlanAmount As Double

    Public DocType As String
    Public DocIdentityNo As String
    Public RgNo As String
    Public IdType As String
    Public DocDate As DateTime
    Public DocAgency As String

    Public Quote As String

    Public Customers As String
    Public Options As String
    Public DateOfBirth As DateTime

    Public CollectionMethodCode As String
    Public PaymentInstrumentCode As String

    Public InstallmentsNumber As Integer
    Public CreditCardTypeCode As String
    Public NameOnCreditCard As String
    Public CreditCardNumber As String
    Public ExpirationDate As String
    Public CardSecurityCode As String
    Public BankID As String
    Public AccountNumber As String
    Public NameOnAccount As String

    Public PymtAuthNum As String
    Public ExternalCarCode As String
    Public Is_CreditCard_AuthReq As String

    Public SalesTax As Double
    Public ValidateOnly As String
    Public AutoGeneratedCertificateNumber As String
    Public SalesTaxPresent As Boolean

End Class

#End Region

Public Class VSCEnrollmentDAL
    Inherits DALBase

#Region "Constants"
    Public Const TABLE_NAME As String = "ELP_VSC_ENROLLMENT"
    Public Const TABLE_KEY_NAME As String = "enrollment_id"

    Public Const COL_NAME_ENROLLMENT_ID As String = "enrollment_id"
    Public Const COL_NAME_CERTIFICATE_NUMBER As String = "certificate_number"
    Public Const COL_NAME_ADDRESS1 As String = "address1"
    Public Const COL_NAME_CITY As String = "city"
    Public Const COL_NAME_REGION As String = "region"
    Public Const COL_NAME_POSTAL_CODE As String = "postal_code"
    Public Const COL_NAME_HOME_PHONE As String = "home_phone"
    Public Const COL_NAME_MODEL_YEAR As String = "model_year"
    Public Const COL_NAME_MODEL As String = "model"
    Public Const COL_NAME_MANUFACTURER As String = "manufacturer"
    Public Const COL_NAME_ENGINE_VERSION As String = "engine_version"
    Public Const COL_NAME_VEHICLE_LICENSE_TAG As String = "vehicle_license_tag"
    Public Const COL_NAME_ODOMETER As String = "odometer"
    Public Const COL_NAME_VIN As String = "vin"
    Public Const COL_NAME_PURCHASE_PRICE As String = "purchase_price"
    Public Const COL_NAME_PURCHASE_DATE As String = "purchase_date"
    Public Const COL_NAME_IN_SERVICE_DATE As String = "in_service_date"
    Public Const COL_NAME_DELIVERY_DATE As String = "delivery_date"
    Public Const COL_NAME_PLAN_CODE As String = "plan_code"
    Public Const COL_NAME_DEDUCTIBLE As String = "deductible"
    Public Const COL_NAME_TERM_MONTHS As String = "term_months"
    Public Const COL_NAME_TERM_KM_MI As String = "term_km_mi"
    Public Const COL_NAME_DEALER_CODE As String = "dealer_code"
    Public Const COL_NAME_AGENT_NUMBER As String = "agent_number"
    Public Const COL_NAME_WARRANTY_SALE_DATE As String = "warranty_sale_date"
    Public Const COL_NAME_PLAN_AMOUNT As String = "plan_amount"
    Public Const COL_NAME_DOCUMENT_TYPE As String = "document_type"
    Public Const COL_NAME_IDENTITY_DOCUMENT_NO As String = "identity_document_no"
    Public Const COL_NAME_RG_NO As String = "rg_no"
    Public Const COL_NAME_ID_TYPE As String = "id_type"
    Public Const COL_NAME_DOCUMENT_ISSUE_DATE As String = "document_issue_date"
    Public Const COL_NAME_DOCUMENT_AGENCY As String = "document_agency"
    Public Const COL_NAME_DATE_OF_BIRTH As String = "BIRTH_DATE"
    Public Const COL_NAME_WORK_PHONE As String = "work_phone"
    Public Const COL_NAME_IS_CREDITCARD_AUTHREQ As String = "is_creditcard_authreq"


    Public Const COL_NAME_PAYMENT_TYPE_CODE As String = "Payment_Type_Code"
    Public Const COL_NAME_INSTALLMENTS_NUMBER As String = "Installments_Number"
    Public Const COL_NAME_CREDIT_CARD_TYPE_CODE As String = "Credit_Card_Type_Code"
    Public Const COL_NAME_NAME_ON_CREDIT_CARD As String = "Name_On_Credit_Card"
    Public Const COL_NAME_CREDIT_CARD_NUMBER As String = "Credit_Card_Number"
    Public Const COL_NAME_EXPIRATION_DATE As String = "Expiration_Date"
    Public Const COL_NAME_SECURITY_CODE As String = "Security_Code"
    Public Const COL_NAME_BANK_ID As String = "Bank_ID"
    Public Const COL_NAME_ACCOUNT_NUMBER As String = "Account_Number"
    Public Const COL_NAME_NAME_ON_ACCOUNT As String = "Name_On_Account"

    Public Const COL_NAME_EXTERNAL_CAR_CODE As String = "External_Car_Code"

    Public Const PARAM_COMPANY_ID As String = "p_company_id"
    Public Const PARAM_USER_ID As String = "p_user_id"
    Public Const PARAM_ENROLLMENT_ID As String = "p_enrollment_id"
    Public Const PARAM_CERTIFICATE_NUMBER As String = "p_certificate_number"
    Public Const PARAM_ADDRESS1 As String = "p_address1"
    Public Const PARAM_CITY As String = "p_city"
    Public Const PARAM_REGION As String = "p_region"
    Public Const PARAM_POSTAL_CODE As String = "p_postal_code"
    Public Const PARAM_COUNTRY_CODE As String = "p_country_code"
    Public Const PARAM_HOME_PHONE As String = "p_home_phone"
    Public Const PARAM_WORK_PHONE As String = "p_work_phone"
    Public Const PARAM_MODEL_YEAR As String = "p_model_year"
    Public Const PARAM_MODEL As String = "p_model"
    Public Const PARAM_MANUFACTURER As String = "p_manufacturer"
    Public Const PARAM_ENGINE_VERSION As String = "p_engine_version"
    Public Const PARAM_VEHICLE_LICENSE_TAG As String = "p_vehicle_license_tag"
    Public Const PARAM_ODOMETER As String = "p_odometer"
    Public Const PARAM_VIN As String = "p_vin"
    Public Const PARAM_PURCHASE_PRICE As String = "p_purchase_price"
    Public Const PARAM_PURCHASE_DATE As String = "p_purchase_date"
    Public Const PARAM_IN_SERVICE_DATE As String = "p_in_service_date"
    Public Const PARAM_DELIVER_DATE As String = "p_delivery_date"

    Public Const PARAM_PLAN_CODE As String = "p_plan_code"
    Public Const PARAM_DEDUCTIBLE As String = "p_deductible"
    Public Const PARAM_TERM_MONTHS As String = "p_term_months"
    Public Const PARAM_TERM_KM_MI As String = "p_term_km_mi"
    Public Const PARAM_DEALER_CODE As String = "p_dealer_code"
    Public Const PARAM_AGENT_NUMBER As String = "p_agent_number"
    Public Const PARAM_WARRANTY_SALE_DATE As String = "p_warranty_sale_date"
    Public Const PARAM_PLAN_AMOUNT As String = "p_plan_amount"
    Public Const PARAM_DOCUMENT_TYPE As String = "p_document_type"
    Public Const PARAM_IDENTITY_DOCUMENT_NO As String = "p_identity_doc_no"
    Public Const PARAM_RG_NO As String = "p_rg_no"
    Public Const PARAM_ID_TYPE As String = "p_id_type"
    Public Const PARAM_DOCUMENT_ISSUE_DATE As String = "p_document_issue_date"
    Public Const PARAM_DOCUMENT_AGENCY As String = "p_document_agency"
    Public Const PARAM_QUOTE_NUMBER As String = "p_quote_number"
    Public Const PARAM_QUOTE_ITEM_NUMBER As String = "p_quote_item_number"
    Public Const PARAM_CUSTOMERS As String = "p_customers"
    Public Const PARAM_OPTIONS As String = "p_options"
    Public Const PARAM_DATE_OF_BIRTH As String = "p_birth_date"
    Public Const PARAM_PAYMENT_TYPE_CODE As String = "p_payment_type_code" ' Collection Method
    Public Const PARAM_PAYMENT_INSTRUMENT_CODE As String = "p_payment_instrument_code"

    Public Const PARAM_INSTALLMENTS_NUMBER As String = "p_installments_number"
    Public Const PARAM_CREDIT_CARD_TYPE_CODE As String = "p_credit_card_type_code"
    Public Const PARAM_NAME_ON_CREDIT_CARD As String = "p_name_on_credit_card"
    Public Const PARAM_CREDIT_CARD_NUMBER As String = "p_credit_card_number"
    Public Const PARAM_EXPIRATION_DATE As String = "p_expiration_date"
    Public Const PARAM_CARD_SECURITY_CODE As String = "p_card_security_code"
    Public Const PARAM_BANK_ID As String = "p_bank_id"
    Public Const PARAM_ACCOUNT_NUMBER As String = "p_account_number"
    Public Const PARAM_NAME_ON_ACCOUNT As String = "p_name_on_account"
    Public Const PARAM_BRANCH_CODE As String = "p_branch_code"
    Public Const PARAM_PYMT_AUTH_NUM As String = "p_pymt_auth_num"
    Public Const PARAM_EXTERNAL_CAR_CODE As String = "p_external_car_code"

    Public Const PARAM_RETURN As String = "p_return"
    Public Const PARAM_EXCEPTION_MSG As String = "p_exception_msg"
    Public Const PARAM_GENERATED_CERTIFICATE_NUMBER As String = "p_generated_cert_number"
    Public Const PARAM_FLUSH_RETURN As String = "po_nm_return"
    Public Const PARAM_FLUSH_EXCEPTION_MSG As String = "po_vc_exp_msg"
    Public Const PARAM_PAYMENT_DATE As String = "p_payment_date"
    Public Const PARAM_IS_CREDITCARD_AUTHREQ As String = "p_is_creditcard_authreq"
    Public Const PARAM_FINANCING_AGENCY As String = "p_financing_agency"
    Public Const PARAM_VALIDATE_ONLY As String = "p_validate_only"
    Public Const P_RETURN As Integer = 0
    Public Const P_ENROLLMENT_ID As Integer = 1
    Public Const P_EXCEPTION_MSG As Integer = 2
    Public Const P_CERTIFICATE_NUMBER As Integer = 3
    Public Const P_EXCEPTION_MSG_CERTIFICATE As Integer = 1

#End Region

#Region "Constructors"
    Public Sub New()
        MyBase.new()
    End Sub

#End Region

#Region "Load Methods"

    Public Sub LoadSchema(ds As DataSet)
        Load(ds, Guid.Empty)
    End Sub

    Public Sub Load(familyDS As DataSet, id As Guid)
        Dim selectStmt As String = Config("/SQL/LOAD")
        Dim parameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() {New DBHelper.DBHelperParameter("enrollment_id", id.ToByteArray)}
        Try
            DBHelper.Fetch(familyDS, selectStmt, TABLE_NAME, parameters)
        Catch ex As Exception
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try
    End Sub

    Public Function LoadList() As DataSet
        Dim selectStmt As String = Config("/SQL/LOAD_LIST")
        Return DBHelper.Fetch(selectStmt, TABLE_NAME)
    End Function

    Public Function Enroll(ByRef oEnrollamentData As EnrollmentData) As Guid

        Dim selectStmt As String = Config("/SQL/ENROLL")
        Dim inputParameters() As DBHelper.DBHelperParameter
        '   Dim ds As DataSet = New DataSet

        Try

            With oEnrollamentData
                Dim oDocDate As Object
                If .DocDate.Equals(Date.MinValue) Then
                    oDocDate = Nothing
                Else
                    oDocDate = .DocDate
                End If
                Dim oDateOfBirth As Object
                If .DateOfBirth.Equals(Date.MinValue) Then
                    oDateOfBirth = Nothing
                Else
                    oDateOfBirth = .DateOfBirth
                End If

                ' Input parameters
                inputParameters = New DBHelper.DBHelperParameter() _
                    {SetParameter(PARAM_COMPANY_ID, .CompanyId.ToByteArray), _
                     SetParameter(PARAM_USER_ID, .UserId.ToByteArray), _
                     SetParameter(PARAM_CERTIFICATE_NUMBER, .Certificate), _
                     SetParameter(PARAM_ADDRESS1, .Address), _
                     SetParameter(PARAM_CITY, .City), _
                     SetParameter(PARAM_REGION, .Region), _
                     SetParameter(PARAM_POSTAL_CODE, .PostalCode), _
                     SetParameter(PARAM_COUNTRY_CODE, .CountryCode), _
                     SetParameter(PARAM_HOME_PHONE, .HomePhone), _
                     SetParameter(PARAM_MODEL_YEAR, .Year), _
                     SetParameter(PARAM_MODEL, .Model), _
                     SetParameter(PARAM_MANUFACTURER, .Manufacturer), _
                     SetParameter(PARAM_ENGINE_VERSION, .EngineVersion), _
                     SetParameter(PARAM_VEHICLE_LICENSE_TAG, .Tag), _
                     SetParameter(PARAM_ODOMETER, .Mileage), _
                     SetParameter(PARAM_VIN, .VIN), _
                     SetParameter(PARAM_PURCHASE_PRICE, .PurchasePrice), _
                     SetParameter(PARAM_PURCHASE_DATE, .PurchaseDate), _
                     SetParameter(PARAM_IN_SERVICE_DATE, .InServiceDate), _
                     SetParameter(PARAM_DELIVER_DATE, .DeliveryDate), _
                     SetParameter(PARAM_PLAN_CODE, .PlanCode), _
                     SetParameter(PARAM_DEDUCTIBLE, .Deductible), _
                     SetParameter(PARAM_TERM_MONTHS, .TermMonths), _
                     SetParameter(PARAM_TERM_KM_MI, .TermMiles), _
                     SetParameter(PARAM_DEALER_CODE, .DealerCode), _
                     SetParameter(PARAM_AGENT_NUMBER, .AgentNumber), _
                     SetParameter(PARAM_WARRANTY_SALE_DATE, .WarrantyDate), _
                     SetParameter(PARAM_PLAN_AMOUNT, .PlanAmount), _
                     SetParameter(PARAM_DOCUMENT_TYPE, .DocType), _
                     SetParameter(PARAM_IDENTITY_DOCUMENT_NO, .DocIdentityNo), _
                     SetParameter(PARAM_RG_NO, .RgNo), _
                     SetParameter(PARAM_ID_TYPE, .IdType), _
                     SetParameter(PARAM_DOCUMENT_ISSUE_DATE, oDocDate), _
                     SetParameter(PARAM_DOCUMENT_AGENCY, .DocAgency), _
                     SetParameter(PARAM_QUOTE_NUMBER, .Quote), _
                     SetParameter(PARAM_QUOTE_ITEM_NUMBER, .QuoteItemNumber), _
                     SetParameter(PARAM_CUSTOMERS, .Customers), _
                     SetParameter(PARAM_OPTIONS, .Options), _
                     SetParameter(PARAM_DATE_OF_BIRTH, oDateOfBirth), _
                     SetParameter(PARAM_WORK_PHONE, .WorkPhone), _
                     SetParameter(PARAM_PAYMENT_TYPE_CODE, .CollectionMethodCode), _
                     SetParameter(PARAM_PAYMENT_INSTRUMENT_CODE, .PaymentInstrumentCode), _
                     SetParameter(PARAM_INSTALLMENTS_NUMBER, .InstallmentsNumber), _
                     SetParameter(PARAM_CREDIT_CARD_TYPE_CODE, .CreditCardTypeCode), _
                     SetParameter(PARAM_NAME_ON_CREDIT_CARD, .NameOnCreditCard), _
                     SetParameter(PARAM_CREDIT_CARD_NUMBER, .CreditCardNumber), _
                     SetParameter(PARAM_EXPIRATION_DATE, .ExpirationDate), _
                     SetParameter(PARAM_BANK_ID, .BankID), _
                     SetParameter(PARAM_ACCOUNT_NUMBER, .AccountNumber), _
                     SetParameter(PARAM_NAME_ON_ACCOUNT, .NameOnAccount), _
                     SetParameter(PARAM_BRANCH_CODE, DBNull.Value), _
                     SetParameter(PARAM_PYMT_AUTH_NUM, .PymtAuthNum), _
                     SetParameter(PARAM_EXTERNAL_CAR_CODE, .ExternalCarCode), _
                     SetParameter(PARAM_PAYMENT_DATE, DBNull.Value), _
                     SetParameter(PARAM_CARD_SECURITY_CODE, .CardSecurityCode), _
                     SetParameter(PARAM_IS_CREDITCARD_AUTHREQ, .Is_CreditCard_AuthReq), _
                     SetParameter(PARAM_FINANCING_AGENCY, DBNull.Value), _                     
                     SetParameter(PARAM_VALIDATE_ONLY, .ValidateOnly)}

            End With

            ' Output parameters
            Dim outputParameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() _
                                                                    {New DBHelper.DBHelperParameter(PARAM_RETURN, GetType(Integer)), _
                                                                     New DBHelper.DBHelperParameter(PARAM_ENROLLMENT_ID, GetType(Byte())), _
                                                                     New DBHelper.DBHelperParameter(PARAM_EXCEPTION_MSG, GetType(String), 200), _
                                                                     New DBHelper.DBHelperParameter(PARAM_GENERATED_CERTIFICATE_NUMBER, GetType(String), 20)}

            ' Call the stored procedure
            DBHelper.ExecuteSpParamBindByName(selectStmt, inputParameters, outputParameters)
            If outputParameters(P_RETURN).Value <> 0 Then _
                Throw New StoredProcedureGeneratedException("Enrollment Error: ", outputParameters(P_EXCEPTION_MSG).Value)
            If Not oEnrollamentData.ValidateOnly.Equals("Y") Then
                If oEnrollamentData.Certificate Is Nothing OrElse oEnrollamentData.Certificate.Equals(String.Empty) Then
                    oEnrollamentData.AutoGeneratedCertificateNumber = Convert.ToString(outputParameters(P_CERTIFICATE_NUMBER).Value)
                End If
                Return New Guid(Convert.ToString(outputParameters(P_ENROLLMENT_ID).Value))
            Else
                Return Guid.Empty
            End If
        Catch ex As DataBaseAccessException
            Throw ex
        Catch ex As Exception
            Throw ex
        Finally
            '   ds.Dispose()
        End Try

    End Function

    Public Function Certificate(id As Guid) As Boolean

        Dim selectStmt As String = Config("/SQL/CERTIFICATE")

        Dim inputParameters() As DBHelper.DBHelperParameter

        '   Dim ds As DataSet = New DataSet

        Try

            inputParameters = New DBHelper.DBHelperParameter() _
                                    {SetParameter(PARAM_ENROLLMENT_ID, id.ToByteArray)}

            ' Input parameters
            Dim outputParameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() _
                                                                    {New DBHelper.DBHelperParameter(PARAM_RETURN, GetType(Integer)), _
                                                                     New DBHelper.DBHelperParameter(PARAM_EXCEPTION_MSG, GetType(String), 1000)}

            ' Call the stored procedure
            '  DBHelper.FetchSp(selectStmt, inputParameters, outputParameters, ds, TABLE_NAME)
            DBHelper.ExecuteSp(selectStmt, inputParameters, outputParameters)

            'Not needed since the web service consumer is not online anymore. Any exception that may result will be forwarded by email to the notify group in the DB
            'If outputParameters(P_RETURN).Value <> 0 Then _
            'Throw New StoredProcedureGeneratedException("Certificate Request Error: ", outputParameters(P_EXCEPTION_MSG_CERTIFICATE).Value)

        Catch ex As Exception
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        Finally
            '   ds.Dispose()
        End Try

        Return True

    End Function

    Public Sub Certificate(id As Guid, CollectionMethodCode As String, PaymentInstrumentCode As String)

        Dim selectStmt As String = Config("/SQL/CERTIFICATE")
        Dim inputParameters() As DBHelper.DBHelperParameter

        Try

            inputParameters = New DBHelper.DBHelperParameter() _
                                    {SetParameter(PARAM_ENROLLMENT_ID, id.ToByteArray)}
            ' Input parameters
            Dim outputParameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() _
                                                                    {New DBHelper.DBHelperParameter(PARAM_RETURN, GetType(Integer)), _
                                                                     New DBHelper.DBHelperParameter(PARAM_EXCEPTION_MSG, GetType(String), 1000)}

            DBHelper.ExecuteSp(selectStmt, inputParameters, outputParameters)

            If outputParameters(P_RETURN).Value <> 0 Then _
                Throw New StoredProcedureGeneratedException("Certificate Request Error: ", outputParameters(P_EXCEPTION_MSG_CERTIFICATE).Value)

        Catch ex As Exception
            FlushEnroll(id)
            Throw ex
        End Try

    End Sub

    Public Sub FlushEnroll(id As Guid)

        Dim selectStmt As String = Config("/SQL/FLUSHENROLL")
        Dim inputParameters() As DBHelper.DBHelperParameter
        Try
            inputParameters = New DBHelper.DBHelperParameter() _
                                    {SetParameter(PARAM_ENROLLMENT_ID, id.ToByteArray)}

            ' Input parameters
            Dim outputParameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() _
                                                                    {New DBHelper.DBHelperParameter(PARAM_FLUSH_RETURN, GetType(Integer)), _
                                                                     New DBHelper.DBHelperParameter(PARAM_FLUSH_EXCEPTION_MSG, GetType(String), 1000)}

            ' Call the stored procedure
            DBHelper.ExecuteSp(selectStmt, inputParameters, outputParameters)
            If outputParameters(P_RETURN).Value <> 0 Then _
                Throw New StoredProcedureGeneratedException("Certificate Request Error: ", outputParameters(P_EXCEPTION_MSG_CERTIFICATE).Value)

        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function AddManufacturerCoverage(certId As Guid) As Guid

        Dim selectStmt As String = Config("/SQL/AddManufacturerCoverage")
        Dim inputParameters() As DBHelper.DBHelperParameter
        inputParameters = New DBHelper.DBHelperParameter() _
                                {SetParameter("pi_cert_id", certId.ToByteArray)}

        Dim outputParameters() As DBHelper.DBHelperParameter = New DBHelper.DBHelperParameter() _
                                                                {New DBHelper.DBHelperParameter("po_return_code", GetType(Integer)), _
                                                                 New DBHelper.DBHelperParameter("po_exception_msg", GetType(String), 1000), _
                                                                 New DBHelper.DBHelperParameter("po_man_cov_id", GetType(Byte()))}

        ' Call the stored procedure
        DBHelper.ExecuteSpParamBindByName(selectStmt, inputParameters, outputParameters)
        If outputParameters(0).Value <> 0 AndAlso outputParameters(0).Value <> 100 Then 
            Throw New StoredProcedureGeneratedException("VSC AddManufacturerCoverage Error: " & outputParameters(0).Value, outputParameters(1).Value)
        Else
            return New Guid(Convert.ToString(outputParameters(2).Value))
        End if        

    End Function
#End Region

#Region "Overloaded Methods"
    Public Overloads Sub Update(ds As DataSet, Optional ByVal Transaction As IDbTransaction = Nothing, Optional ByVal changesFilter As DataRowState = Nothing)
        If ds Is Nothing Then
            Return
        End If
        If Not ds.Tables(TABLE_NAME) Is Nothing Then
            MyBase.Update(ds.Tables(TABLE_NAME), Transaction, changesFilter)
        End If
    End Sub
#End Region

#Region "Private Methods"

    Function SetParameter(name As String, value As Object) As DBHelper.DBHelperParameter

        name = name.Trim
        If value Is Nothing Then value = DBNull.Value
        If value.GetType Is GetType(String) Then value = DirectCast(value, String).Trim

        Return New DBHelper.DBHelperParameter(name, value)

    End Function

    Function Base64ToGuid(strGuid As String) As Guid

        Return New Guid(Convert.FromBase64String(strGuid))

    End Function

#End Region

End Class


