'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.3038.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("GalaxyPayClaimDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class GalaxyPayClaimDs
    Inherits Global.System.Data.DataSet

    Private tableGalaxyPayClaim As GalaxyPayClaimDataTable

    Private tableCOVERAGES As COVERAGESDataTable

    Private relationGalaxyPayClaim_COVERAGES As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GalaxyPayClaim")) Is Nothing) Then
                MyBase.Tables.Add(New GalaxyPayClaimDataTable(ds.Tables("GalaxyPayClaim")))
            End If
            If (Not (ds.Tables("COVERAGES")) Is Nothing) Then
                MyBase.Tables.Add(New COVERAGESDataTable(ds.Tables("COVERAGES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property GalaxyPayClaim() As GalaxyPayClaimDataTable
        Get
            Return Me.tableGalaxyPayClaim
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property COVERAGES() As COVERAGESDataTable
        Get
            Return Me.tableCOVERAGES
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GalaxyPayClaimDs = CType(MyBase.Clone, GalaxyPayClaimDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("GalaxyPayClaim")) Is Nothing) Then
                MyBase.Tables.Add(New GalaxyPayClaimDataTable(ds.Tables("GalaxyPayClaim")))
            End If
            If (Not (ds.Tables("COVERAGES")) Is Nothing) Then
                MyBase.Tables.Add(New COVERAGESDataTable(ds.Tables("COVERAGES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGalaxyPayClaim = CType(MyBase.Tables("GalaxyPayClaim"), GalaxyPayClaimDataTable)
        If (initTable = True) Then
            If (Not (Me.tableGalaxyPayClaim) Is Nothing) Then
                Me.tableGalaxyPayClaim.InitVars()
            End If
        End If
        Me.tableCOVERAGES = CType(MyBase.Tables("COVERAGES"), COVERAGESDataTable)
        If (initTable = True) Then
            If (Not (Me.tableCOVERAGES) Is Nothing) Then
                Me.tableCOVERAGES.InitVars()
            End If
        End If
        Me.relationGalaxyPayClaim_COVERAGES = Me.Relations("GalaxyPayClaim_COVERAGES")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "GalaxyPayClaimDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGalaxyPayClaim = New GalaxyPayClaimDataTable
        MyBase.Tables.Add(Me.tableGalaxyPayClaim)
        Me.tableCOVERAGES = New COVERAGESDataTable
        MyBase.Tables.Add(Me.tableCOVERAGES)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("GalaxyPayClaim_COVERAGES", New Global.System.Data.DataColumn() {Me.tableGalaxyPayClaim.GalaxyPayClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableCOVERAGES.GalaxyPayClaim_IdColumn})
        Me.tableCOVERAGES.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationGalaxyPayClaim_COVERAGES = New Global.System.Data.DataRelation("GalaxyPayClaim_COVERAGES", New Global.System.Data.DataColumn() {Me.tableGalaxyPayClaim.GalaxyPayClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableCOVERAGES.GalaxyPayClaim_IdColumn}, False)
        Me.relationGalaxyPayClaim_COVERAGES.Nested = True
        Me.Relations.Add(Me.relationGalaxyPayClaim_COVERAGES)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeGalaxyPayClaim() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCOVERAGES() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GalaxyPayClaimDs = New GalaxyPayClaimDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub GalaxyPayClaimRowChangeEventHandler(ByVal sender As Object, ByVal e As GalaxyPayClaimRowChangeEvent)

    Public Delegate Sub COVERAGESRowChangeEventHandler(ByVal sender As Object, ByVal e As COVERAGESRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class GalaxyPayClaimDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnCERTIFICATE_NUMBER As Global.System.Data.DataColumn

        Private columnDEALER_CODE As Global.System.Data.DataColumn

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnUNIT_NUMBER As Global.System.Data.DataColumn

        Private columnSVC_CONTROL_NUMBER As Global.System.Data.DataColumn

        Private columnAUTHORIZATION_NUMBER As Global.System.Data.DataColumn

        Private columnPAYEE_CODE As Global.System.Data.DataColumn

        Private columnCTC_ADDRESS1 As Global.System.Data.DataColumn

        Private columnCTC_ADDRESS2 As Global.System.Data.DataColumn

        Private columnCTC_CITY As Global.System.Data.DataColumn

        Private columnCTC_REGION_CODE As Global.System.Data.DataColumn

        Private columnCTC_POSTAL_CODE As Global.System.Data.DataColumn

        Private columnDISBURSEMENT_COUNTRY_CODE As Global.System.Data.DataColumn

        Private columnACCOUNT_NAME As Global.System.Data.DataColumn

        Private columnBANK_ID As Global.System.Data.DataColumn

        Private columnACCOUNT_NUMBER As Global.System.Data.DataColumn

        Private columnPAYMENT_METHOD As Global.System.Data.DataColumn

        Private columnIDENTITY_DOCUMENT_NO As Global.System.Data.DataColumn

        Private columnDOCUMENT_TYPE As Global.System.Data.DataColumn

        Private columnIBAN_NUMBER As Global.System.Data.DataColumn

        Private columnSWIFT_CODE As Global.System.Data.DataColumn

        Private columnACCOUNT_TYPE As Global.System.Data.DataColumn

        Private columnPAYEE_OTHER_NAME As Global.System.Data.DataColumn

        Private columnINVOICE_DATE As Global.System.Data.DataColumn

        Private columnGalaxyPayClaim_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "GalaxyPayClaim"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CERTIFICATE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATE_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DEALER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEALER_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property UNIT_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SVC_CONTROL_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSVC_CONTROL_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AUTHORIZATION_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTHORIZATION_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PAYEE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYEE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CTC_ADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTC_ADDRESS1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CTC_ADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTC_ADDRESS2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CTC_CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTC_CITY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CTC_REGION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTC_REGION_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CTC_POSTAL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTC_POSTAL_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DISBURSEMENT_COUNTRY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISBURSEMENT_COUNTRY_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ACCOUNT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property BANK_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ACCOUNT_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PAYMENT_METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_METHOD
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDENTITY_DOCUMENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTITY_DOCUMENT_NO
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DOCUMENT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENT_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IBAN_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIBAN_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SWIFT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWIFT_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ACCOUNT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PAYEE_OTHER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYEE_OTHER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property GalaxyPayClaim_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGalaxyPayClaim_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As GalaxyPayClaimRow
            Get
                Return CType(Me.Rows(index), GalaxyPayClaimRow)
            End Get
        End Property

        Public Event GalaxyPayClaimRowChanging As GalaxyPayClaimRowChangeEventHandler

        Public Event GalaxyPayClaimRowChanged As GalaxyPayClaimRowChangeEventHandler

        Public Event GalaxyPayClaimRowDeleting As GalaxyPayClaimRowChangeEventHandler

        Public Event GalaxyPayClaimRowDeleted As GalaxyPayClaimRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddGalaxyPayClaimRow(ByVal row As GalaxyPayClaimRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddGalaxyPayClaimRow( _
                    ByVal CERTIFICATE_NUMBER As String, _
                    ByVal DEALER_CODE As String, _
                    ByVal CLAIM_NUMBER As String, _
                    ByVal UNIT_NUMBER As Integer, _
                    ByVal SVC_CONTROL_NUMBER As String, _
                    ByVal AUTHORIZATION_NUMBER As String, _
                    ByVal PAYEE_CODE As String, _
                    ByVal CTC_ADDRESS1 As String, _
                    ByVal CTC_ADDRESS2 As String, _
                    ByVal CTC_CITY As String, _
                    ByVal CTC_REGION_CODE As String, _
                    ByVal CTC_POSTAL_CODE As String, _
                    ByVal DISBURSEMENT_COUNTRY_CODE As String, _
                    ByVal ACCOUNT_NAME As String, _
                    ByVal BANK_ID As String, _
                    ByVal ACCOUNT_NUMBER As String, _
                    ByVal PAYMENT_METHOD As String, _
                    ByVal IDENTITY_DOCUMENT_NO As String, _
                    ByVal DOCUMENT_TYPE As String, _
                    ByVal IBAN_NUMBER As String, _
                    ByVal SWIFT_CODE As String, _
                    ByVal ACCOUNT_TYPE As String, _
                    ByVal PAYEE_OTHER_NAME As String, _
                    ByVal INVOICE_DATE As Date) As GalaxyPayClaimRow
            Dim rowGalaxyPayClaimRow As GalaxyPayClaimRow = CType(Me.NewRow, GalaxyPayClaimRow)
            Dim columnValuesArray() As Object = New Object() {CERTIFICATE_NUMBER, DEALER_CODE, CLAIM_NUMBER, UNIT_NUMBER, SVC_CONTROL_NUMBER, AUTHORIZATION_NUMBER, PAYEE_CODE, CTC_ADDRESS1, CTC_ADDRESS2, CTC_CITY, CTC_REGION_CODE, CTC_POSTAL_CODE, DISBURSEMENT_COUNTRY_CODE, ACCOUNT_NAME, BANK_ID, ACCOUNT_NUMBER, PAYMENT_METHOD, IDENTITY_DOCUMENT_NO, DOCUMENT_TYPE, IBAN_NUMBER, SWIFT_CODE, ACCOUNT_TYPE, PAYEE_OTHER_NAME, INVOICE_DATE, Nothing}
            rowGalaxyPayClaimRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGalaxyPayClaimRow)
            Return rowGalaxyPayClaimRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GalaxyPayClaimDataTable = CType(MyBase.Clone, GalaxyPayClaimDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GalaxyPayClaimDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCERTIFICATE_NUMBER = MyBase.Columns("CERTIFICATE_NUMBER")
            Me.columnDEALER_CODE = MyBase.Columns("DEALER_CODE")
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnUNIT_NUMBER = MyBase.Columns("UNIT_NUMBER")
            Me.columnSVC_CONTROL_NUMBER = MyBase.Columns("SVC_CONTROL_NUMBER")
            Me.columnAUTHORIZATION_NUMBER = MyBase.Columns("AUTHORIZATION_NUMBER")
            Me.columnPAYEE_CODE = MyBase.Columns("PAYEE_CODE")
            Me.columnCTC_ADDRESS1 = MyBase.Columns("CTC_ADDRESS1")
            Me.columnCTC_ADDRESS2 = MyBase.Columns("CTC_ADDRESS2")
            Me.columnCTC_CITY = MyBase.Columns("CTC_CITY")
            Me.columnCTC_REGION_CODE = MyBase.Columns("CTC_REGION_CODE")
            Me.columnCTC_POSTAL_CODE = MyBase.Columns("CTC_POSTAL_CODE")
            Me.columnDISBURSEMENT_COUNTRY_CODE = MyBase.Columns("DISBURSEMENT_COUNTRY_CODE")
            Me.columnACCOUNT_NAME = MyBase.Columns("ACCOUNT_NAME")
            Me.columnBANK_ID = MyBase.Columns("BANK_ID")
            Me.columnACCOUNT_NUMBER = MyBase.Columns("ACCOUNT_NUMBER")
            Me.columnPAYMENT_METHOD = MyBase.Columns("PAYMENT_METHOD")
            Me.columnIDENTITY_DOCUMENT_NO = MyBase.Columns("IDENTITY_DOCUMENT_NO")
            Me.columnDOCUMENT_TYPE = MyBase.Columns("DOCUMENT_TYPE")
            Me.columnIBAN_NUMBER = MyBase.Columns("IBAN_NUMBER")
            Me.columnSWIFT_CODE = MyBase.Columns("SWIFT_CODE")
            Me.columnACCOUNT_TYPE = MyBase.Columns("ACCOUNT_TYPE")
            Me.columnPAYEE_OTHER_NAME = MyBase.Columns("PAYEE_OTHER_NAME")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnGalaxyPayClaim_Id = MyBase.Columns("GalaxyPayClaim_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCERTIFICATE_NUMBER = New Global.System.Data.DataColumn("CERTIFICATE_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATE_NUMBER)
            Me.columnDEALER_CODE = New Global.System.Data.DataColumn("DEALER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEALER_CODE)
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnUNIT_NUMBER = New Global.System.Data.DataColumn("UNIT_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NUMBER)
            Me.columnSVC_CONTROL_NUMBER = New Global.System.Data.DataColumn("SVC_CONTROL_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSVC_CONTROL_NUMBER)
            Me.columnAUTHORIZATION_NUMBER = New Global.System.Data.DataColumn("AUTHORIZATION_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTHORIZATION_NUMBER)
            Me.columnPAYEE_CODE = New Global.System.Data.DataColumn("PAYEE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYEE_CODE)
            Me.columnCTC_ADDRESS1 = New Global.System.Data.DataColumn("CTC_ADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTC_ADDRESS1)
            Me.columnCTC_ADDRESS2 = New Global.System.Data.DataColumn("CTC_ADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTC_ADDRESS2)
            Me.columnCTC_CITY = New Global.System.Data.DataColumn("CTC_CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTC_CITY)
            Me.columnCTC_REGION_CODE = New Global.System.Data.DataColumn("CTC_REGION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTC_REGION_CODE)
            Me.columnCTC_POSTAL_CODE = New Global.System.Data.DataColumn("CTC_POSTAL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTC_POSTAL_CODE)
            Me.columnDISBURSEMENT_COUNTRY_CODE = New Global.System.Data.DataColumn("DISBURSEMENT_COUNTRY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISBURSEMENT_COUNTRY_CODE)
            Me.columnACCOUNT_NAME = New Global.System.Data.DataColumn("ACCOUNT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NAME)
            Me.columnBANK_ID = New Global.System.Data.DataColumn("BANK_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ID)
            Me.columnACCOUNT_NUMBER = New Global.System.Data.DataColumn("ACCOUNT_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NUMBER)
            Me.columnPAYMENT_METHOD = New Global.System.Data.DataColumn("PAYMENT_METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_METHOD)
            Me.columnIDENTITY_DOCUMENT_NO = New Global.System.Data.DataColumn("IDENTITY_DOCUMENT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTITY_DOCUMENT_NO)
            Me.columnDOCUMENT_TYPE = New Global.System.Data.DataColumn("DOCUMENT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENT_TYPE)
            Me.columnIBAN_NUMBER = New Global.System.Data.DataColumn("IBAN_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIBAN_NUMBER)
            Me.columnSWIFT_CODE = New Global.System.Data.DataColumn("SWIFT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWIFT_CODE)
            Me.columnACCOUNT_TYPE = New Global.System.Data.DataColumn("ACCOUNT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_TYPE)
            Me.columnPAYEE_OTHER_NAME = New Global.System.Data.DataColumn("PAYEE_OTHER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYEE_OTHER_NAME)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnGalaxyPayClaim_Id = New Global.System.Data.DataColumn("GalaxyPayClaim_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnGalaxyPayClaim_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGalaxyPayClaim_Id}, True))
            Me.columnCERTIFICATE_NUMBER.AllowDBNull = False
            Me.columnDEALER_CODE.AllowDBNull = False
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnUNIT_NUMBER.AllowDBNull = False
            Me.columnSVC_CONTROL_NUMBER.AllowDBNull = False
            Me.columnPAYEE_CODE.AllowDBNull = False
            Me.columnGalaxyPayClaim_Id.AutoIncrement = True
            Me.columnGalaxyPayClaim_Id.AllowDBNull = False
            Me.columnGalaxyPayClaim_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewGalaxyPayClaimRow() As GalaxyPayClaimRow
            Return CType(Me.NewRow, GalaxyPayClaimRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GalaxyPayClaimRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GalaxyPayClaimRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GalaxyPayClaimRowChangedEvent) Is Nothing) Then
                RaiseEvent GalaxyPayClaimRowChanged(Me, New GalaxyPayClaimRowChangeEvent(CType(e.Row, GalaxyPayClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GalaxyPayClaimRowChangingEvent) Is Nothing) Then
                RaiseEvent GalaxyPayClaimRowChanging(Me, New GalaxyPayClaimRowChangeEvent(CType(e.Row, GalaxyPayClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GalaxyPayClaimRowDeletedEvent) Is Nothing) Then
                RaiseEvent GalaxyPayClaimRowDeleted(Me, New GalaxyPayClaimRowChangeEvent(CType(e.Row, GalaxyPayClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GalaxyPayClaimRowDeletingEvent) Is Nothing) Then
                RaiseEvent GalaxyPayClaimRowDeleting(Me, New GalaxyPayClaimRowChangeEvent(CType(e.Row, GalaxyPayClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveGalaxyPayClaimRow(ByVal row As GalaxyPayClaimRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GalaxyPayClaimDs = New GalaxyPayClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GalaxyPayClaimDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class COVERAGESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnCERT_ITEM_COVERAGE_CODE As Global.System.Data.DataColumn

        Private columnAMOUNT As Global.System.Data.DataColumn

        Private columnIVA_AMOUNT As Global.System.Data.DataColumn

        Private columnREPAIR_DATE As Global.System.Data.DataColumn

        Private columnGalaxyPayClaim_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "COVERAGES"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CERT_ITEM_COVERAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERT_ITEM_COVERAGE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IVA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA_AMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property REPAIR_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPAIR_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property GalaxyPayClaim_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGalaxyPayClaim_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As COVERAGESRow
            Get
                Return CType(Me.Rows(index), COVERAGESRow)
            End Get
        End Property

        Public Event COVERAGESRowChanging As COVERAGESRowChangeEventHandler

        Public Event COVERAGESRowChanged As COVERAGESRowChangeEventHandler

        Public Event COVERAGESRowDeleting As COVERAGESRowChangeEventHandler

        Public Event COVERAGESRowDeleted As COVERAGESRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCOVERAGESRow(ByVal row As COVERAGESRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCOVERAGESRow(ByVal CERT_ITEM_COVERAGE_CODE As String, ByVal AMOUNT As Decimal, ByVal IVA_AMOUNT As Decimal, ByVal REPAIR_DATE As Date, ByVal parentGalaxyPayClaimRowByGalaxyPayClaim_COVERAGES As GalaxyPayClaimRow) As COVERAGESRow
            Dim rowCOVERAGESRow As COVERAGESRow = CType(Me.NewRow, COVERAGESRow)
            Dim columnValuesArray() As Object = New Object() {CERT_ITEM_COVERAGE_CODE, AMOUNT, IVA_AMOUNT, REPAIR_DATE, Nothing}
            If (Not (parentGalaxyPayClaimRowByGalaxyPayClaim_COVERAGES) Is Nothing) Then
                columnValuesArray(4) = parentGalaxyPayClaimRowByGalaxyPayClaim_COVERAGES(24)
            End If
            rowCOVERAGESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOVERAGESRow)
            Return rowCOVERAGESRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COVERAGESDataTable = CType(MyBase.Clone, COVERAGESDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COVERAGESDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCERT_ITEM_COVERAGE_CODE = MyBase.Columns("CERT_ITEM_COVERAGE_CODE")
            Me.columnAMOUNT = MyBase.Columns("AMOUNT")
            Me.columnIVA_AMOUNT = MyBase.Columns("IVA_AMOUNT")
            Me.columnREPAIR_DATE = MyBase.Columns("REPAIR_DATE")
            Me.columnGalaxyPayClaim_Id = MyBase.Columns("GalaxyPayClaim_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCERT_ITEM_COVERAGE_CODE = New Global.System.Data.DataColumn("CERT_ITEM_COVERAGE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERT_ITEM_COVERAGE_CODE)
            Me.columnAMOUNT = New Global.System.Data.DataColumn("AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMOUNT)
            Me.columnIVA_AMOUNT = New Global.System.Data.DataColumn("IVA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA_AMOUNT)
            Me.columnREPAIR_DATE = New Global.System.Data.DataColumn("REPAIR_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPAIR_DATE)
            Me.columnGalaxyPayClaim_Id = New Global.System.Data.DataColumn("GalaxyPayClaim_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnGalaxyPayClaim_Id)
            Me.columnCERT_ITEM_COVERAGE_CODE.AllowDBNull = False
            Me.columnAMOUNT.AllowDBNull = False
            Me.columnREPAIR_DATE.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCOVERAGESRow() As COVERAGESRow
            Return CType(Me.NewRow, COVERAGESRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COVERAGESRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COVERAGESRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COVERAGESRowChangedEvent) Is Nothing) Then
                RaiseEvent COVERAGESRowChanged(Me, New COVERAGESRowChangeEvent(CType(e.Row, COVERAGESRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COVERAGESRowChangingEvent) Is Nothing) Then
                RaiseEvent COVERAGESRowChanging(Me, New COVERAGESRowChangeEvent(CType(e.Row, COVERAGESRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COVERAGESRowDeletedEvent) Is Nothing) Then
                RaiseEvent COVERAGESRowDeleted(Me, New COVERAGESRowChangeEvent(CType(e.Row, COVERAGESRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COVERAGESRowDeletingEvent) Is Nothing) Then
                RaiseEvent COVERAGESRowDeleting(Me, New COVERAGESRowChangeEvent(CType(e.Row, COVERAGESRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCOVERAGESRow(ByVal row As COVERAGESRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GalaxyPayClaimDs = New GalaxyPayClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COVERAGESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class GalaxyPayClaimRow
        Inherits Global.System.Data.DataRow

        Private tableGalaxyPayClaim As GalaxyPayClaimDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGalaxyPayClaim = CType(Me.Table, GalaxyPayClaimDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CERTIFICATE_NUMBER() As String
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.CERTIFICATE_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CERTIFICATE_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DEALER_CODE() As String
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.DEALER_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.DEALER_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property UNIT_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.UNIT_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableGalaxyPayClaim.UNIT_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVC_CONTROL_NUMBER() As String
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.SVC_CONTROL_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.SVC_CONTROL_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property AUTHORIZATION_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.AUTHORIZATION_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTHORIZATION_NUMBER' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.AUTHORIZATION_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PAYEE_CODE() As String
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.PAYEE_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.PAYEE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CTC_ADDRESS1() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.CTC_ADDRESS1Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTC_ADDRESS1' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CTC_ADDRESS1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CTC_ADDRESS2() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.CTC_ADDRESS2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTC_ADDRESS2' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CTC_ADDRESS2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CTC_CITY() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.CTC_CITYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTC_CITY' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CTC_CITYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CTC_REGION_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.CTC_REGION_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTC_REGION_CODE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CTC_REGION_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CTC_POSTAL_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.CTC_POSTAL_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTC_POSTAL_CODE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.CTC_POSTAL_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DISBURSEMENT_COUNTRY_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.DISBURSEMENT_COUNTRY_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISBURSEMENT_COUNTRY_CODE' in table 'GalaxyPayClaim' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.DISBURSEMENT_COUNTRY_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ACCOUNT_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.ACCOUNT_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NAME' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.ACCOUNT_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property BANK_ID() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.BANK_IDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_ID' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.BANK_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ACCOUNT_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.ACCOUNT_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NUMBER' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.ACCOUNT_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PAYMENT_METHOD() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.PAYMENT_METHODColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_METHOD' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.PAYMENT_METHODColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property IDENTITY_DOCUMENT_NO() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.IDENTITY_DOCUMENT_NOColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTITY_DOCUMENT_NO' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.IDENTITY_DOCUMENT_NOColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DOCUMENT_TYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.DOCUMENT_TYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOCUMENT_TYPE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.DOCUMENT_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property IBAN_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.IBAN_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IBAN_NUMBER' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.IBAN_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SWIFT_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.SWIFT_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWIFT_CODE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.SWIFT_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ACCOUNT_TYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.ACCOUNT_TYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_TYPE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.ACCOUNT_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PAYEE_OTHER_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.PAYEE_OTHER_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYEE_OTHER_NAME' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGalaxyPayClaim.PAYEE_OTHER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property INVOICE_DATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableGalaxyPayClaim.INVOICE_DATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'GalaxyPayClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableGalaxyPayClaim.INVOICE_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property GalaxyPayClaim_Id() As Integer
            Get
                Return CType(Me(Me.tableGalaxyPayClaim.GalaxyPayClaim_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableGalaxyPayClaim.GalaxyPayClaim_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAUTHORIZATION_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.AUTHORIZATION_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAUTHORIZATION_NUMBERNull()
            Me(Me.tableGalaxyPayClaim.AUTHORIZATION_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCTC_ADDRESS1Null() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.CTC_ADDRESS1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCTC_ADDRESS1Null()
            Me(Me.tableGalaxyPayClaim.CTC_ADDRESS1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCTC_ADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.CTC_ADDRESS2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCTC_ADDRESS2Null()
            Me(Me.tableGalaxyPayClaim.CTC_ADDRESS2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCTC_CITYNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.CTC_CITYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCTC_CITYNull()
            Me(Me.tableGalaxyPayClaim.CTC_CITYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCTC_REGION_CODENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.CTC_REGION_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCTC_REGION_CODENull()
            Me(Me.tableGalaxyPayClaim.CTC_REGION_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCTC_POSTAL_CODENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.CTC_POSTAL_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCTC_POSTAL_CODENull()
            Me(Me.tableGalaxyPayClaim.CTC_POSTAL_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDISBURSEMENT_COUNTRY_CODENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.DISBURSEMENT_COUNTRY_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDISBURSEMENT_COUNTRY_CODENull()
            Me(Me.tableGalaxyPayClaim.DISBURSEMENT_COUNTRY_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsACCOUNT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.ACCOUNT_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetACCOUNT_NAMENull()
            Me(Me.tableGalaxyPayClaim.ACCOUNT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsBANK_IDNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.BANK_IDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetBANK_IDNull()
            Me(Me.tableGalaxyPayClaim.BANK_IDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsACCOUNT_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.ACCOUNT_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetACCOUNT_NUMBERNull()
            Me(Me.tableGalaxyPayClaim.ACCOUNT_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPAYMENT_METHODNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.PAYMENT_METHODColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPAYMENT_METHODNull()
            Me(Me.tableGalaxyPayClaim.PAYMENT_METHODColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsIDENTITY_DOCUMENT_NONull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.IDENTITY_DOCUMENT_NOColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetIDENTITY_DOCUMENT_NONull()
            Me(Me.tableGalaxyPayClaim.IDENTITY_DOCUMENT_NOColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDOCUMENT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.DOCUMENT_TYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDOCUMENT_TYPENull()
            Me(Me.tableGalaxyPayClaim.DOCUMENT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsIBAN_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.IBAN_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetIBAN_NUMBERNull()
            Me(Me.tableGalaxyPayClaim.IBAN_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSWIFT_CODENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.SWIFT_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSWIFT_CODENull()
            Me(Me.tableGalaxyPayClaim.SWIFT_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsACCOUNT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.ACCOUNT_TYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetACCOUNT_TYPENull()
            Me(Me.tableGalaxyPayClaim.ACCOUNT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPAYEE_OTHER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.PAYEE_OTHER_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPAYEE_OTHER_NAMENull()
            Me(Me.tableGalaxyPayClaim.PAYEE_OTHER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableGalaxyPayClaim.INVOICE_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableGalaxyPayClaim.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetCOVERAGESRows() As COVERAGESRow()
            If (Me.Table.ChildRelations("GalaxyPayClaim_COVERAGES") Is Nothing) Then
                Return New COVERAGESRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("GalaxyPayClaim_COVERAGES")), COVERAGESRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class COVERAGESRow
        Inherits Global.System.Data.DataRow

        Private tableCOVERAGES As COVERAGESDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOVERAGES = CType(Me.Table, COVERAGESDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CERT_ITEM_COVERAGE_CODE() As String
            Get
                Return CType(Me(Me.tableCOVERAGES.CERT_ITEM_COVERAGE_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableCOVERAGES.CERT_ITEM_COVERAGE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property AMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableCOVERAGES.AMOUNTColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableCOVERAGES.AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property IVA_AMOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableCOVERAGES.IVA_AMOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IVA_AMOUNT' in table 'COVERAGES' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableCOVERAGES.IVA_AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property REPAIR_DATE() As Date
            Get
                Return CType(Me(Me.tableCOVERAGES.REPAIR_DATEColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableCOVERAGES.REPAIR_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property GalaxyPayClaim_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableCOVERAGES.GalaxyPayClaim_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GalaxyPayClaim_Id' in table 'COVERAGES' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableCOVERAGES.GalaxyPayClaim_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property GalaxyPayClaimRow() As GalaxyPayClaimRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("GalaxyPayClaim_COVERAGES")), GalaxyPayClaimRow)
            End Get
            Set(ByVal value As GalaxyPayClaimRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("GalaxyPayClaim_COVERAGES"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsIVA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableCOVERAGES.IVA_AMOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetIVA_AMOUNTNull()
            Me(Me.tableCOVERAGES.IVA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsGalaxyPayClaim_IdNull() As Boolean
            Return Me.IsNull(Me.tableCOVERAGES.GalaxyPayClaim_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetGalaxyPayClaim_IdNull()
            Me(Me.tableCOVERAGES.GalaxyPayClaim_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class GalaxyPayClaimRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As GalaxyPayClaimRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As GalaxyPayClaimRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As GalaxyPayClaimRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class COVERAGESRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As COVERAGESRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As COVERAGESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As COVERAGESRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
