'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.3038.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("SVCUpdateClaimDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class SVCUpdateClaimDs
    Inherits Global.System.Data.DataSet

    Private tableSVCUpdateClaim As SVCUpdateClaimDataTable

    Private tableParts_List As Parts_ListDataTable

    Private tableClaim_Extended_Status_List As Claim_Extended_Status_ListDataTable

    Private relationSVCUpdateClaim_Parts_List As Global.System.Data.DataRelation

    Private relationSVCUpdateClaim_Claim_Extended_Status_List As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SVCUpdateClaim")) Is Nothing) Then
                MyBase.Tables.Add(New SVCUpdateClaimDataTable(ds.Tables("SVCUpdateClaim")))
            End If
            If (Not (ds.Tables("Parts_List")) Is Nothing) Then
                MyBase.Tables.Add(New Parts_ListDataTable(ds.Tables("Parts_List")))
            End If
            If (Not (ds.Tables("Claim_Extended_Status_List")) Is Nothing) Then
                MyBase.Tables.Add(New Claim_Extended_Status_ListDataTable(ds.Tables("Claim_Extended_Status_List")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SVCUpdateClaim() As SVCUpdateClaimDataTable
        Get
            Return Me.tableSVCUpdateClaim
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Parts_List() As Parts_ListDataTable
        Get
            Return Me.tableParts_List
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Claim_Extended_Status_List() As Claim_Extended_Status_ListDataTable
        Get
            Return Me.tableClaim_Extended_Status_List
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SVCUpdateClaimDs = CType(MyBase.Clone, SVCUpdateClaimDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SVCUpdateClaim")) Is Nothing) Then
                MyBase.Tables.Add(New SVCUpdateClaimDataTable(ds.Tables("SVCUpdateClaim")))
            End If
            If (Not (ds.Tables("Parts_List")) Is Nothing) Then
                MyBase.Tables.Add(New Parts_ListDataTable(ds.Tables("Parts_List")))
            End If
            If (Not (ds.Tables("Claim_Extended_Status_List")) Is Nothing) Then
                MyBase.Tables.Add(New Claim_Extended_Status_ListDataTable(ds.Tables("Claim_Extended_Status_List")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSVCUpdateClaim = CType(MyBase.Tables("SVCUpdateClaim"), SVCUpdateClaimDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSVCUpdateClaim) Is Nothing) Then
                Me.tableSVCUpdateClaim.InitVars()
            End If
        End If
        Me.tableParts_List = CType(MyBase.Tables("Parts_List"), Parts_ListDataTable)
        If (initTable = True) Then
            If (Not (Me.tableParts_List) Is Nothing) Then
                Me.tableParts_List.InitVars()
            End If
        End If
        Me.tableClaim_Extended_Status_List = CType(MyBase.Tables("Claim_Extended_Status_List"), Claim_Extended_Status_ListDataTable)
        If (initTable = True) Then
            If (Not (Me.tableClaim_Extended_Status_List) Is Nothing) Then
                Me.tableClaim_Extended_Status_List.InitVars()
            End If
        End If
        Me.relationSVCUpdateClaim_Parts_List = Me.Relations("SVCUpdateClaim_Parts_List")
        Me.relationSVCUpdateClaim_Claim_Extended_Status_List = Me.Relations("SVCUpdateClaim_Claim_Extended_Status_List")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "SVCUpdateClaimDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSVCUpdateClaim = New SVCUpdateClaimDataTable
        MyBase.Tables.Add(Me.tableSVCUpdateClaim)
        Me.tableParts_List = New Parts_ListDataTable
        MyBase.Tables.Add(Me.tableParts_List)
        Me.tableClaim_Extended_Status_List = New Claim_Extended_Status_ListDataTable
        MyBase.Tables.Add(Me.tableClaim_Extended_Status_List)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("SVCUpdateClaim_Parts_List", New Global.System.Data.DataColumn() {Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableParts_List.SVCUpdateClaim_IdColumn})
        Me.tableParts_List.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("SVCUpdateClaim_Claim_Extended_Status_List", New Global.System.Data.DataColumn() {Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn})
        Me.tableClaim_Extended_Status_List.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationSVCUpdateClaim_Parts_List = New Global.System.Data.DataRelation("SVCUpdateClaim_Parts_List", New Global.System.Data.DataColumn() {Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableParts_List.SVCUpdateClaim_IdColumn}, False)
        Me.relationSVCUpdateClaim_Parts_List.Nested = True
        Me.Relations.Add(Me.relationSVCUpdateClaim_Parts_List)
        Me.relationSVCUpdateClaim_Claim_Extended_Status_List = New Global.System.Data.DataRelation("SVCUpdateClaim_Claim_Extended_Status_List", New Global.System.Data.DataColumn() {Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn}, New Global.System.Data.DataColumn() {Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn}, False)
        Me.relationSVCUpdateClaim_Claim_Extended_Status_List.Nested = True
        Me.Relations.Add(Me.relationSVCUpdateClaim_Claim_Extended_Status_List)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSVCUpdateClaim() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeParts_List() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeClaim_Extended_Status_List() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SVCUpdateClaimDs = New SVCUpdateClaimDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub SVCUpdateClaimRowChangeEventHandler(ByVal sender As Object, ByVal e As SVCUpdateClaimRowChangeEvent)

    Public Delegate Sub Parts_ListRowChangeEventHandler(ByVal sender As Object, ByVal e As Parts_ListRowChangeEvent)

    Public Delegate Sub Claim_Extended_Status_ListRowChangeEventHandler(ByVal sender As Object, ByVal e As Claim_Extended_Status_ListRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SVCUpdateClaimDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnClaim_ID As Global.System.Data.DataColumn

        Private columnVisit_Date As Global.System.Data.DataColumn

        Private columnRepair_Date As Global.System.Data.DataColumn

        Private columnShipping_Amount As Global.System.Data.DataColumn

        Private columnLabor_Amount As Global.System.Data.DataColumn

        Private columnService_Charge_Amount As Global.System.Data.DataColumn

        Private columnTrip_Amount As Global.System.Data.DataColumn

        Private columnOther_Amount As Global.System.Data.DataColumn

        Private columnOther_Description As Global.System.Data.DataColumn

        Private columnAuthorization_Number As Global.System.Data.DataColumn

        Private columnSVCUpdateClaim_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SVCUpdateClaim"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Claim_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaim_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Visit_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisit_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Repair_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepair_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Shipping_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipping_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Labor_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabor_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Service_Charge_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnService_Charge_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trip_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrip_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Other_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Other_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther_Description
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Authorization_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuthorization_Number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SVCUpdateClaim_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSVCUpdateClaim_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SVCUpdateClaimRow
            Get
                Return CType(Me.Rows(index), SVCUpdateClaimRow)
            End Get
        End Property

        Public Event SVCUpdateClaimRowChanging As SVCUpdateClaimRowChangeEventHandler

        Public Event SVCUpdateClaimRowChanged As SVCUpdateClaimRowChangeEventHandler

        Public Event SVCUpdateClaimRowDeleting As SVCUpdateClaimRowChangeEventHandler

        Public Event SVCUpdateClaimRowDeleted As SVCUpdateClaimRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSVCUpdateClaimRow(ByVal row As SVCUpdateClaimRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSVCUpdateClaimRow(ByVal Claim_ID As String, ByVal Visit_Date As Date, ByVal Repair_Date As Date, ByVal Shipping_Amount As Decimal, ByVal Labor_Amount As Decimal, ByVal Service_Charge_Amount As Decimal, ByVal Trip_Amount As Decimal, ByVal Other_Amount As Decimal, ByVal Other_Description As String, ByVal Authorization_Number As String) As SVCUpdateClaimRow
            Dim rowSVCUpdateClaimRow As SVCUpdateClaimRow = CType(Me.NewRow, SVCUpdateClaimRow)
            Dim columnValuesArray() As Object = New Object() {Claim_ID, Visit_Date, Repair_Date, Shipping_Amount, Labor_Amount, Service_Charge_Amount, Trip_Amount, Other_Amount, Other_Description, Authorization_Number, Nothing}
            rowSVCUpdateClaimRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSVCUpdateClaimRow)
            Return rowSVCUpdateClaimRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SVCUpdateClaimDataTable = CType(MyBase.Clone, SVCUpdateClaimDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SVCUpdateClaimDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnClaim_ID = MyBase.Columns("Claim_ID")
            Me.columnVisit_Date = MyBase.Columns("Visit_Date")
            Me.columnRepair_Date = MyBase.Columns("Repair_Date")
            Me.columnShipping_Amount = MyBase.Columns("Shipping_Amount")
            Me.columnLabor_Amount = MyBase.Columns("Labor_Amount")
            Me.columnService_Charge_Amount = MyBase.Columns("Service_Charge_Amount")
            Me.columnTrip_Amount = MyBase.Columns("Trip_Amount")
            Me.columnOther_Amount = MyBase.Columns("Other_Amount")
            Me.columnOther_Description = MyBase.Columns("Other_Description")
            Me.columnAuthorization_Number = MyBase.Columns("Authorization_Number")
            Me.columnSVCUpdateClaim_Id = MyBase.Columns("SVCUpdateClaim_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnClaim_ID = New Global.System.Data.DataColumn("Claim_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaim_ID)
            Me.columnVisit_Date = New Global.System.Data.DataColumn("Visit_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisit_Date)
            Me.columnRepair_Date = New Global.System.Data.DataColumn("Repair_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepair_Date)
            Me.columnShipping_Amount = New Global.System.Data.DataColumn("Shipping_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipping_Amount)
            Me.columnLabor_Amount = New Global.System.Data.DataColumn("Labor_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabor_Amount)
            Me.columnService_Charge_Amount = New Global.System.Data.DataColumn("Service_Charge_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnService_Charge_Amount)
            Me.columnTrip_Amount = New Global.System.Data.DataColumn("Trip_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrip_Amount)
            Me.columnOther_Amount = New Global.System.Data.DataColumn("Other_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther_Amount)
            Me.columnOther_Description = New Global.System.Data.DataColumn("Other_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther_Description)
            Me.columnAuthorization_Number = New Global.System.Data.DataColumn("Authorization_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuthorization_Number)
            Me.columnSVCUpdateClaim_Id = New Global.System.Data.DataColumn("SVCUpdateClaim_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSVCUpdateClaim_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSVCUpdateClaim_Id}, True))
            Me.columnClaim_ID.AllowDBNull = False
            Me.columnSVCUpdateClaim_Id.AutoIncrement = True
            Me.columnSVCUpdateClaim_Id.AllowDBNull = False
            Me.columnSVCUpdateClaim_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSVCUpdateClaimRow() As SVCUpdateClaimRow
            Return CType(Me.NewRow, SVCUpdateClaimRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SVCUpdateClaimRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SVCUpdateClaimRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SVCUpdateClaimRowChangedEvent) Is Nothing) Then
                RaiseEvent SVCUpdateClaimRowChanged(Me, New SVCUpdateClaimRowChangeEvent(CType(e.Row, SVCUpdateClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SVCUpdateClaimRowChangingEvent) Is Nothing) Then
                RaiseEvent SVCUpdateClaimRowChanging(Me, New SVCUpdateClaimRowChangeEvent(CType(e.Row, SVCUpdateClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SVCUpdateClaimRowDeletedEvent) Is Nothing) Then
                RaiseEvent SVCUpdateClaimRowDeleted(Me, New SVCUpdateClaimRowChangeEvent(CType(e.Row, SVCUpdateClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SVCUpdateClaimRowDeletingEvent) Is Nothing) Then
                RaiseEvent SVCUpdateClaimRowDeleting(Me, New SVCUpdateClaimRowChangeEvent(CType(e.Row, SVCUpdateClaimRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSVCUpdateClaimRow(ByVal row As SVCUpdateClaimRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SVCUpdateClaimDs = New SVCUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SVCUpdateClaimDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class Parts_ListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnPart_Code As Global.System.Data.DataColumn

        Private columnPart_Amount As Global.System.Data.DataColumn

        Private columnIn_Stock As Global.System.Data.DataColumn

        Private columnSVCUpdateClaim_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Parts_List"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Part_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPart_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Part_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPart_Amount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property In_StockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIn_Stock
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SVCUpdateClaim_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSVCUpdateClaim_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As Parts_ListRow
            Get
                Return CType(Me.Rows(index), Parts_ListRow)
            End Get
        End Property

        Public Event Parts_ListRowChanging As Parts_ListRowChangeEventHandler

        Public Event Parts_ListRowChanged As Parts_ListRowChangeEventHandler

        Public Event Parts_ListRowDeleting As Parts_ListRowChangeEventHandler

        Public Event Parts_ListRowDeleted As Parts_ListRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddParts_ListRow(ByVal row As Parts_ListRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddParts_ListRow(ByVal Part_Code As String, ByVal Part_Amount As Decimal, ByVal In_Stock As String, ByVal parentSVCUpdateClaimRowBySVCUpdateClaim_Parts_List As SVCUpdateClaimRow) As Parts_ListRow
            Dim rowParts_ListRow As Parts_ListRow = CType(Me.NewRow, Parts_ListRow)
            Dim columnValuesArray() As Object = New Object() {Part_Code, Part_Amount, In_Stock, Nothing}
            If (Not (parentSVCUpdateClaimRowBySVCUpdateClaim_Parts_List) Is Nothing) Then
                columnValuesArray(3) = parentSVCUpdateClaimRowBySVCUpdateClaim_Parts_List(10)
            End If
            rowParts_ListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParts_ListRow)
            Return rowParts_ListRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Parts_ListDataTable = CType(MyBase.Clone, Parts_ListDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Parts_ListDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnPart_Code = MyBase.Columns("Part_Code")
            Me.columnPart_Amount = MyBase.Columns("Part_Amount")
            Me.columnIn_Stock = MyBase.Columns("In_Stock")
            Me.columnSVCUpdateClaim_Id = MyBase.Columns("SVCUpdateClaim_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnPart_Code = New Global.System.Data.DataColumn("Part_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPart_Code)
            Me.columnPart_Amount = New Global.System.Data.DataColumn("Part_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPart_Amount)
            Me.columnIn_Stock = New Global.System.Data.DataColumn("In_Stock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIn_Stock)
            Me.columnSVCUpdateClaim_Id = New Global.System.Data.DataColumn("SVCUpdateClaim_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSVCUpdateClaim_Id)
            Me.columnPart_Code.AllowDBNull = False
            Me.columnPart_Amount.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewParts_ListRow() As Parts_ListRow
            Return CType(Me.NewRow, Parts_ListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Parts_ListRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Parts_ListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Parts_ListRowChangedEvent) Is Nothing) Then
                RaiseEvent Parts_ListRowChanged(Me, New Parts_ListRowChangeEvent(CType(e.Row, Parts_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Parts_ListRowChangingEvent) Is Nothing) Then
                RaiseEvent Parts_ListRowChanging(Me, New Parts_ListRowChangeEvent(CType(e.Row, Parts_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Parts_ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent Parts_ListRowDeleted(Me, New Parts_ListRowChangeEvent(CType(e.Row, Parts_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Parts_ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent Parts_ListRowDeleting(Me, New Parts_ListRowChangeEvent(CType(e.Row, Parts_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveParts_ListRow(ByVal row As Parts_ListRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SVCUpdateClaimDs = New SVCUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Parts_ListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class Claim_Extended_Status_ListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnClaim_Extended_Status_Code As Global.System.Data.DataColumn

        Private columnClaim_Extended_Status_Date As Global.System.Data.DataColumn

        Private columnClaim_Extended_Status_Comment As Global.System.Data.DataColumn

        Private columnSVCUpdateClaim_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Claim_Extended_Status_List"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Claim_Extended_Status_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaim_Extended_Status_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Claim_Extended_Status_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaim_Extended_Status_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Claim_Extended_Status_CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaim_Extended_Status_Comment
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SVCUpdateClaim_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSVCUpdateClaim_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As Claim_Extended_Status_ListRow
            Get
                Return CType(Me.Rows(index), Claim_Extended_Status_ListRow)
            End Get
        End Property

        Public Event Claim_Extended_Status_ListRowChanging As Claim_Extended_Status_ListRowChangeEventHandler

        Public Event Claim_Extended_Status_ListRowChanged As Claim_Extended_Status_ListRowChangeEventHandler

        Public Event Claim_Extended_Status_ListRowDeleting As Claim_Extended_Status_ListRowChangeEventHandler

        Public Event Claim_Extended_Status_ListRowDeleted As Claim_Extended_Status_ListRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddClaim_Extended_Status_ListRow(ByVal row As Claim_Extended_Status_ListRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddClaim_Extended_Status_ListRow(ByVal Claim_Extended_Status_Code As String, ByVal Claim_Extended_Status_Date As Date, ByVal Claim_Extended_Status_Comment As String, ByVal parentSVCUpdateClaimRowBySVCUpdateClaim_Claim_Extended_Status_List As SVCUpdateClaimRow) As Claim_Extended_Status_ListRow
            Dim rowClaim_Extended_Status_ListRow As Claim_Extended_Status_ListRow = CType(Me.NewRow, Claim_Extended_Status_ListRow)
            Dim columnValuesArray() As Object = New Object() {Claim_Extended_Status_Code, Claim_Extended_Status_Date, Claim_Extended_Status_Comment, Nothing}
            If (Not (parentSVCUpdateClaimRowBySVCUpdateClaim_Claim_Extended_Status_List) Is Nothing) Then
                columnValuesArray(3) = parentSVCUpdateClaimRowBySVCUpdateClaim_Claim_Extended_Status_List(10)
            End If
            rowClaim_Extended_Status_ListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClaim_Extended_Status_ListRow)
            Return rowClaim_Extended_Status_ListRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Claim_Extended_Status_ListDataTable = CType(MyBase.Clone, Claim_Extended_Status_ListDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Claim_Extended_Status_ListDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnClaim_Extended_Status_Code = MyBase.Columns("Claim_Extended_Status_Code")
            Me.columnClaim_Extended_Status_Date = MyBase.Columns("Claim_Extended_Status_Date")
            Me.columnClaim_Extended_Status_Comment = MyBase.Columns("Claim_Extended_Status_Comment")
            Me.columnSVCUpdateClaim_Id = MyBase.Columns("SVCUpdateClaim_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnClaim_Extended_Status_Code = New Global.System.Data.DataColumn("Claim_Extended_Status_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaim_Extended_Status_Code)
            Me.columnClaim_Extended_Status_Date = New Global.System.Data.DataColumn("Claim_Extended_Status_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaim_Extended_Status_Date)
            Me.columnClaim_Extended_Status_Comment = New Global.System.Data.DataColumn("Claim_Extended_Status_Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaim_Extended_Status_Comment)
            Me.columnSVCUpdateClaim_Id = New Global.System.Data.DataColumn("SVCUpdateClaim_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSVCUpdateClaim_Id)
            Me.columnClaim_Extended_Status_Code.AllowDBNull = False
            Me.columnClaim_Extended_Status_Date.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewClaim_Extended_Status_ListRow() As Claim_Extended_Status_ListRow
            Return CType(Me.NewRow, Claim_Extended_Status_ListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Claim_Extended_Status_ListRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Claim_Extended_Status_ListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Claim_Extended_Status_ListRowChangedEvent) Is Nothing) Then
                RaiseEvent Claim_Extended_Status_ListRowChanged(Me, New Claim_Extended_Status_ListRowChangeEvent(CType(e.Row, Claim_Extended_Status_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Claim_Extended_Status_ListRowChangingEvent) Is Nothing) Then
                RaiseEvent Claim_Extended_Status_ListRowChanging(Me, New Claim_Extended_Status_ListRowChangeEvent(CType(e.Row, Claim_Extended_Status_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Claim_Extended_Status_ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent Claim_Extended_Status_ListRowDeleted(Me, New Claim_Extended_Status_ListRowChangeEvent(CType(e.Row, Claim_Extended_Status_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Claim_Extended_Status_ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent Claim_Extended_Status_ListRowDeleting(Me, New Claim_Extended_Status_ListRowChangeEvent(CType(e.Row, Claim_Extended_Status_ListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveClaim_Extended_Status_ListRow(ByVal row As Claim_Extended_Status_ListRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SVCUpdateClaimDs = New SVCUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Claim_Extended_Status_ListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class SVCUpdateClaimRow
        Inherits Global.System.Data.DataRow

        Private tableSVCUpdateClaim As SVCUpdateClaimDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSVCUpdateClaim = CType(Me.Table, SVCUpdateClaimDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Claim_ID() As String
            Get
                Return CType(Me(Me.tableSVCUpdateClaim.Claim_IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableSVCUpdateClaim.Claim_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Visit_Date() As Date
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Visit_DateColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Visit_Date' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableSVCUpdateClaim.Visit_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Repair_Date() As Date
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Repair_DateColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Repair_Date' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableSVCUpdateClaim.Repair_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Shipping_Amount() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Shipping_AmountColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipping_Amount' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableSVCUpdateClaim.Shipping_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Labor_Amount() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Labor_AmountColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Labor_Amount' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableSVCUpdateClaim.Labor_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Service_Charge_Amount() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Service_Charge_AmountColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Service_Charge_Amount' in table 'SVCUpdateClaim' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableSVCUpdateClaim.Service_Charge_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Trip_Amount() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Trip_AmountColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trip_Amount' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableSVCUpdateClaim.Trip_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Other_Amount() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Other_AmountColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other_Amount' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableSVCUpdateClaim.Other_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Other_Description() As String
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Other_DescriptionColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other_Description' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSVCUpdateClaim.Other_DescriptionColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Authorization_Number() As String
            Get
                Try
                    Return CType(Me(Me.tableSVCUpdateClaim.Authorization_NumberColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Authorization_Number' in table 'SVCUpdateClaim' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSVCUpdateClaim.Authorization_NumberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVCUpdateClaim_Id() As Integer
            Get
                Return CType(Me(Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableSVCUpdateClaim.SVCUpdateClaim_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsVisit_DateNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Visit_DateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetVisit_DateNull()
            Me(Me.tableSVCUpdateClaim.Visit_DateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsRepair_DateNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Repair_DateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetRepair_DateNull()
            Me(Me.tableSVCUpdateClaim.Repair_DateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsShipping_AmountNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Shipping_AmountColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetShipping_AmountNull()
            Me(Me.tableSVCUpdateClaim.Shipping_AmountColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLabor_AmountNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Labor_AmountColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLabor_AmountNull()
            Me(Me.tableSVCUpdateClaim.Labor_AmountColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsService_Charge_AmountNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Service_Charge_AmountColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetService_Charge_AmountNull()
            Me(Me.tableSVCUpdateClaim.Service_Charge_AmountColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTrip_AmountNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Trip_AmountColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTrip_AmountNull()
            Me(Me.tableSVCUpdateClaim.Trip_AmountColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsOther_AmountNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Other_AmountColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetOther_AmountNull()
            Me(Me.tableSVCUpdateClaim.Other_AmountColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsOther_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Other_DescriptionColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetOther_DescriptionNull()
            Me(Me.tableSVCUpdateClaim.Other_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAuthorization_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSVCUpdateClaim.Authorization_NumberColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAuthorization_NumberNull()
            Me(Me.tableSVCUpdateClaim.Authorization_NumberColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetParts_ListRows() As Parts_ListRow()
            If (Me.Table.ChildRelations("SVCUpdateClaim_Parts_List") Is Nothing) Then
                Return New Parts_ListRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SVCUpdateClaim_Parts_List")), Parts_ListRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetClaim_Extended_Status_ListRows() As Claim_Extended_Status_ListRow()
            If (Me.Table.ChildRelations("SVCUpdateClaim_Claim_Extended_Status_List") Is Nothing) Then
                Return New Claim_Extended_Status_ListRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SVCUpdateClaim_Claim_Extended_Status_List")), Claim_Extended_Status_ListRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class Parts_ListRow
        Inherits Global.System.Data.DataRow

        Private tableParts_List As Parts_ListDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParts_List = CType(Me.Table, Parts_ListDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Part_Code() As String
            Get
                Return CType(Me(Me.tableParts_List.Part_CodeColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableParts_List.Part_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Part_Amount() As Decimal
            Get
                Return CType(Me(Me.tableParts_List.Part_AmountColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableParts_List.Part_AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property In_Stock() As String
            Get
                Try
                    Return CType(Me(Me.tableParts_List.In_StockColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'In_Stock' in table 'Parts_List' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableParts_List.In_StockColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVCUpdateClaim_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableParts_List.SVCUpdateClaim_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SVCUpdateClaim_Id' in table 'Parts_List' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableParts_List.SVCUpdateClaim_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVCUpdateClaimRow() As SVCUpdateClaimRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SVCUpdateClaim_Parts_List")), SVCUpdateClaimRow)
            End Get
            Set(ByVal value As SVCUpdateClaimRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("SVCUpdateClaim_Parts_List"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsIn_StockNull() As Boolean
            Return Me.IsNull(Me.tableParts_List.In_StockColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetIn_StockNull()
            Me(Me.tableParts_List.In_StockColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSVCUpdateClaim_IdNull() As Boolean
            Return Me.IsNull(Me.tableParts_List.SVCUpdateClaim_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSVCUpdateClaim_IdNull()
            Me(Me.tableParts_List.SVCUpdateClaim_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class Claim_Extended_Status_ListRow
        Inherits Global.System.Data.DataRow

        Private tableClaim_Extended_Status_List As Claim_Extended_Status_ListDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClaim_Extended_Status_List = CType(Me.Table, Claim_Extended_Status_ListDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Claim_Extended_Status_Code() As String
            Get
                Return CType(Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CodeColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Claim_Extended_Status_Date() As Date
            Get
                Return CType(Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_DateColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Claim_Extended_Status_Comment() As String
            Get
                Try
                    Return CType(Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CommentColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Claim_Extended_Status_Comment' in table 'Claim_Extended_Sta" & _
                            "tus_List' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CommentColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVCUpdateClaim_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SVCUpdateClaim_Id' in table 'Claim_Extended_Status_List' is" & _
                            " DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SVCUpdateClaimRow() As SVCUpdateClaimRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SVCUpdateClaim_Claim_Extended_Status_List")), SVCUpdateClaimRow)
            End Get
            Set(ByVal value As SVCUpdateClaimRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("SVCUpdateClaim_Claim_Extended_Status_List"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsClaim_Extended_Status_CommentNull() As Boolean
            Return Me.IsNull(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CommentColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetClaim_Extended_Status_CommentNull()
            Me(Me.tableClaim_Extended_Status_List.Claim_Extended_Status_CommentColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSVCUpdateClaim_IdNull() As Boolean
            Return Me.IsNull(Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSVCUpdateClaim_IdNull()
            Me(Me.tableClaim_Extended_Status_List.SVCUpdateClaim_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class SVCUpdateClaimRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As SVCUpdateClaimRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As SVCUpdateClaimRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As SVCUpdateClaimRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class Parts_ListRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As Parts_ListRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As Parts_ListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As Parts_ListRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class Claim_Extended_Status_ListRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As Claim_Extended_Status_ListRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As Claim_Extended_Status_ListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As Claim_Extended_Status_ListRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
