'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.3038.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("OlitaUpdateConsumerInfoDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class OlitaUpdateConsumerInfoDs
    Inherits Global.System.Data.DataSet

    Private tableOlitaUpdateConsumerInfo As OlitaUpdateConsumerInfoDataTable

    Private tableproduct_serial_numbers As product_serial_numbersDataTable

    Private relationOlitaUpdateConsumerInfo_product_serial_numbers As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OlitaUpdateConsumerInfo")) Is Nothing) Then
                MyBase.Tables.Add(New OlitaUpdateConsumerInfoDataTable(ds.Tables("OlitaUpdateConsumerInfo")))
            End If
            If (Not (ds.Tables("product_serial_numbers")) Is Nothing) Then
                MyBase.Tables.Add(New product_serial_numbersDataTable(ds.Tables("product_serial_numbers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property OlitaUpdateConsumerInfo() As OlitaUpdateConsumerInfoDataTable
        Get
            Return Me.tableOlitaUpdateConsumerInfo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property product_serial_numbers() As product_serial_numbersDataTable
        Get
            Return Me.tableproduct_serial_numbers
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As OlitaUpdateConsumerInfoDs = CType(MyBase.Clone, OlitaUpdateConsumerInfoDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OlitaUpdateConsumerInfo")) Is Nothing) Then
                MyBase.Tables.Add(New OlitaUpdateConsumerInfoDataTable(ds.Tables("OlitaUpdateConsumerInfo")))
            End If
            If (Not (ds.Tables("product_serial_numbers")) Is Nothing) Then
                MyBase.Tables.Add(New product_serial_numbersDataTable(ds.Tables("product_serial_numbers")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOlitaUpdateConsumerInfo = CType(MyBase.Tables("OlitaUpdateConsumerInfo"), OlitaUpdateConsumerInfoDataTable)
        If (initTable = True) Then
            If (Not (Me.tableOlitaUpdateConsumerInfo) Is Nothing) Then
                Me.tableOlitaUpdateConsumerInfo.InitVars()
            End If
        End If
        Me.tableproduct_serial_numbers = CType(MyBase.Tables("product_serial_numbers"), product_serial_numbersDataTable)
        If (initTable = True) Then
            If (Not (Me.tableproduct_serial_numbers) Is Nothing) Then
                Me.tableproduct_serial_numbers.InitVars()
            End If
        End If
        Me.relationOlitaUpdateConsumerInfo_product_serial_numbers = Me.Relations("OlitaUpdateConsumerInfo_product_serial_numbers")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "OlitaUpdateConsumerInfoDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOlitaUpdateConsumerInfo = New OlitaUpdateConsumerInfoDataTable
        MyBase.Tables.Add(Me.tableOlitaUpdateConsumerInfo)
        Me.tableproduct_serial_numbers = New product_serial_numbersDataTable
        MyBase.Tables.Add(Me.tableproduct_serial_numbers)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("OlitaUpdateConsumerInfo_product_serial_numbers", New Global.System.Data.DataColumn() {Me.tableOlitaUpdateConsumerInfo.OlitaUpdateConsumerInfo_IdColumn}, New Global.System.Data.DataColumn() {Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn})
        Me.tableproduct_serial_numbers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationOlitaUpdateConsumerInfo_product_serial_numbers = New Global.System.Data.DataRelation("OlitaUpdateConsumerInfo_product_serial_numbers", New Global.System.Data.DataColumn() {Me.tableOlitaUpdateConsumerInfo.OlitaUpdateConsumerInfo_IdColumn}, New Global.System.Data.DataColumn() {Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn}, False)
        Me.relationOlitaUpdateConsumerInfo_product_serial_numbers.Nested = True
        Me.Relations.Add(Me.relationOlitaUpdateConsumerInfo_product_serial_numbers)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeOlitaUpdateConsumerInfo() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeproduct_serial_numbers() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As OlitaUpdateConsumerInfoDs = New OlitaUpdateConsumerInfoDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub OlitaUpdateConsumerInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As OlitaUpdateConsumerInfoRowChangeEvent)

    Public Delegate Sub product_serial_numbersRowChangeEventHandler(ByVal sender As Object, ByVal e As product_serial_numbersRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class OlitaUpdateConsumerInfoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columndealer As Global.System.Data.DataColumn

        Private columnSALUTATION As Global.System.Data.DataColumn

        Private columncert_number As Global.System.Data.DataColumn

        Private columncustomer_name As Global.System.Data.DataColumn

        Private columnaddress1 As Global.System.Data.DataColumn

        Private columnaddress2 As Global.System.Data.DataColumn

        Private columncity As Global.System.Data.DataColumn

        Private columnshort_desc As Global.System.Data.DataColumn

        Private columncode As Global.System.Data.DataColumn

        Private columnpostal_code As Global.System.Data.DataColumn

        Private columnhome_phone As Global.System.Data.DataColumn

        Private columnemail As Global.System.Data.DataColumn

        Private columnuser_pw As Global.System.Data.DataColumn

        Private columnwork_phone As Global.System.Data.DataColumn

        Private columnmembership_number As Global.System.Data.DataColumn

        Private columnprimary_member_name As Global.System.Data.DataColumn

        Private columnmailing_address1 As Global.System.Data.DataColumn

        Private columnmailing_address2 As Global.System.Data.DataColumn

        Private columnmailing_city As Global.System.Data.DataColumn

        Private columnmailing_region_short_desc As Global.System.Data.DataColumn

        Private columnmailing_country_code As Global.System.Data.DataColumn

        Private columnmailing_postal_code As Global.System.Data.DataColumn

        Private columnwarranty_sales_date As Global.System.Data.DataColumn

        Private columnmembership_type As Global.System.Data.DataColumn

        Private columnvat_num As Global.System.Data.DataColumn

        Private columnidentification_number As Global.System.Data.DataColumn

        Private columnproduct_sales_date As Global.System.Data.DataColumn

        Private columnsales_price As Global.System.Data.DataColumn

        Private columnOlitaUpdateConsumerInfo_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "OlitaUpdateConsumerInfo"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property dealerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndealer
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SALUTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALUTATION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property cert_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncert_number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property customer_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomer_name
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property short_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshort_desc
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property postal_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpostal_code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property home_phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhome_phone
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property user_pwColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser_pw
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property work_phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwork_phone
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property membership_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmembership_number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property primary_member_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprimary_member_name
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_address1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_address2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_city
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_region_short_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_region_short_desc
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_country_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_country_code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property mailing_postal_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmailing_postal_code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property warranty_sales_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwarranty_sales_date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property membership_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmembership_type
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property vat_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvat_num
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property identification_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidentification_number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_sales_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_sales_date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property sales_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsales_price
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property OlitaUpdateConsumerInfo_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaUpdateConsumerInfo_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As OlitaUpdateConsumerInfoRow
            Get
                Return CType(Me.Rows(index), OlitaUpdateConsumerInfoRow)
            End Get
        End Property

        Public Event OlitaUpdateConsumerInfoRowChanging As OlitaUpdateConsumerInfoRowChangeEventHandler

        Public Event OlitaUpdateConsumerInfoRowChanged As OlitaUpdateConsumerInfoRowChangeEventHandler

        Public Event OlitaUpdateConsumerInfoRowDeleting As OlitaUpdateConsumerInfoRowChangeEventHandler

        Public Event OlitaUpdateConsumerInfoRowDeleted As OlitaUpdateConsumerInfoRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddOlitaUpdateConsumerInfoRow(ByVal row As OlitaUpdateConsumerInfoRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddOlitaUpdateConsumerInfoRow( _
                    ByVal dealer As String, _
                    ByVal SALUTATION As String, _
                    ByVal cert_number As String, _
                    ByVal customer_name As String, _
                    ByVal address1 As String, _
                    ByVal address2 As String, _
                    ByVal city As String, _
                    ByVal short_desc As String, _
                    ByVal code As String, _
                    ByVal postal_code As String, _
                    ByVal home_phone As String, _
                    ByVal email As String, _
                    ByVal user_pw As String, _
                    ByVal work_phone As String, _
                    ByVal membership_number As String, _
                    ByVal primary_member_name As String, _
                    ByVal mailing_address1 As String, _
                    ByVal mailing_address2 As String, _
                    ByVal mailing_city As String, _
                    ByVal mailing_region_short_desc As String, _
                    ByVal mailing_country_code As String, _
                    ByVal mailing_postal_code As String, _
                    ByVal warranty_sales_date As Date, _
                    ByVal membership_type As String, _
                    ByVal vat_num As String, _
                    ByVal identification_number As String, _
                    ByVal product_sales_date As Date, _
                    ByVal sales_price As Decimal) As OlitaUpdateConsumerInfoRow
            Dim rowOlitaUpdateConsumerInfoRow As OlitaUpdateConsumerInfoRow = CType(Me.NewRow, OlitaUpdateConsumerInfoRow)
            Dim columnValuesArray() As Object = New Object() {dealer, SALUTATION, cert_number, customer_name, address1, address2, city, short_desc, code, postal_code, home_phone, email, user_pw, work_phone, membership_number, primary_member_name, mailing_address1, mailing_address2, mailing_city, mailing_region_short_desc, mailing_country_code, mailing_postal_code, warranty_sales_date, membership_type, vat_num, identification_number, product_sales_date, sales_price, Nothing}
            rowOlitaUpdateConsumerInfoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOlitaUpdateConsumerInfoRow)
            Return rowOlitaUpdateConsumerInfoRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OlitaUpdateConsumerInfoDataTable = CType(MyBase.Clone, OlitaUpdateConsumerInfoDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OlitaUpdateConsumerInfoDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columndealer = MyBase.Columns("dealer")
            Me.columnSALUTATION = MyBase.Columns("SALUTATION")
            Me.columncert_number = MyBase.Columns("cert_number")
            Me.columncustomer_name = MyBase.Columns("customer_name")
            Me.columnaddress1 = MyBase.Columns("address1")
            Me.columnaddress2 = MyBase.Columns("address2")
            Me.columncity = MyBase.Columns("city")
            Me.columnshort_desc = MyBase.Columns("short_desc")
            Me.columncode = MyBase.Columns("code")
            Me.columnpostal_code = MyBase.Columns("postal_code")
            Me.columnhome_phone = MyBase.Columns("home_phone")
            Me.columnemail = MyBase.Columns("email")
            Me.columnuser_pw = MyBase.Columns("user_pw")
            Me.columnwork_phone = MyBase.Columns("work_phone")
            Me.columnmembership_number = MyBase.Columns("membership_number")
            Me.columnprimary_member_name = MyBase.Columns("primary_member_name")
            Me.columnmailing_address1 = MyBase.Columns("mailing_address1")
            Me.columnmailing_address2 = MyBase.Columns("mailing_address2")
            Me.columnmailing_city = MyBase.Columns("mailing_city")
            Me.columnmailing_region_short_desc = MyBase.Columns("mailing_region_short_desc")
            Me.columnmailing_country_code = MyBase.Columns("mailing_country_code")
            Me.columnmailing_postal_code = MyBase.Columns("mailing_postal_code")
            Me.columnwarranty_sales_date = MyBase.Columns("warranty_sales_date")
            Me.columnmembership_type = MyBase.Columns("membership_type")
            Me.columnvat_num = MyBase.Columns("vat_num")
            Me.columnidentification_number = MyBase.Columns("identification_number")
            Me.columnproduct_sales_date = MyBase.Columns("product_sales_date")
            Me.columnsales_price = MyBase.Columns("sales_price")
            Me.columnOlitaUpdateConsumerInfo_Id = MyBase.Columns("OlitaUpdateConsumerInfo_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columndealer = New Global.System.Data.DataColumn("dealer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndealer)
            Me.columnSALUTATION = New Global.System.Data.DataColumn("SALUTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALUTATION)
            Me.columncert_number = New Global.System.Data.DataColumn("cert_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncert_number)
            Me.columncustomer_name = New Global.System.Data.DataColumn("customer_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomer_name)
            Me.columnaddress1 = New Global.System.Data.DataColumn("address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress1)
            Me.columnaddress2 = New Global.System.Data.DataColumn("address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress2)
            Me.columncity = New Global.System.Data.DataColumn("city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncity)
            Me.columnshort_desc = New Global.System.Data.DataColumn("short_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshort_desc)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnpostal_code = New Global.System.Data.DataColumn("postal_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpostal_code)
            Me.columnhome_phone = New Global.System.Data.DataColumn("home_phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhome_phone)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnuser_pw = New Global.System.Data.DataColumn("user_pw", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser_pw)
            Me.columnwork_phone = New Global.System.Data.DataColumn("work_phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwork_phone)
            Me.columnmembership_number = New Global.System.Data.DataColumn("membership_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmembership_number)
            Me.columnprimary_member_name = New Global.System.Data.DataColumn("primary_member_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprimary_member_name)
            Me.columnmailing_address1 = New Global.System.Data.DataColumn("mailing_address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_address1)
            Me.columnmailing_address2 = New Global.System.Data.DataColumn("mailing_address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_address2)
            Me.columnmailing_city = New Global.System.Data.DataColumn("mailing_city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_city)
            Me.columnmailing_region_short_desc = New Global.System.Data.DataColumn("mailing_region_short_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_region_short_desc)
            Me.columnmailing_country_code = New Global.System.Data.DataColumn("mailing_country_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_country_code)
            Me.columnmailing_postal_code = New Global.System.Data.DataColumn("mailing_postal_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmailing_postal_code)
            Me.columnwarranty_sales_date = New Global.System.Data.DataColumn("warranty_sales_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwarranty_sales_date)
            Me.columnmembership_type = New Global.System.Data.DataColumn("membership_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmembership_type)
            Me.columnvat_num = New Global.System.Data.DataColumn("vat_num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvat_num)
            Me.columnidentification_number = New Global.System.Data.DataColumn("identification_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidentification_number)
            Me.columnproduct_sales_date = New Global.System.Data.DataColumn("product_sales_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_sales_date)
            Me.columnsales_price = New Global.System.Data.DataColumn("sales_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsales_price)
            Me.columnOlitaUpdateConsumerInfo_Id = New Global.System.Data.DataColumn("OlitaUpdateConsumerInfo_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaUpdateConsumerInfo_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOlitaUpdateConsumerInfo_Id}, True))
            Me.columndealer.AllowDBNull = False
            Me.columncert_number.AllowDBNull = False
            Me.columncustomer_name.AllowDBNull = False
            Me.columnaddress1.AllowDBNull = False
            Me.columncity.AllowDBNull = False
            Me.columnshort_desc.AllowDBNull = False
            Me.columncode.AllowDBNull = False
            Me.columnpostal_code.AllowDBNull = False
            Me.columnhome_phone.AllowDBNull = False
            Me.columnemail.AllowDBNull = False
            Me.columnuser_pw.AllowDBNull = False
            Me.columnOlitaUpdateConsumerInfo_Id.AutoIncrement = True
            Me.columnOlitaUpdateConsumerInfo_Id.AllowDBNull = False
            Me.columnOlitaUpdateConsumerInfo_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewOlitaUpdateConsumerInfoRow() As OlitaUpdateConsumerInfoRow
            Return CType(Me.NewRow, OlitaUpdateConsumerInfoRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OlitaUpdateConsumerInfoRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OlitaUpdateConsumerInfoRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OlitaUpdateConsumerInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent OlitaUpdateConsumerInfoRowChanged(Me, New OlitaUpdateConsumerInfoRowChangeEvent(CType(e.Row, OlitaUpdateConsumerInfoRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OlitaUpdateConsumerInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent OlitaUpdateConsumerInfoRowChanging(Me, New OlitaUpdateConsumerInfoRowChangeEvent(CType(e.Row, OlitaUpdateConsumerInfoRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OlitaUpdateConsumerInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent OlitaUpdateConsumerInfoRowDeleted(Me, New OlitaUpdateConsumerInfoRowChangeEvent(CType(e.Row, OlitaUpdateConsumerInfoRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OlitaUpdateConsumerInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent OlitaUpdateConsumerInfoRowDeleting(Me, New OlitaUpdateConsumerInfoRowChangeEvent(CType(e.Row, OlitaUpdateConsumerInfoRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveOlitaUpdateConsumerInfoRow(ByVal row As OlitaUpdateConsumerInfoRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As OlitaUpdateConsumerInfoDs = New OlitaUpdateConsumerInfoDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OlitaUpdateConsumerInfoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class product_serial_numbersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnfull_cert_number As Global.System.Data.DataColumn

        Private columnproduct_serial_number As Global.System.Data.DataColumn

        Private columnproduct_description As Global.System.Data.DataColumn

        Private columnproduct_item_code As Global.System.Data.DataColumn

        Private columnproduct_manufacturer As Global.System.Data.DataColumn

        Private columnproduct_model As Global.System.Data.DataColumn

        Private columnproduct_item_retail_price As Global.System.Data.DataColumn

        Private columnOlitaUpdateConsumerInfo_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "product_serial_numbers"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property full_cert_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfull_cert_number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_serial_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_serial_number
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_description
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_item_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_item_code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_manufacturerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_manufacturer
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_model
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property product_item_retail_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproduct_item_retail_price
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property OlitaUpdateConsumerInfo_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaUpdateConsumerInfo_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As product_serial_numbersRow
            Get
                Return CType(Me.Rows(index), product_serial_numbersRow)
            End Get
        End Property

        Public Event product_serial_numbersRowChanging As product_serial_numbersRowChangeEventHandler

        Public Event product_serial_numbersRowChanged As product_serial_numbersRowChangeEventHandler

        Public Event product_serial_numbersRowDeleting As product_serial_numbersRowChangeEventHandler

        Public Event product_serial_numbersRowDeleted As product_serial_numbersRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub Addproduct_serial_numbersRow(ByVal row As product_serial_numbersRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function Addproduct_serial_numbersRow(ByVal full_cert_number As String, ByVal product_serial_number As String, ByVal product_description As String, ByVal product_item_code As String, ByVal product_manufacturer As String, ByVal product_model As String, ByVal product_item_retail_price As Decimal, ByVal parentOlitaUpdateConsumerInfoRowByOlitaUpdateConsumerInfo_product_serial_numbers As OlitaUpdateConsumerInfoRow) As product_serial_numbersRow
            Dim rowproduct_serial_numbersRow As product_serial_numbersRow = CType(Me.NewRow, product_serial_numbersRow)
            Dim columnValuesArray() As Object = New Object() {full_cert_number, product_serial_number, product_description, product_item_code, product_manufacturer, product_model, product_item_retail_price, Nothing}
            If (Not (parentOlitaUpdateConsumerInfoRowByOlitaUpdateConsumerInfo_product_serial_numbers) Is Nothing) Then
                columnValuesArray(7) = parentOlitaUpdateConsumerInfoRowByOlitaUpdateConsumerInfo_product_serial_numbers(28)
            End If
            rowproduct_serial_numbersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproduct_serial_numbersRow)
            Return rowproduct_serial_numbersRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As product_serial_numbersDataTable = CType(MyBase.Clone, product_serial_numbersDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New product_serial_numbersDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnfull_cert_number = MyBase.Columns("full_cert_number")
            Me.columnproduct_serial_number = MyBase.Columns("product_serial_number")
            Me.columnproduct_description = MyBase.Columns("product_description")
            Me.columnproduct_item_code = MyBase.Columns("product_item_code")
            Me.columnproduct_manufacturer = MyBase.Columns("product_manufacturer")
            Me.columnproduct_model = MyBase.Columns("product_model")
            Me.columnproduct_item_retail_price = MyBase.Columns("product_item_retail_price")
            Me.columnOlitaUpdateConsumerInfo_Id = MyBase.Columns("OlitaUpdateConsumerInfo_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnfull_cert_number = New Global.System.Data.DataColumn("full_cert_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfull_cert_number)
            Me.columnproduct_serial_number = New Global.System.Data.DataColumn("product_serial_number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_serial_number)
            Me.columnproduct_description = New Global.System.Data.DataColumn("product_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_description)
            Me.columnproduct_item_code = New Global.System.Data.DataColumn("product_item_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_item_code)
            Me.columnproduct_manufacturer = New Global.System.Data.DataColumn("product_manufacturer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_manufacturer)
            Me.columnproduct_model = New Global.System.Data.DataColumn("product_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_model)
            Me.columnproduct_item_retail_price = New Global.System.Data.DataColumn("product_item_retail_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproduct_item_retail_price)
            Me.columnOlitaUpdateConsumerInfo_Id = New Global.System.Data.DataColumn("OlitaUpdateConsumerInfo_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaUpdateConsumerInfo_Id)
            Me.columnfull_cert_number.AllowDBNull = False
            Me.columnproduct_serial_number.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Newproduct_serial_numbersRow() As product_serial_numbersRow
            Return CType(Me.NewRow, product_serial_numbersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New product_serial_numbersRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(product_serial_numbersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.product_serial_numbersRowChangedEvent) Is Nothing) Then
                RaiseEvent product_serial_numbersRowChanged(Me, New product_serial_numbersRowChangeEvent(CType(e.Row, product_serial_numbersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.product_serial_numbersRowChangingEvent) Is Nothing) Then
                RaiseEvent product_serial_numbersRowChanging(Me, New product_serial_numbersRowChangeEvent(CType(e.Row, product_serial_numbersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.product_serial_numbersRowDeletedEvent) Is Nothing) Then
                RaiseEvent product_serial_numbersRowDeleted(Me, New product_serial_numbersRowChangeEvent(CType(e.Row, product_serial_numbersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.product_serial_numbersRowDeletingEvent) Is Nothing) Then
                RaiseEvent product_serial_numbersRowDeleting(Me, New product_serial_numbersRowChangeEvent(CType(e.Row, product_serial_numbersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Removeproduct_serial_numbersRow(ByVal row As product_serial_numbersRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As OlitaUpdateConsumerInfoDs = New OlitaUpdateConsumerInfoDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "product_serial_numbersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class OlitaUpdateConsumerInfoRow
        Inherits Global.System.Data.DataRow

        Private tableOlitaUpdateConsumerInfo As OlitaUpdateConsumerInfoDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOlitaUpdateConsumerInfo = CType(Me.Table, OlitaUpdateConsumerInfoDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property dealer() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.dealerColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.dealerColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SALUTATION() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.SALUTATIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALUTATION' in table 'OlitaUpdateConsumerInfo' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.SALUTATIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property cert_number() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.cert_numberColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.cert_numberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property customer_name() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.customer_nameColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.customer_nameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property address1() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.address1Column), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.address1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property address2() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.address2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'address2' in table 'OlitaUpdateConsumerInfo' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.address2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property city() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.cityColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.cityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property short_desc() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.short_descColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.short_descColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property code() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.codeColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.codeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property postal_code() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.postal_codeColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.postal_codeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property home_phone() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.home_phoneColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.home_phoneColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.emailColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.emailColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property user_pw() As String
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.user_pwColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.user_pwColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property work_phone() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.work_phoneColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'work_phone' in table 'OlitaUpdateConsumerInfo' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.work_phoneColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property membership_number() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.membership_numberColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'membership_number' in table 'OlitaUpdateConsumerInfo' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.membership_numberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property primary_member_name() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.primary_member_nameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary_member_name' in table 'OlitaUpdateConsumerInfo' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.primary_member_nameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_address1() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_address1Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_address1' in table 'OlitaUpdateConsumerInfo' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_address1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_address2() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_address2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_address2' in table 'OlitaUpdateConsumerInfo' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_address2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_city() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_cityColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_city' in table 'OlitaUpdateConsumerInfo' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_cityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_region_short_desc() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_region_short_descColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_region_short_desc' in table 'OlitaUpdateConsumerInf" & _
                            "o' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_region_short_descColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_country_code() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_country_codeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_country_code' in table 'OlitaUpdateConsumerInfo' is" & _
                            " DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_country_codeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property mailing_postal_code() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.mailing_postal_codeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mailing_postal_code' in table 'OlitaUpdateConsumerInfo' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.mailing_postal_codeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property warranty_sales_date() As Date
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.warranty_sales_dateColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'warranty_sales_date' in table 'OlitaUpdateConsumerInfo' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableOlitaUpdateConsumerInfo.warranty_sales_dateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property membership_type() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.membership_typeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'membership_type' in table 'OlitaUpdateConsumerInfo' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.membership_typeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property vat_num() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.vat_numColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vat_num' in table 'OlitaUpdateConsumerInfo' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.vat_numColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property identification_number() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.identification_numberColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'identification_number' in table 'OlitaUpdateConsumerInfo' i" & _
                            "s DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaUpdateConsumerInfo.identification_numberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_sales_date() As Date
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.product_sales_dateColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_sales_date' in table 'OlitaUpdateConsumerInfo' is D" & _
                            "BNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableOlitaUpdateConsumerInfo.product_sales_dateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property sales_price() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableOlitaUpdateConsumerInfo.sales_priceColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sales_price' in table 'OlitaUpdateConsumerInfo' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableOlitaUpdateConsumerInfo.sales_priceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property OlitaUpdateConsumerInfo_Id() As Integer
            Get
                Return CType(Me(Me.tableOlitaUpdateConsumerInfo.OlitaUpdateConsumerInfo_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaUpdateConsumerInfo.OlitaUpdateConsumerInfo_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSALUTATIONNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.SALUTATIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSALUTATIONNull()
            Me(Me.tableOlitaUpdateConsumerInfo.SALUTATIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isaddress2Null() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.address2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setaddress2Null()
            Me(Me.tableOlitaUpdateConsumerInfo.address2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Iswork_phoneNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.work_phoneColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setwork_phoneNull()
            Me(Me.tableOlitaUpdateConsumerInfo.work_phoneColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismembership_numberNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.membership_numberColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmembership_numberNull()
            Me(Me.tableOlitaUpdateConsumerInfo.membership_numberColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isprimary_member_nameNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.primary_member_nameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setprimary_member_nameNull()
            Me(Me.tableOlitaUpdateConsumerInfo.primary_member_nameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_address1Null() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_address1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_address1Null()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_address1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_address2Null() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_address2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_address2Null()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_address2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_cityNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_cityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_cityNull()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_cityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_region_short_descNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_region_short_descColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_region_short_descNull()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_region_short_descColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_country_codeNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_country_codeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_country_codeNull()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_country_codeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismailing_postal_codeNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.mailing_postal_codeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmailing_postal_codeNull()
            Me(Me.tableOlitaUpdateConsumerInfo.mailing_postal_codeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Iswarranty_sales_dateNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.warranty_sales_dateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setwarranty_sales_dateNull()
            Me(Me.tableOlitaUpdateConsumerInfo.warranty_sales_dateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Ismembership_typeNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.membership_typeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setmembership_typeNull()
            Me(Me.tableOlitaUpdateConsumerInfo.membership_typeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isvat_numNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.vat_numColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setvat_numNull()
            Me(Me.tableOlitaUpdateConsumerInfo.vat_numColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isidentification_numberNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.identification_numberColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setidentification_numberNull()
            Me(Me.tableOlitaUpdateConsumerInfo.identification_numberColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_sales_dateNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.product_sales_dateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_sales_dateNull()
            Me(Me.tableOlitaUpdateConsumerInfo.product_sales_dateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Issales_priceNull() As Boolean
            Return Me.IsNull(Me.tableOlitaUpdateConsumerInfo.sales_priceColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setsales_priceNull()
            Me(Me.tableOlitaUpdateConsumerInfo.sales_priceColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Getproduct_serial_numbersRows() As product_serial_numbersRow()
            If (Me.Table.ChildRelations("OlitaUpdateConsumerInfo_product_serial_numbers") Is Nothing) Then
                Return New product_serial_numbersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("OlitaUpdateConsumerInfo_product_serial_numbers")), product_serial_numbersRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class product_serial_numbersRow
        Inherits Global.System.Data.DataRow

        Private tableproduct_serial_numbers As product_serial_numbersDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproduct_serial_numbers = CType(Me.Table, product_serial_numbersDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property full_cert_number() As String
            Get
                Return CType(Me(Me.tableproduct_serial_numbers.full_cert_numberColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.full_cert_numberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_serial_number() As String
            Get
                Return CType(Me(Me.tableproduct_serial_numbers.product_serial_numberColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.product_serial_numberColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_description() As String
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.product_descriptionColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_description' in table 'product_serial_numbers' is D" & _
                            "BNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.product_descriptionColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_item_code() As String
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.product_item_codeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_item_code' in table 'product_serial_numbers' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.product_item_codeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_manufacturer() As String
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.product_manufacturerColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_manufacturer' in table 'product_serial_numbers' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.product_manufacturerColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_model() As String
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.product_modelColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_model' in table 'product_serial_numbers' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableproduct_serial_numbers.product_modelColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property product_item_retail_price() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.product_item_retail_priceColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'product_item_retail_price' in table 'product_serial_numbers" & _
                            "' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableproduct_serial_numbers.product_item_retail_priceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property OlitaUpdateConsumerInfo_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlitaUpdateConsumerInfo_Id' in table 'product_serial_number" & _
                            "s' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property OlitaUpdateConsumerInfoRow() As OlitaUpdateConsumerInfoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("OlitaUpdateConsumerInfo_product_serial_numbers")), OlitaUpdateConsumerInfoRow)
            End Get
            Set(ByVal value As OlitaUpdateConsumerInfoRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("OlitaUpdateConsumerInfo_product_serial_numbers"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.product_descriptionColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_descriptionNull()
            Me(Me.tableproduct_serial_numbers.product_descriptionColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_item_codeNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.product_item_codeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_item_codeNull()
            Me(Me.tableproduct_serial_numbers.product_item_codeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_manufacturerNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.product_manufacturerColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_manufacturerNull()
            Me(Me.tableproduct_serial_numbers.product_manufacturerColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_modelNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.product_modelColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_modelNull()
            Me(Me.tableproduct_serial_numbers.product_modelColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Isproduct_item_retail_priceNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.product_item_retail_priceColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Setproduct_item_retail_priceNull()
            Me(Me.tableproduct_serial_numbers.product_item_retail_priceColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsOlitaUpdateConsumerInfo_IdNull() As Boolean
            Return Me.IsNull(Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetOlitaUpdateConsumerInfo_IdNull()
            Me(Me.tableproduct_serial_numbers.OlitaUpdateConsumerInfo_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class OlitaUpdateConsumerInfoRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As OlitaUpdateConsumerInfoRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As OlitaUpdateConsumerInfoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As OlitaUpdateConsumerInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class product_serial_numbersRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As product_serial_numbersRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As product_serial_numbersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As product_serial_numbersRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
