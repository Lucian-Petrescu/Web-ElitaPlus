'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=4.0.30319.1.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("OlitaInsertCertDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class OlitaInsertCertDs
    Inherits Global.System.Data.DataSet

    Private tableOlitaInsertCert As OlitaInsertCertDataTable

    Private tableBUNDLED_ITEMS As BUNDLED_ITEMSDataTable

    Private tableADDITIONAL_CERT_NUMBER As ADDITIONAL_CERT_NUMBERDataTable

    Private tableTESTTEST As TESTTESTDataTable

    Private relationOlitaInsertCert_BUNDLED_ITEMS As Global.System.Data.DataRelation

    Private relationOlitaInsertCert_ADDITIONAL_CERT_NUMBER As Global.System.Data.DataRelation

    Private relationOlitaInsertCert_TESTTEST As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OlitaInsertCert")) Is Nothing) Then
                MyBase.Tables.Add(New OlitaInsertCertDataTable(ds.Tables("OlitaInsertCert")))
            End If
            If (Not (ds.Tables("BUNDLED_ITEMS")) Is Nothing) Then
                MyBase.Tables.Add(New BUNDLED_ITEMSDataTable(ds.Tables("BUNDLED_ITEMS")))
            End If
            If (Not (ds.Tables("ADDITIONAL_CERT_NUMBER")) Is Nothing) Then
                MyBase.Tables.Add(New ADDITIONAL_CERT_NUMBERDataTable(ds.Tables("ADDITIONAL_CERT_NUMBER")))
            End If
            If (Not (ds.Tables("TESTTEST")) Is Nothing) Then
                MyBase.Tables.Add(New TESTTESTDataTable(ds.Tables("TESTTEST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property OlitaInsertCert() As OlitaInsertCertDataTable
        Get
            Return Me.tableOlitaInsertCert
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property BUNDLED_ITEMS() As BUNDLED_ITEMSDataTable
        Get
            Return Me.tableBUNDLED_ITEMS
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ADDITIONAL_CERT_NUMBER() As ADDITIONAL_CERT_NUMBERDataTable
        Get
            Return Me.tableADDITIONAL_CERT_NUMBER
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TESTTEST() As TESTTESTDataTable
        Get
            Return Me.tableTESTTEST
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As OlitaInsertCertDs = CType(MyBase.Clone, OlitaInsertCertDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("OlitaInsertCert")) Is Nothing) Then
                MyBase.Tables.Add(New OlitaInsertCertDataTable(ds.Tables("OlitaInsertCert")))
            End If
            If (Not (ds.Tables("BUNDLED_ITEMS")) Is Nothing) Then
                MyBase.Tables.Add(New BUNDLED_ITEMSDataTable(ds.Tables("BUNDLED_ITEMS")))
            End If
            If (Not (ds.Tables("ADDITIONAL_CERT_NUMBER")) Is Nothing) Then
                MyBase.Tables.Add(New ADDITIONAL_CERT_NUMBERDataTable(ds.Tables("ADDITIONAL_CERT_NUMBER")))
            End If
            If (Not (ds.Tables("TESTTEST")) Is Nothing) Then
                MyBase.Tables.Add(New TESTTESTDataTable(ds.Tables("TESTTEST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOlitaInsertCert = CType(MyBase.Tables("OlitaInsertCert"), OlitaInsertCertDataTable)
        If (initTable = True) Then
            If (Not (Me.tableOlitaInsertCert) Is Nothing) Then
                Me.tableOlitaInsertCert.InitVars()
            End If
        End If
        Me.tableBUNDLED_ITEMS = CType(MyBase.Tables("BUNDLED_ITEMS"), BUNDLED_ITEMSDataTable)
        If (initTable = True) Then
            If (Not (Me.tableBUNDLED_ITEMS) Is Nothing) Then
                Me.tableBUNDLED_ITEMS.InitVars()
            End If
        End If
        Me.tableADDITIONAL_CERT_NUMBER = CType(MyBase.Tables("ADDITIONAL_CERT_NUMBER"), ADDITIONAL_CERT_NUMBERDataTable)
        If (initTable = True) Then
            If (Not (Me.tableADDITIONAL_CERT_NUMBER) Is Nothing) Then
                Me.tableADDITIONAL_CERT_NUMBER.InitVars()
            End If
        End If
        Me.tableTESTTEST = CType(MyBase.Tables("TESTTEST"), TESTTESTDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTESTTEST) Is Nothing) Then
                Me.tableTESTTEST.InitVars()
            End If
        End If
        Me.relationOlitaInsertCert_BUNDLED_ITEMS = Me.Relations("OlitaInsertCert_BUNDLED_ITEMS")
        Me.relationOlitaInsertCert_ADDITIONAL_CERT_NUMBER = Me.Relations("OlitaInsertCert_ADDITIONAL_CERT_NUMBER")
        Me.relationOlitaInsertCert_TESTTEST = Me.Relations("OlitaInsertCert_TESTTEST")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
        Me.DataSetName = "OlitaInsertCertDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOlitaInsertCert = New OlitaInsertCertDataTable()
        MyBase.Tables.Add(Me.tableOlitaInsertCert)
        Me.tableBUNDLED_ITEMS = New BUNDLED_ITEMSDataTable()
        MyBase.Tables.Add(Me.tableBUNDLED_ITEMS)
        Me.tableADDITIONAL_CERT_NUMBER = New ADDITIONAL_CERT_NUMBERDataTable()
        MyBase.Tables.Add(Me.tableADDITIONAL_CERT_NUMBER)
        Me.tableTESTTEST = New TESTTESTDataTable()
        MyBase.Tables.Add(Me.tableTESTTEST)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("OlitaInsertCert_BUNDLED_ITEMS", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn})
        Me.tableBUNDLED_ITEMS.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("OlitaInsertCert_ADDITIONAL_CERT_NUMBER", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn})
        Me.tableADDITIONAL_CERT_NUMBER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("OlitaInsertCert_TESTTEST", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTESTTEST.OlitaInsertCert_IdColumn})
        Me.tableTESTTEST.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationOlitaInsertCert_BUNDLED_ITEMS = New Global.System.Data.DataRelation("OlitaInsertCert_BUNDLED_ITEMS", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn}, False)
        Me.relationOlitaInsertCert_BUNDLED_ITEMS.Nested = True
        Me.Relations.Add(Me.relationOlitaInsertCert_BUNDLED_ITEMS)
        Me.relationOlitaInsertCert_ADDITIONAL_CERT_NUMBER = New Global.System.Data.DataRelation("OlitaInsertCert_ADDITIONAL_CERT_NUMBER", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn}, False)
        Me.relationOlitaInsertCert_ADDITIONAL_CERT_NUMBER.Nested = True
        Me.Relations.Add(Me.relationOlitaInsertCert_ADDITIONAL_CERT_NUMBER)
        Me.relationOlitaInsertCert_TESTTEST = New Global.System.Data.DataRelation("OlitaInsertCert_TESTTEST", New Global.System.Data.DataColumn() {Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTESTTEST.OlitaInsertCert_IdColumn}, False)
        Me.relationOlitaInsertCert_TESTTEST.Nested = True
        Me.Relations.Add(Me.relationOlitaInsertCert_TESTTEST)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeOlitaInsertCert() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeBUNDLED_ITEMS() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeADDITIONAL_CERT_NUMBER() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeTESTTEST() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As OlitaInsertCertDs = New OlitaInsertCertDs()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub OlitaInsertCertRowChangeEventHandler(ByVal sender As Object, ByVal e As OlitaInsertCertRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub BUNDLED_ITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As BUNDLED_ITEMSRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub ADDITIONAL_CERT_NUMBERRowChangeEventHandler(ByVal sender As Object, ByVal e As ADDITIONAL_CERT_NUMBERRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub TESTTESTRowChangeEventHandler(ByVal sender As Object, ByVal e As TESTTESTRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class OlitaInsertCertDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnRECORD_TYPE As Global.System.Data.DataColumn

        Private columnCOMPANY_CODE As Global.System.Data.DataColumn

        Private columnDEALER_CODE As Global.System.Data.DataColumn

        Private columnCERT_NUMBER As Global.System.Data.DataColumn

        Private columnPRODUCT_CODE As Global.System.Data.DataColumn

        Private columnCERT_DURATION As Global.System.Data.DataColumn

        Private columnMANUFACTURER_DURATION As Global.System.Data.DataColumn

        Private columnWARRANTY_SALES_DATE As Global.System.Data.DataColumn

        Private columnPRODUCT_SALES_DATE As Global.System.Data.DataColumn

        Private columnWARRANTY_PRICE As Global.System.Data.DataColumn

        Private columnPRODUCT_RETAIL_PRICE As Global.System.Data.DataColumn

        Private columnINVOICE_NUMBER As Global.System.Data.DataColumn

        Private columnBRANCH_CODE As Global.System.Data.DataColumn

        Private columnSALES_REP_NUMBER As Global.System.Data.DataColumn

        Private columnMAKE As Global.System.Data.DataColumn

        Private columnMODEL As Global.System.Data.DataColumn

        Private columnSERIAL_NUMBER As Global.System.Data.DataColumn

        Private columnITEM_CODE As Global.System.Data.DataColumn

        Private columnITEM_DESCRIPTION As Global.System.Data.DataColumn

        Private columnSALUTATION As Global.System.Data.DataColumn

        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn

        Private columnCUSTOMER_TAX_ID As Global.System.Data.DataColumn

        Private columnCUSTOMER_HOME_PHONE As Global.System.Data.DataColumn

        Private columnCUSTOMER_WORK_PHONE As Global.System.Data.DataColumn

        Private columnCUSTOMER_EMAIL As Global.System.Data.DataColumn

        Private columnCUSTOMER_ADDRESS1 As Global.System.Data.DataColumn

        Private columnCUSTOMER_ADDRESS2 As Global.System.Data.DataColumn

        Private columnCUSTOMER_CITY As Global.System.Data.DataColumn

        Private columnCUSTOMER_STATE As Global.System.Data.DataColumn

        Private columnCUSTOMER_ZIP As Global.System.Data.DataColumn

        Private columnCUSTOMER_COUNTRY_ISO_CODE As Global.System.Data.DataColumn

        Private columnPURCHASE_COUNTRY_ISO_CODE As Global.System.Data.DataColumn

        Private columnCURRENCY_ISO_CODE As Global.System.Data.DataColumn

        Private columnPAYMENT_TYPE As Global.System.Data.DataColumn

        Private columnBILLING_FREQUENCY As Global.System.Data.DataColumn

        Private columnNUMBER_OF_INSTALLMENTS As Global.System.Data.DataColumn

        Private columnINSTALLMENT_AMOUNT As Global.System.Data.DataColumn

        Private columnBANK_RTN_NUMBER As Global.System.Data.DataColumn

        Private columnBANK_ACCOUNT_NUMBER As Global.System.Data.DataColumn

        Private columnBANK_ACCT_OWNER_NAME As Global.System.Data.DataColumn

        Private columnMEMBERSHIP_NUMBER As Global.System.Data.DataColumn

        Private columnADDITIONAL_CERT_QUANTITY As Global.System.Data.DataColumn

        ' Private columnADDITIONAL_CERT_NUMBER As Global.System.Data.DataColumn

        Private columnSKU As Global.System.Data.DataColumn

        Private columnSUBSCRIBER_STATUS As Global.System.Data.DataColumn

        Private columnPOST_PRE_PAID As Global.System.Data.DataColumn

        Private columnBILLING_PLAN As Global.System.Data.DataColumn

        Private columnBILLING_CYCLE As Global.System.Data.DataColumn

        Private columnMEMBERSHIP_TYPE As Global.System.Data.DataColumn

        Private columnMKT_PROMO_SER As Global.System.Data.DataColumn

        Private columnMKT_PROMO_NUM As Global.System.Data.DataColumn

        Private columnOlitaInsertCert_Id As Global.System.Data.DataColumn

        Private columnSALES_CHANNEL As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "OlitaInsertCert"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property RECORD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECORD_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
         Public ReadOnly Property COMPANY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPANY_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DEALER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEALER_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CERT_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERT_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PRODUCT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CERT_DURATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERT_DURATION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MANUFACTURER_DURATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANUFACTURER_DURATION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WARRANTY_SALES_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARRANTY_SALES_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PRODUCT_SALES_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_SALES_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property WARRANTY_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARRANTY_PRICE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PRODUCT_RETAIL_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_RETAIL_PRICE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property INVOICE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BRANCH_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANCH_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SALES_REP_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_REP_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MAKEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SERIAL_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ITEM_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ITEM_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_DESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SALUTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALUTATION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_TAX_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_TAX_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_HOME_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_HOME_PHONE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_WORK_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_WORK_PHONE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_EMAIL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_ADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_ADDRESS1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_ADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_ADDRESS2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CITY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_STATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_STATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_ZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_ZIP
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CUSTOMER_COUNTRY_ISO_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_COUNTRY_ISO_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PURCHASE_COUNTRY_ISO_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPURCHASE_COUNTRY_ISO_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CURRENCY_ISO_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENCY_ISO_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PAYMENT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BILLING_FREQUENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBILLING_FREQUENCY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NUMBER_OF_INSTALLMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMBER_OF_INSTALLMENTS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property INSTALLMENT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSTALLMENT_AMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BANK_RTN_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_RTN_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BANK_ACCOUNT_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_ACCOUNT_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BANK_ACCT_OWNER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_ACCT_OWNER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MEMBERSHIP_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBERSHIP_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ADDITIONAL_CERT_QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDITIONAL_CERT_QUANTITY
            End Get
        End Property

        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        '  Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        'Public ReadOnly Property ADDITIONAL_CERT_NUMBERColumn() As Global.System.Data.DataColumn
        '    Get
        '        Return Me.columnADDITIONAL_CERT_NUMBER
        '    End Get
        'End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SKUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SUBSCRIBER_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBSCRIBER_STATUS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property POST_PRE_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOST_PRE_PAID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BILLING_PLANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBILLING_PLAN
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BILLING_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBILLING_CYCLE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MEMBERSHIP_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBERSHIP_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public ReadOnly Property MARKETING_PROMO_SERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMKT_PROMO_SER
            End Get
        End Property
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public ReadOnly Property MARKETING_PROMO_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMKT_PROMO_NUM
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public ReadOnly Property OlitaInsertCert_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaInsertCert_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public ReadOnly Property SALES_CHANNELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_CHANNEL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As OlitaInsertCertRow
            Get
                Return CType(Me.Rows(index), OlitaInsertCertRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event OlitaInsertCertRowChanging As OlitaInsertCertRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event OlitaInsertCertRowChanged As OlitaInsertCertRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event OlitaInsertCertRowDeleting As OlitaInsertCertRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event OlitaInsertCertRowDeleted As OlitaInsertCertRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddOlitaInsertCertRow(ByVal row As OlitaInsertCertRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Overloads Function AddOlitaInsertCertRow(
                    ByVal RECORD_TYPE As String,
                    ByVal COMPANY_CODE As String,
                    ByVal DEALER_CODE As String,
                    ByVal CERT_NUMBER As String,
                    ByVal PRODUCT_CODE As String,
                    ByVal CERT_DURATION As Integer,
                    ByVal MANUFACTURER_DURATION As Integer,
                    ByVal WARRANTY_SALES_DATE As Date,
                    ByVal PRODUCT_SALES_DATE As Date,
                    ByVal WARRANTY_PRICE As Decimal,
                    ByVal PRODUCT_RETAIL_PRICE As Decimal,
                    ByVal INVOICE_NUMBER As String,
                    ByVal BRANCH_CODE As String,
                    ByVal SALES_REP_NUMBER As String,
                    ByVal MAKE As String,
                    ByVal MODEL As String,
                    ByVal SERIAL_NUMBER As String,
                    ByVal ITEM_CODE As String,
                    ByVal ITEM_DESCRIPTION As String,
                    ByVal SALUTATION As String,
                    ByVal CUSTOMER_NAME As String,
                    ByVal CUSTOMER_TAX_ID As String,
                    ByVal CUSTOMER_HOME_PHONE As String,
                    ByVal CUSTOMER_WORK_PHONE As String,
                    ByVal CUSTOMER_EMAIL As String,
                    ByVal CUSTOMER_ADDRESS1 As String,
                    ByVal CUSTOMER_ADDRESS2 As String,
                    ByVal CUSTOMER_CITY As String,
                    ByVal CUSTOMER_STATE As String,
                    ByVal CUSTOMER_ZIP As String,
                    ByVal CUSTOMER_COUNTRY_ISO_CODE As String,
                    ByVal PURCHASE_COUNTRY_ISO_CODE As String,
                    ByVal CURRENCY_ISO_CODE As String,
                    ByVal PAYMENT_TYPE As String,
                    ByVal BILLING_FREQUENCY As Integer,
                    ByVal NUMBER_OF_INSTALLMENTS As Integer,
                    ByVal INSTALLMENT_AMOUNT As Decimal,
                    ByVal BANK_RTN_NUMBER As String,
                    ByVal BANK_ACCOUNT_NUMBER As String,
                    ByVal BANK_ACCT_OWNER_NAME As String,
                    ByVal MEMBERSHIP_NUMBER As String,
                    ByVal ADDITIONAL_CERT_QUANTITY As Integer,
                    ByVal SKU As String,
                    ByVal SUBSCRIBER_STATUS As String,
                    ByVal POST_PRE_PAID As String,
                    ByVal BILLING_PLAN As String,
                    ByVal BILLING_CYCLE As String,
                    ByVal MEMBERSHIP_TYPE As String,
                    ByVal MARKETING_PROMO_SER As String,
                    ByVal MARKETING_PROMO_NUM As String,
                    ByVal SALES_CHANNEL As String) As OlitaInsertCertRow
            Dim rowOlitaInsertCertRow As OlitaInsertCertRow = CType(Me.NewRow, OlitaInsertCertRow)
            Dim columnValuesArray() As Object = New Object() {RECORD_TYPE, COMPANY_CODE, DEALER_CODE, CERT_NUMBER, PRODUCT_CODE, CERT_DURATION, MANUFACTURER_DURATION, WARRANTY_SALES_DATE, PRODUCT_SALES_DATE, WARRANTY_PRICE, PRODUCT_RETAIL_PRICE, INVOICE_NUMBER, BRANCH_CODE, SALES_REP_NUMBER, MAKE, MODEL, SERIAL_NUMBER, ITEM_CODE, ITEM_DESCRIPTION, SALUTATION, CUSTOMER_NAME, CUSTOMER_TAX_ID, CUSTOMER_HOME_PHONE, CUSTOMER_WORK_PHONE, CUSTOMER_EMAIL, CUSTOMER_ADDRESS1, CUSTOMER_ADDRESS2, CUSTOMER_CITY, CUSTOMER_STATE, CUSTOMER_ZIP, CUSTOMER_COUNTRY_ISO_CODE, PURCHASE_COUNTRY_ISO_CODE, CURRENCY_ISO_CODE, PAYMENT_TYPE, BILLING_FREQUENCY, NUMBER_OF_INSTALLMENTS, INSTALLMENT_AMOUNT, BANK_RTN_NUMBER, BANK_ACCOUNT_NUMBER, BANK_ACCT_OWNER_NAME, MEMBERSHIP_NUMBER, ADDITIONAL_CERT_QUANTITY, Nothing, SKU, SUBSCRIBER_STATUS, POST_PRE_PAID, BILLING_PLAN, BILLING_CYCLE, MEMBERSHIP_TYPE, MARKETING_PROMO_SER, MARKETING_PROMO_NUM, SALES_CHANNEL}
            rowOlitaInsertCertRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOlitaInsertCertRow)
            Return rowOlitaInsertCertRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OlitaInsertCertDataTable = CType(MyBase.Clone, OlitaInsertCertDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OlitaInsertCertDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnRECORD_TYPE = MyBase.Columns("RECORD_TYPE")
            Me.columnCOMPANY_CODE = MyBase.Columns("COMPANY_CODE")
            Me.columnDEALER_CODE = MyBase.Columns("DEALER_CODE")
            Me.columnCERT_NUMBER = MyBase.Columns("CERT_NUMBER")
            Me.columnPRODUCT_CODE = MyBase.Columns("PRODUCT_CODE")
            Me.columnCERT_DURATION = MyBase.Columns("CERT_DURATION")
            Me.columnMANUFACTURER_DURATION = MyBase.Columns("MANUFACTURER_DURATION")
            Me.columnWARRANTY_SALES_DATE = MyBase.Columns("WARRANTY_SALES_DATE")
            Me.columnPRODUCT_SALES_DATE = MyBase.Columns("PRODUCT_SALES_DATE")
            Me.columnWARRANTY_PRICE = MyBase.Columns("WARRANTY_PRICE")
            Me.columnPRODUCT_RETAIL_PRICE = MyBase.Columns("PRODUCT_RETAIL_PRICE")
            Me.columnINVOICE_NUMBER = MyBase.Columns("INVOICE_NUMBER")
            Me.columnBRANCH_CODE = MyBase.Columns("BRANCH_CODE")
            Me.columnSALES_REP_NUMBER = MyBase.Columns("SALES_REP_NUMBER")
            Me.columnMAKE = MyBase.Columns("MAKE")
            Me.columnMODEL = MyBase.Columns("MODEL")
            Me.columnSERIAL_NUMBER = MyBase.Columns("SERIAL_NUMBER")
            Me.columnITEM_CODE = MyBase.Columns("ITEM_CODE")
            Me.columnITEM_DESCRIPTION = MyBase.Columns("ITEM_DESCRIPTION")
            Me.columnSALUTATION = MyBase.Columns("SALUTATION")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnCUSTOMER_TAX_ID = MyBase.Columns("CUSTOMER_TAX_ID")
            Me.columnCUSTOMER_HOME_PHONE = MyBase.Columns("CUSTOMER_HOME_PHONE")
            Me.columnCUSTOMER_WORK_PHONE = MyBase.Columns("CUSTOMER_WORK_PHONE")
            Me.columnCUSTOMER_EMAIL = MyBase.Columns("CUSTOMER_EMAIL")
            Me.columnCUSTOMER_ADDRESS1 = MyBase.Columns("CUSTOMER_ADDRESS1")
            Me.columnCUSTOMER_ADDRESS2 = MyBase.Columns("CUSTOMER_ADDRESS2")
            Me.columnCUSTOMER_CITY = MyBase.Columns("CUSTOMER_CITY")
            Me.columnCUSTOMER_STATE = MyBase.Columns("CUSTOMER_STATE")
            Me.columnCUSTOMER_ZIP = MyBase.Columns("CUSTOMER_ZIP")
            Me.columnCUSTOMER_COUNTRY_ISO_CODE = MyBase.Columns("CUSTOMER_COUNTRY_ISO_CODE")
            Me.columnPURCHASE_COUNTRY_ISO_CODE = MyBase.Columns("PURCHASE_COUNTRY_ISO_CODE")
            Me.columnCURRENCY_ISO_CODE = MyBase.Columns("CURRENCY_ISO_CODE")
            Me.columnPAYMENT_TYPE = MyBase.Columns("PAYMENT_TYPE")
            Me.columnBILLING_FREQUENCY = MyBase.Columns("BILLING_FREQUENCY")
            Me.columnNUMBER_OF_INSTALLMENTS = MyBase.Columns("NUMBER_OF_INSTALLMENTS")
            Me.columnINSTALLMENT_AMOUNT = MyBase.Columns("INSTALLMENT_AMOUNT")
            Me.columnBANK_RTN_NUMBER = MyBase.Columns("BANK_RTN_NUMBER")
            Me.columnBANK_ACCOUNT_NUMBER = MyBase.Columns("BANK_ACCOUNT_NUMBER")
            Me.columnBANK_ACCT_OWNER_NAME = MyBase.Columns("BANK_ACCT_OWNER_NAME")
            Me.columnMEMBERSHIP_NUMBER = MyBase.Columns("MEMBERSHIP_NUMBER")
            Me.columnADDITIONAL_CERT_QUANTITY = MyBase.Columns("ADDITIONAL_CERT_QUANTITY")
            'Me.columnADDITIONAL_CERT_NUMBER = MyBase.Columns("ADDITIONAL_CERT_NUMBER")
            Me.columnSKU = MyBase.Columns("SKU")
            Me.columnSUBSCRIBER_STATUS = MyBase.Columns("SUBSCRIBER_STATUS")
            Me.columnPOST_PRE_PAID = MyBase.Columns("POST_PRE_PAID")
            Me.columnBILLING_PLAN = MyBase.Columns("BILLING_PLAN")
            Me.columnBILLING_CYCLE = MyBase.Columns("BILLING_CYCLE")
            Me.columnMEMBERSHIP_TYPE = MyBase.Columns("MEMBERSHIP_TYPE")
            Me.columnMKT_PROMO_SER = MyBase.Columns("MARKETING_PROMO_SER")
            Me.columnMKT_PROMO_NUM = MyBase.Columns("MARKETING_PROMO_NUM")
            Me.columnSALES_CHANNEL = MyBase.Columns("SALES_CHANNEL")
            Me.columnOlitaInsertCert_Id = MyBase.Columns("OlitaInsertCert_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnRECORD_TYPE = New Global.System.Data.DataColumn("RECORD_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECORD_TYPE)
            Me.columnCOMPANY_CODE = New Global.System.Data.DataColumn("COMPANY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPANY_CODE)
            Me.columnDEALER_CODE = New Global.System.Data.DataColumn("DEALER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEALER_CODE)
            Me.columnCERT_NUMBER = New Global.System.Data.DataColumn("CERT_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERT_NUMBER)
            Me.columnPRODUCT_CODE = New Global.System.Data.DataColumn("PRODUCT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_CODE)
            Me.columnCERT_DURATION = New Global.System.Data.DataColumn("CERT_DURATION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERT_DURATION)
            Me.columnMANUFACTURER_DURATION = New Global.System.Data.DataColumn("MANUFACTURER_DURATION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANUFACTURER_DURATION)
            Me.columnWARRANTY_SALES_DATE = New Global.System.Data.DataColumn("WARRANTY_SALES_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARRANTY_SALES_DATE)
            Me.columnPRODUCT_SALES_DATE = New Global.System.Data.DataColumn("PRODUCT_SALES_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_SALES_DATE)
            Me.columnWARRANTY_PRICE = New Global.System.Data.DataColumn("WARRANTY_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARRANTY_PRICE)
            Me.columnPRODUCT_RETAIL_PRICE = New Global.System.Data.DataColumn("PRODUCT_RETAIL_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_RETAIL_PRICE)
            Me.columnINVOICE_NUMBER = New Global.System.Data.DataColumn("INVOICE_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NUMBER)
            Me.columnBRANCH_CODE = New Global.System.Data.DataColumn("BRANCH_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANCH_CODE)
            Me.columnSALES_REP_NUMBER = New Global.System.Data.DataColumn("SALES_REP_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_REP_NUMBER)
            Me.columnMAKE = New Global.System.Data.DataColumn("MAKE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKE)
            Me.columnMODEL = New Global.System.Data.DataColumn("MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL)
            Me.columnSERIAL_NUMBER = New Global.System.Data.DataColumn("SERIAL_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_NUMBER)
            Me.columnITEM_CODE = New Global.System.Data.DataColumn("ITEM_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CODE)
            Me.columnITEM_DESCRIPTION = New Global.System.Data.DataColumn("ITEM_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_DESCRIPTION)
            Me.columnSALUTATION = New Global.System.Data.DataColumn("SALUTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALUTATION)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnCUSTOMER_TAX_ID = New Global.System.Data.DataColumn("CUSTOMER_TAX_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_TAX_ID)
            Me.columnCUSTOMER_HOME_PHONE = New Global.System.Data.DataColumn("CUSTOMER_HOME_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_HOME_PHONE)
            Me.columnCUSTOMER_WORK_PHONE = New Global.System.Data.DataColumn("CUSTOMER_WORK_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_WORK_PHONE)
            Me.columnCUSTOMER_EMAIL = New Global.System.Data.DataColumn("CUSTOMER_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_EMAIL)
            Me.columnCUSTOMER_ADDRESS1 = New Global.System.Data.DataColumn("CUSTOMER_ADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_ADDRESS1)
            Me.columnCUSTOMER_ADDRESS2 = New Global.System.Data.DataColumn("CUSTOMER_ADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_ADDRESS2)
            Me.columnCUSTOMER_CITY = New Global.System.Data.DataColumn("CUSTOMER_CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CITY)
            Me.columnCUSTOMER_STATE = New Global.System.Data.DataColumn("CUSTOMER_STATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_STATE)
            Me.columnCUSTOMER_ZIP = New Global.System.Data.DataColumn("CUSTOMER_ZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_ZIP)
            Me.columnCUSTOMER_COUNTRY_ISO_CODE = New Global.System.Data.DataColumn("CUSTOMER_COUNTRY_ISO_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_COUNTRY_ISO_CODE)
            Me.columnPURCHASE_COUNTRY_ISO_CODE = New Global.System.Data.DataColumn("PURCHASE_COUNTRY_ISO_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPURCHASE_COUNTRY_ISO_CODE)
            Me.columnCURRENCY_ISO_CODE = New Global.System.Data.DataColumn("CURRENCY_ISO_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENCY_ISO_CODE)
            Me.columnPAYMENT_TYPE = New Global.System.Data.DataColumn("PAYMENT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_TYPE)
            Me.columnBILLING_FREQUENCY = New Global.System.Data.DataColumn("BILLING_FREQUENCY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBILLING_FREQUENCY)
            Me.columnNUMBER_OF_INSTALLMENTS = New Global.System.Data.DataColumn("NUMBER_OF_INSTALLMENTS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMBER_OF_INSTALLMENTS)
            Me.columnINSTALLMENT_AMOUNT = New Global.System.Data.DataColumn("INSTALLMENT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSTALLMENT_AMOUNT)
            Me.columnBANK_RTN_NUMBER = New Global.System.Data.DataColumn("BANK_RTN_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_RTN_NUMBER)
            Me.columnBANK_ACCOUNT_NUMBER = New Global.System.Data.DataColumn("BANK_ACCOUNT_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ACCOUNT_NUMBER)
            Me.columnBANK_ACCT_OWNER_NAME = New Global.System.Data.DataColumn("BANK_ACCT_OWNER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ACCT_OWNER_NAME)
            Me.columnMEMBERSHIP_NUMBER = New Global.System.Data.DataColumn("MEMBERSHIP_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBERSHIP_NUMBER)
            Me.columnADDITIONAL_CERT_QUANTITY = New Global.System.Data.DataColumn("ADDITIONAL_CERT_QUANTITY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDITIONAL_CERT_QUANTITY)
            'Me.columnADDITIONAL_CERT_NUMBER = New Global.System.Data.DataColumn("ADDITIONAL_CERT_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            'MyBase.Columns.Add(Me.columnADDITIONAL_CERT_NUMBER)
            Me.columnSKU = New Global.System.Data.DataColumn("SKU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU)
            Me.columnSUBSCRIBER_STATUS = New Global.System.Data.DataColumn("SUBSCRIBER_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBSCRIBER_STATUS)
            Me.columnPOST_PRE_PAID = New Global.System.Data.DataColumn("POST_PRE_PAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOST_PRE_PAID)
            Me.columnBILLING_PLAN = New Global.System.Data.DataColumn("BILLING_PLAN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBILLING_PLAN)
            Me.columnBILLING_CYCLE = New Global.System.Data.DataColumn("BILLING_CYCLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBILLING_CYCLE)
            Me.columnMEMBERSHIP_TYPE = New Global.System.Data.DataColumn("MEMBERSHIP_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBERSHIP_TYPE)
            Me.columnMKT_PROMO_SER = New Global.System.Data.DataColumn("MARKETING_PROMO_SER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMKT_PROMO_SER)
            Me.columnMKT_PROMO_NUM = New Global.System.Data.DataColumn("MARKETING_PROMO_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMKT_PROMO_NUM)
            Me.columnSALES_CHANNEL = New Global.System.Data.DataColumn("SALES_CHANNEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_CHANNEL)
            Me.columnOlitaInsertCert_Id = New Global.System.Data.DataColumn("OlitaInsertCert_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaInsertCert_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOlitaInsertCert_Id}, True))
            ' Me.columnRECORD_TYPE.AllowDBNull = False
            'Me.columnRECORD_TYPE.DefaultValue = CType("FC", String)
            Me.columnCOMPANY_CODE.AllowDBNull = False
            Me.columnDEALER_CODE.AllowDBNull = False
            Me.columnCERT_NUMBER.AllowDBNull = False
            Me.columnPRODUCT_CODE.AllowDBNull = False
            Me.columnCERT_DURATION.AllowDBNull = False
            Me.columnMANUFACTURER_DURATION.AllowDBNull = False
            Me.columnWARRANTY_SALES_DATE.AllowDBNull = False
            Me.columnPRODUCT_SALES_DATE.AllowDBNull = False
            Me.columnWARRANTY_PRICE.AllowDBNull = False
            Me.columnPRODUCT_RETAIL_PRICE.AllowDBNull = False
            Me.columnMEMBERSHIP_NUMBER.MaxLength = 30
            'Me.columnADDITIONAL_CERT_NUMBER.MaxLength = 20
            Me.columnOlitaInsertCert_Id.AutoIncrement = True
            Me.columnOlitaInsertCert_Id.AllowDBNull = False
            Me.columnOlitaInsertCert_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewOlitaInsertCertRow() As OlitaInsertCertRow
            Return CType(Me.NewRow, OlitaInsertCertRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OlitaInsertCertRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OlitaInsertCertRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OlitaInsertCertRowChangedEvent) Is Nothing) Then
                RaiseEvent OlitaInsertCertRowChanged(Me, New OlitaInsertCertRowChangeEvent(CType(e.Row, OlitaInsertCertRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OlitaInsertCertRowChangingEvent) Is Nothing) Then
                RaiseEvent OlitaInsertCertRowChanging(Me, New OlitaInsertCertRowChangeEvent(CType(e.Row, OlitaInsertCertRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OlitaInsertCertRowDeletedEvent) Is Nothing) Then
                RaiseEvent OlitaInsertCertRowDeleted(Me, New OlitaInsertCertRowChangeEvent(CType(e.Row, OlitaInsertCertRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OlitaInsertCertRowDeletingEvent) Is Nothing) Then
                RaiseEvent OlitaInsertCertRowDeleting(Me, New OlitaInsertCertRowChangeEvent(CType(e.Row, OlitaInsertCertRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveOlitaInsertCertRow(ByVal row As OlitaInsertCertRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OlitaInsertCertDs = New OlitaInsertCertDs()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OlitaInsertCertDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class BUNDLED_ITEMSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnMAKE As Global.System.Data.DataColumn

        Private columnMODEL As Global.System.Data.DataColumn

        Private columnSERIAL_NUMBER As Global.System.Data.DataColumn

        Private columnDESCRIPTION As Global.System.Data.DataColumn

        Private columnPRICE As Global.System.Data.DataColumn

        Private columnMFG_WARRANTY As Global.System.Data.DataColumn

        Private columnPRODUCT_CODE As Global.System.Data.DataColumn

        Private columnOlitaInsertCert_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "BUNDLED_ITEMS"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MAKEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property SERIAL_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property MFG_WARRANTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFG_WARRANTY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PRODUCT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property OlitaInsertCert_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaInsertCert_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As BUNDLED_ITEMSRow
            Get
                Return CType(Me.Rows(index), BUNDLED_ITEMSRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUNDLED_ITEMSRowChanging As BUNDLED_ITEMSRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUNDLED_ITEMSRowChanged As BUNDLED_ITEMSRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUNDLED_ITEMSRowDeleting As BUNDLED_ITEMSRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUNDLED_ITEMSRowDeleted As BUNDLED_ITEMSRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddBUNDLED_ITEMSRow(ByVal row As BUNDLED_ITEMSRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddBUNDLED_ITEMSRow(ByVal MAKE As String, ByVal MODEL As String, ByVal SERIAL_NUMBER As String, ByVal DESCRIPTION As String, ByVal PRICE As Decimal, ByVal MFG_WARRANTY As Integer, ByVal PRODUCT_CODE As String, ByVal parentOlitaInsertCertRowByOlitaInsertCert_BUNDLED_ITEMS As OlitaInsertCertRow) As BUNDLED_ITEMSRow
            Dim rowBUNDLED_ITEMSRow As BUNDLED_ITEMSRow = CType(Me.NewRow, BUNDLED_ITEMSRow)
            Dim columnValuesArray() As Object = New Object() {MAKE, MODEL, SERIAL_NUMBER, DESCRIPTION, PRICE, MFG_WARRANTY, PRODUCT_CODE, Nothing}
            If (Not (parentOlitaInsertCertRowByOlitaInsertCert_BUNDLED_ITEMS) Is Nothing) Then
                columnValuesArray(7) = parentOlitaInsertCertRowByOlitaInsertCert_BUNDLED_ITEMS(41)
            End If
            rowBUNDLED_ITEMSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBUNDLED_ITEMSRow)
            Return rowBUNDLED_ITEMSRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BUNDLED_ITEMSDataTable = CType(MyBase.Clone, BUNDLED_ITEMSDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BUNDLED_ITEMSDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnMAKE = MyBase.Columns("MAKE")
            Me.columnMODEL = MyBase.Columns("MODEL")
            Me.columnSERIAL_NUMBER = MyBase.Columns("SERIAL_NUMBER")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnPRICE = MyBase.Columns("PRICE")
            Me.columnMFG_WARRANTY = MyBase.Columns("MFG_WARRANTY")
            Me.columnPRODUCT_CODE = MyBase.Columns("PRODUCT_CODE")
            Me.columnOlitaInsertCert_Id = MyBase.Columns("OlitaInsertCert_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnMAKE = New Global.System.Data.DataColumn("MAKE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKE)
            Me.columnMODEL = New Global.System.Data.DataColumn("MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL)
            Me.columnSERIAL_NUMBER = New Global.System.Data.DataColumn("SERIAL_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_NUMBER)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnPRICE = New Global.System.Data.DataColumn("PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE)
            Me.columnMFG_WARRANTY = New Global.System.Data.DataColumn("MFG_WARRANTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFG_WARRANTY)
            Me.columnPRODUCT_CODE = New Global.System.Data.DataColumn("PRODUCT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_CODE)
            Me.columnOlitaInsertCert_Id = New Global.System.Data.DataColumn("OlitaInsertCert_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaInsertCert_Id)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewBUNDLED_ITEMSRow() As BUNDLED_ITEMSRow
            Return CType(Me.NewRow, BUNDLED_ITEMSRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BUNDLED_ITEMSRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BUNDLED_ITEMSRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BUNDLED_ITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent BUNDLED_ITEMSRowChanged(Me, New BUNDLED_ITEMSRowChangeEvent(CType(e.Row, BUNDLED_ITEMSRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BUNDLED_ITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent BUNDLED_ITEMSRowChanging(Me, New BUNDLED_ITEMSRowChangeEvent(CType(e.Row, BUNDLED_ITEMSRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BUNDLED_ITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent BUNDLED_ITEMSRowDeleted(Me, New BUNDLED_ITEMSRowChangeEvent(CType(e.Row, BUNDLED_ITEMSRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BUNDLED_ITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent BUNDLED_ITEMSRowDeleting(Me, New BUNDLED_ITEMSRowChangeEvent(CType(e.Row, BUNDLED_ITEMSRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveBUNDLED_ITEMSRow(ByVal row As BUNDLED_ITEMSRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OlitaInsertCertDs = New OlitaInsertCertDs()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BUNDLED_ITEMSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ADDITIONAL_CERT_NUMBERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnADDITIONAL_CERT_NUMBER_Column As Global.System.Data.DataColumn

        Private columnOlitaInsertCert_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ADDITIONAL_CERT_NUMBER"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ADDITIONAL_CERT_NUMBER_ColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDITIONAL_CERT_NUMBER_Column
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property OlitaInsertCert_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaInsertCert_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ADDITIONAL_CERT_NUMBERRow
            Get
                Return CType(Me.Rows(index), ADDITIONAL_CERT_NUMBERRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event ADDITIONAL_CERT_NUMBERRowChanging As ADDITIONAL_CERT_NUMBERRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event ADDITIONAL_CERT_NUMBERRowChanged As ADDITIONAL_CERT_NUMBERRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event ADDITIONAL_CERT_NUMBERRowDeleting As ADDITIONAL_CERT_NUMBERRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event ADDITIONAL_CERT_NUMBERRowDeleted As ADDITIONAL_CERT_NUMBERRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddADDITIONAL_CERT_NUMBERRow(ByVal row As ADDITIONAL_CERT_NUMBERRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddADDITIONAL_CERT_NUMBERRow(ByVal ADDITIONAL_CERT_NUMBER_Column As String, ByVal parentOlitaInsertCertRowByOlitaInsertCert_ADDITIONAL_CERT_NUMBER As OlitaInsertCertRow) As ADDITIONAL_CERT_NUMBERRow
            Dim rowADDITIONAL_CERT_NUMBERRow As ADDITIONAL_CERT_NUMBERRow = CType(Me.NewRow, ADDITIONAL_CERT_NUMBERRow)
            Dim columnValuesArray() As Object = New Object() {ADDITIONAL_CERT_NUMBER_Column, Nothing}
            If (Not (parentOlitaInsertCertRowByOlitaInsertCert_ADDITIONAL_CERT_NUMBER) Is Nothing) Then
                columnValuesArray(1) = parentOlitaInsertCertRowByOlitaInsertCert_ADDITIONAL_CERT_NUMBER(41)
            End If
            rowADDITIONAL_CERT_NUMBERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowADDITIONAL_CERT_NUMBERRow)
            Return rowADDITIONAL_CERT_NUMBERRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ADDITIONAL_CERT_NUMBERDataTable = CType(MyBase.Clone, ADDITIONAL_CERT_NUMBERDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ADDITIONAL_CERT_NUMBERDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnADDITIONAL_CERT_NUMBER_Column = MyBase.Columns("ADDITIONAL_CERT_NUMBER_Column")
            Me.columnOlitaInsertCert_Id = MyBase.Columns("OlitaInsertCert_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnADDITIONAL_CERT_NUMBER_Column = New Global.System.Data.DataColumn("ADDITIONAL_CERT_NUMBER_Column", GetType(String), Nothing, Global.System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnADDITIONAL_CERT_NUMBER_Column)
            Me.columnOlitaInsertCert_Id = New Global.System.Data.DataColumn("OlitaInsertCert_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaInsertCert_Id)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewADDITIONAL_CERT_NUMBERRow() As ADDITIONAL_CERT_NUMBERRow
            Return CType(Me.NewRow, ADDITIONAL_CERT_NUMBERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ADDITIONAL_CERT_NUMBERRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ADDITIONAL_CERT_NUMBERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ADDITIONAL_CERT_NUMBERRowChangedEvent) Is Nothing) Then
                RaiseEvent ADDITIONAL_CERT_NUMBERRowChanged(Me, New ADDITIONAL_CERT_NUMBERRowChangeEvent(CType(e.Row, ADDITIONAL_CERT_NUMBERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ADDITIONAL_CERT_NUMBERRowChangingEvent) Is Nothing) Then
                RaiseEvent ADDITIONAL_CERT_NUMBERRowChanging(Me, New ADDITIONAL_CERT_NUMBERRowChangeEvent(CType(e.Row, ADDITIONAL_CERT_NUMBERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ADDITIONAL_CERT_NUMBERRowDeletedEvent) Is Nothing) Then
                RaiseEvent ADDITIONAL_CERT_NUMBERRowDeleted(Me, New ADDITIONAL_CERT_NUMBERRowChangeEvent(CType(e.Row, ADDITIONAL_CERT_NUMBERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ADDITIONAL_CERT_NUMBERRowDeletingEvent) Is Nothing) Then
                RaiseEvent ADDITIONAL_CERT_NUMBERRowDeleting(Me, New ADDITIONAL_CERT_NUMBERRowChangeEvent(CType(e.Row, ADDITIONAL_CERT_NUMBERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveADDITIONAL_CERT_NUMBERRow(ByVal row As ADDITIONAL_CERT_NUMBERRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OlitaInsertCertDs = New OlitaInsertCertDs()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ADDITIONAL_CERT_NUMBERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TESTTESTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTESTTEST_Column As Global.System.Data.DataColumn

        Private columnOlitaInsertCert_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TESTTEST"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TESTTEST_ColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTESTTEST_Column
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property OlitaInsertCert_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlitaInsertCert_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TESTTESTRow
            Get
                Return CType(Me.Rows(index), TESTTESTRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event TESTTESTRowChanging As TESTTESTRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event TESTTESTRowChanged As TESTTESTRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event TESTTESTRowDeleting As TESTTESTRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event TESTTESTRowDeleted As TESTTESTRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddTESTTESTRow(ByVal row As TESTTESTRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddTESTTESTRow(ByVal TESTTEST_Column As String, ByVal parentOlitaInsertCertRowByOlitaInsertCert_TESTTEST As OlitaInsertCertRow) As TESTTESTRow
            Dim rowTESTTESTRow As TESTTESTRow = CType(Me.NewRow, TESTTESTRow)
            Dim columnValuesArray() As Object = New Object() {TESTTEST_Column, Nothing}
            If (Not (parentOlitaInsertCertRowByOlitaInsertCert_TESTTEST) Is Nothing) Then
                columnValuesArray(1) = parentOlitaInsertCertRowByOlitaInsertCert_TESTTEST(41)
            End If
            rowTESTTESTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTESTTESTRow)
            Return rowTESTTESTRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TESTTESTDataTable = CType(MyBase.Clone, TESTTESTDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TESTTESTDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnTESTTEST_Column = MyBase.Columns("TESTTEST_Column")
            Me.columnOlitaInsertCert_Id = MyBase.Columns("OlitaInsertCert_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnTESTTEST_Column = New Global.System.Data.DataColumn("TESTTEST_Column", GetType(String), Nothing, Global.System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnTESTTEST_Column)
            Me.columnOlitaInsertCert_Id = New Global.System.Data.DataColumn("OlitaInsertCert_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnOlitaInsertCert_Id)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewTESTTESTRow() As TESTTESTRow
            Return CType(Me.NewRow, TESTTESTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TESTTESTRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TESTTESTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TESTTESTRowChangedEvent) Is Nothing) Then
                RaiseEvent TESTTESTRowChanged(Me, New TESTTESTRowChangeEvent(CType(e.Row, TESTTESTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TESTTESTRowChangingEvent) Is Nothing) Then
                RaiseEvent TESTTESTRowChanging(Me, New TESTTESTRowChangeEvent(CType(e.Row, TESTTESTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TESTTESTRowDeletedEvent) Is Nothing) Then
                RaiseEvent TESTTESTRowDeleted(Me, New TESTTESTRowChangeEvent(CType(e.Row, TESTTESTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TESTTESTRowDeletingEvent) Is Nothing) Then
                RaiseEvent TESTTESTRowDeleting(Me, New TESTTESTRowChangeEvent(CType(e.Row, TESTTESTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveTESTTESTRow(ByVal row As TESTTESTRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OlitaInsertCertDs = New OlitaInsertCertDs()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TESTTESTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OlitaInsertCertRow
        Inherits Global.System.Data.DataRow

        Private tableOlitaInsertCert As OlitaInsertCertDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOlitaInsertCert = CType(Me.Table, OlitaInsertCertDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property RECORD_TYPE() As String
            Get
                Return CType(Me(Me.tableOlitaInsertCert.RECORD_TYPEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableOlitaInsertCert.RECORD_TYPEColumn) = value
            End Set
        End Property


        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property COMPANY_CODE() As String
            Get
                Return CType(Me(Me.tableOlitaInsertCert.COMPANY_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.COMPANY_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DEALER_CODE() As String
            Get
                Return CType(Me(Me.tableOlitaInsertCert.DEALER_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.DEALER_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CERT_NUMBER() As String
            Get
                Return CType(Me(Me.tableOlitaInsertCert.CERT_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CERT_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PRODUCT_CODE() As String
            Get
                Return CType(Me(Me.tableOlitaInsertCert.PRODUCT_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.PRODUCT_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CERT_DURATION() As Integer
            Get
                 Return CType(Me(Me.tableOlitaInsertCert.CERT_DURATIONColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.CERT_DURATIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MANUFACTURER_DURATION() As Integer
            Get
                Return CType(Me(Me.tableOlitaInsertCert.MANUFACTURER_DURATIONColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.MANUFACTURER_DURATIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WARRANTY_SALES_DATE() As Date
            Get
                Return CType(Me(Me.tableOlitaInsertCert.WARRANTY_SALES_DATEColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableOlitaInsertCert.WARRANTY_SALES_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PRODUCT_SALES_DATE() As Date
            Get
                Return CType(Me(Me.tableOlitaInsertCert.PRODUCT_SALES_DATEColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableOlitaInsertCert.PRODUCT_SALES_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property WARRANTY_PRICE() As Decimal
            Get
                Return CType(Me(Me.tableOlitaInsertCert.WARRANTY_PRICEColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableOlitaInsertCert.WARRANTY_PRICEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PRODUCT_RETAIL_PRICE() As Decimal
            Get
                Return CType(Me(Me.tableOlitaInsertCert.PRODUCT_RETAIL_PRICEColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableOlitaInsertCert.PRODUCT_RETAIL_PRICEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property INVOICE_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.INVOICE_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.INVOICE_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BRANCH_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BRANCH_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANCH_CODE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BRANCH_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SALES_REP_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SALES_REP_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALES_REP_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SALES_REP_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MAKE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MAKEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MAKEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MODEL() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MODELColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MODELColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SERIAL_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SERIAL_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SERIAL_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ITEM_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.ITEM_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_CODE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.ITEM_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ITEM_DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.ITEM_DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_DESCRIPTION' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.ITEM_DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SALUTATION() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SALUTATIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALUTATION' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SALUTATIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_NAME' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_TAX_ID() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_TAX_IDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_TAX_ID' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_TAX_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_HOME_PHONE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_HOME_PHONEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_HOME_PHONE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_HOME_PHONEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_WORK_PHONE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_WORK_PHONEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_WORK_PHONE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_WORK_PHONEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_EMAIL() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_EMAILColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_EMAIL' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_EMAILColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_ADDRESS1() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS1Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_ADDRESS1' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_ADDRESS2() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_ADDRESS2' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_CITY() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_CITYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_CITY' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_CITYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_STATE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_STATEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_STATE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_STATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_ZIP() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_ZIPColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_ZIP' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_ZIPColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CUSTOMER_COUNTRY_ISO_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CUSTOMER_COUNTRY_ISO_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_COUNTRY_ISO_CODE' in table 'OlitaInsertCert' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CUSTOMER_COUNTRY_ISO_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PURCHASE_COUNTRY_ISO_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.PURCHASE_COUNTRY_ISO_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PURCHASE_COUNTRY_ISO_CODE' in table 'OlitaInsertCert' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.PURCHASE_COUNTRY_ISO_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property CURRENCY_ISO_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.CURRENCY_ISO_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENCY_ISO_CODE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.CURRENCY_ISO_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PAYMENT_TYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.PAYMENT_TYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_TYPE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.PAYMENT_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BILLING_FREQUENCY() As Integer
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BILLING_FREQUENCYColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BILLING_FREQUENCY' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.BILLING_FREQUENCYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property NUMBER_OF_INSTALLMENTS() As Integer
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.NUMBER_OF_INSTALLMENTSColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMBER_OF_INSTALLMENTS' in table 'OlitaInsertCert' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.NUMBER_OF_INSTALLMENTSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property INSTALLMENT_AMOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.INSTALLMENT_AMOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INSTALLMENT_AMOUNT' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableOlitaInsertCert.INSTALLMENT_AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BANK_RTN_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BANK_RTN_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_RTN_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BANK_RTN_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BANK_ACCOUNT_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BANK_ACCOUNT_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_ACCOUNT_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BANK_ACCOUNT_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BANK_ACCT_OWNER_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BANK_ACCT_OWNER_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_ACCT_OWNER_NAME' in table 'OlitaInsertCert' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BANK_ACCT_OWNER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MEMBERSHIP_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MEMBERSHIP_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBERSHIP_NUMBER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MEMBERSHIP_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ADDITIONAL_CERT_QUANTITY() As Integer
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_QUANTITYColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDITIONAL_CERT_QUANTITY' in table 'OlitaInsertCert' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_QUANTITYColumn) = value
            End Set
        End Property
        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        ' Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        'Public Property ADDITIONAL_CERT_NUMBER() As String
        '    Get
        '        Try
        '            Return CType(Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_NUMBERColumn), String)
        '        Catch e As Global.System.InvalidCastException
        '            Throw New Global.System.Data.StrongTypingException("The value for column 'ADDITIONAL_CERT_NUMBER' in table 'OlitaInsertCert' is DBNul" & _
        '                    "l.", e)
        '        End Try
        '    End Get
        '    Set(ByVal value As String)
        '        Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_NUMBERColumn) = value
        '    End Set
        'End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SKU() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SKUColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKU' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SKUColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SUBSCRIBER_STATUS() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SUBSCRIBER_STATUSColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBSCRIBER_STATUS' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SUBSCRIBER_STATUSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property POST_PRE_PAID() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.POST_PRE_PAIDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POST_PRE_PAID' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.POST_PRE_PAIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BILLING_PLAN() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BILLING_PLANColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BILLING_PLAN' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BILLING_PLANColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BILLING_CYCLE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.BILLING_CYCLEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BILLING_CYCLE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.BILLING_CYCLEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MEMBERSHIP_TYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MEMBERSHIP_TYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBERSHIP_TYPE' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MEMBERSHIP_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Property MARKETING_PROMO_SER() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MARKETING_PROMO_SERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MARKETING_PROMO_SER' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MARKETING_PROMO_SERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Property MARKETING_PROMO_NUM() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.MARKETING_PROMO_NUMColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MARKETING_PROMO_NUM' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.MARKETING_PROMO_NUMColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Property SALES_CHANNEL() As String
            Get
                Try
                    Return CType(Me(Me.tableOlitaInsertCert.SALES_CHANNELColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALES_CHANNEL' in table 'OlitaInsertCert' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableOlitaInsertCert.SALES_CHANNELColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCert_Id() As Integer
            Get
                Return CType(Me(Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableOlitaInsertCert.OlitaInsertCert_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCERT_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CERT_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCERT_NUMBERNull()
            Me(Me.tableOlitaInsertCert.CERT_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsRECORD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.RECORD_TYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetRECORD_TYPENull()
            Me(Me.tableOlitaInsertCert.RECORD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsINVOICE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.INVOICE_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetINVOICE_NUMBERNull()
            Me(Me.tableOlitaInsertCert.INVOICE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBRANCH_CODENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BRANCH_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBRANCH_CODENull()
            Me(Me.tableOlitaInsertCert.BRANCH_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSALES_REP_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SALES_REP_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSALES_REP_NUMBERNull()
            Me(Me.tableOlitaInsertCert.SALES_REP_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMAKENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MAKEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMAKENull()
            Me(Me.tableOlitaInsertCert.MAKEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMODELNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MODELColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMODELNull()
            Me(Me.tableOlitaInsertCert.MODELColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSERIAL_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SERIAL_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSERIAL_NUMBERNull()
            Me(Me.tableOlitaInsertCert.SERIAL_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsITEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.ITEM_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetITEM_CODENull()
            Me(Me.tableOlitaInsertCert.ITEM_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsITEM_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.ITEM_DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetITEM_DESCRIPTIONNull()
            Me(Me.tableOlitaInsertCert.ITEM_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSALUTATIONNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SALUTATIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSALUTATIONNull()
            Me(Me.tableOlitaInsertCert.SALUTATIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_NAMENull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_TAX_IDNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_TAX_IDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_TAX_IDNull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_TAX_IDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_HOME_PHONENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_HOME_PHONEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_HOME_PHONENull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_HOME_PHONEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_WORK_PHONENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_WORK_PHONEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_WORK_PHONENull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_WORK_PHONEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_EMAILColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_EMAILNull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_EMAILColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_ADDRESS1Null() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_ADDRESS1Null()
            Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_ADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_ADDRESS2Null()
            Me(Me.tableOlitaInsertCert.CUSTOMER_ADDRESS2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_CITYNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_CITYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_CITYNull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_CITYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_STATENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_STATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_STATENull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_STATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_ZIPNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_ZIPColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_ZIPNull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_ZIPColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCUSTOMER_COUNTRY_ISO_CODENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CUSTOMER_COUNTRY_ISO_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCUSTOMER_COUNTRY_ISO_CODENull()
            Me(Me.tableOlitaInsertCert.CUSTOMER_COUNTRY_ISO_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPURCHASE_COUNTRY_ISO_CODENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.PURCHASE_COUNTRY_ISO_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPURCHASE_COUNTRY_ISO_CODENull()
            Me(Me.tableOlitaInsertCert.PURCHASE_COUNTRY_ISO_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCURRENCY_ISO_CODENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.CURRENCY_ISO_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCURRENCY_ISO_CODENull()
            Me(Me.tableOlitaInsertCert.CURRENCY_ISO_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPAYMENT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.PAYMENT_TYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPAYMENT_TYPENull()
            Me(Me.tableOlitaInsertCert.PAYMENT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBILLING_FREQUENCYNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BILLING_FREQUENCYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBILLING_FREQUENCYNull()
            Me(Me.tableOlitaInsertCert.BILLING_FREQUENCYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsNUMBER_OF_INSTALLMENTSNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.NUMBER_OF_INSTALLMENTSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetNUMBER_OF_INSTALLMENTSNull()
            Me(Me.tableOlitaInsertCert.NUMBER_OF_INSTALLMENTSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsINSTALLMENT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.INSTALLMENT_AMOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetINSTALLMENT_AMOUNTNull()
            Me(Me.tableOlitaInsertCert.INSTALLMENT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBANK_RTN_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BANK_RTN_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBANK_RTN_NUMBERNull()
            Me(Me.tableOlitaInsertCert.BANK_RTN_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBANK_ACCOUNT_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BANK_ACCOUNT_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBANK_ACCOUNT_NUMBERNull()
            Me(Me.tableOlitaInsertCert.BANK_ACCOUNT_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBANK_ACCT_OWNER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BANK_ACCT_OWNER_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBANK_ACCT_OWNER_NAMENull()
            Me(Me.tableOlitaInsertCert.BANK_ACCT_OWNER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMEMBERSHIP_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MEMBERSHIP_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMEMBERSHIP_NUMBERNull()
            Me(Me.tableOlitaInsertCert.MEMBERSHIP_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsADDITIONAL_CERT_QUANTITYNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.ADDITIONAL_CERT_QUANTITYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetADDITIONAL_CERT_QUANTITYNull()
            Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_QUANTITYColumn) = Global.System.Convert.DBNull
        End Sub
        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        ' Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        'Public Function IsADDITIONAL_CERT_NUMBERNull() As Boolean
        '    Return Me.IsNull(Me.tableOlitaInsertCert.ADDITIONAL_CERT_NUMBERColumn)
        'End Function

        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        ' Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        'Public Sub SetADDITIONAL_CERT_NUMBERNull()
        '    Me(Me.tableOlitaInsertCert.ADDITIONAL_CERT_NUMBERColumn) = Global.System.Convert.DBNull
        'End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSKUNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SKUColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSKUNull()
            Me(Me.tableOlitaInsertCert.SKUColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSUBSCRIBER_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SUBSCRIBER_STATUSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSUBSCRIBER_STATUSNull()
            Me(Me.tableOlitaInsertCert.SUBSCRIBER_STATUSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPOST_PRE_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.POST_PRE_PAIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPOST_PRE_PAIDNull()
            Me(Me.tableOlitaInsertCert.POST_PRE_PAIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBILLING_PLANNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BILLING_PLANColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBILLING_PLANNull()
            Me(Me.tableOlitaInsertCert.BILLING_PLANColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBILLING_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.BILLING_CYCLEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBILLING_CYCLENull()
            Me(Me.tableOlitaInsertCert.BILLING_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMEMBERSHIP_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MEMBERSHIP_TYPEColumn)
        End Function
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Function IsMARKETING_PROMO_SERNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MARKETING_PROMO_SERColumn)
        End Function
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Function IsMARKETING_PROMO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.MARKETING_PROMO_NUMColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
        Public Function IsSALES_CHANNELNull() As Boolean
            Return Me.IsNull(Me.tableOlitaInsertCert.SALES_CHANNELColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMEMBERSHIP_TYPENull()
            Me(Me.tableOlitaInsertCert.MEMBERSHIP_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function GetBUNDLED_ITEMSRows() As BUNDLED_ITEMSRow()
            If (Me.Table.ChildRelations("OlitaInsertCert_BUNDLED_ITEMS") Is Nothing) Then
                Return New BUNDLED_ITEMSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("OlitaInsertCert_BUNDLED_ITEMS")), BUNDLED_ITEMSRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function GetADDITIONAL_CERT_NUMBERRows() As ADDITIONAL_CERT_NUMBERRow()
            If (Me.Table.ChildRelations("OlitaInsertCert_ADDITIONAL_CERT_NUMBER") Is Nothing) Then
                Return New ADDITIONAL_CERT_NUMBERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("OlitaInsertCert_ADDITIONAL_CERT_NUMBER")), ADDITIONAL_CERT_NUMBERRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function GetTESTTESTRows() As TESTTESTRow()
            If (Me.Table.ChildRelations("OlitaInsertCert_TESTTEST") Is Nothing) Then
                Return New TESTTESTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("OlitaInsertCert_TESTTEST")), TESTTESTRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BUNDLED_ITEMSRow
        Inherits Global.System.Data.DataRow

        Private tableBUNDLED_ITEMS As BUNDLED_ITEMSDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBUNDLED_ITEMS = CType(Me.Table, BUNDLED_ITEMSDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MAKE() As String
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.MAKEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKE' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableBUNDLED_ITEMS.MAKEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MODEL() As String
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.MODELColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableBUNDLED_ITEMS.MODELColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property SERIAL_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.SERIAL_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_NUMBER' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableBUNDLED_ITEMS.SERIAL_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableBUNDLED_ITEMS.DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PRICE() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.PRICEColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableBUNDLED_ITEMS.PRICEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property MFG_WARRANTY() As Integer
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.MFG_WARRANTYColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MFG_WARRANTY' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableBUNDLED_ITEMS.MFG_WARRANTYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PRODUCT_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.PRODUCT_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCT_CODE' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableBUNDLED_ITEMS.PRODUCT_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCert_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlitaInsertCert_Id' in table 'BUNDLED_ITEMS' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCertRow() As OlitaInsertCertRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("OlitaInsertCert_BUNDLED_ITEMS")), OlitaInsertCertRow)
            End Get
            Set(ByVal value As OlitaInsertCertRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("OlitaInsertCert_BUNDLED_ITEMS"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMAKENull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.MAKEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMAKENull()
            Me(Me.tableBUNDLED_ITEMS.MAKEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMODELNull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.MODELColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMODELNull()
            Me(Me.tableBUNDLED_ITEMS.MODELColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsSERIAL_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.SERIAL_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetSERIAL_NUMBERNull()
            Me(Me.tableBUNDLED_ITEMS.SERIAL_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableBUNDLED_ITEMS.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPRICENull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.PRICEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPRICENull()
            Me(Me.tableBUNDLED_ITEMS.PRICEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsMFG_WARRANTYNull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.MFG_WARRANTYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetMFG_WARRANTYNull()
            Me(Me.tableBUNDLED_ITEMS.MFG_WARRANTYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPRODUCT_CODENull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.PRODUCT_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPRODUCT_CODENull()
            Me(Me.tableBUNDLED_ITEMS.PRODUCT_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsOlitaInsertCert_IdNull() As Boolean
            Return Me.IsNull(Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetOlitaInsertCert_IdNull()
            Me(Me.tableBUNDLED_ITEMS.OlitaInsertCert_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ADDITIONAL_CERT_NUMBERRow
        Inherits Global.System.Data.DataRow

        Private tableADDITIONAL_CERT_NUMBER As ADDITIONAL_CERT_NUMBERDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableADDITIONAL_CERT_NUMBER = CType(Me.Table, ADDITIONAL_CERT_NUMBERDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ADDITIONAL_CERT_NUMBER_Column() As String
            Get
                Try
                    Return CType(Me(Me.tableADDITIONAL_CERT_NUMBER.ADDITIONAL_CERT_NUMBER_ColumnColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDITIONAL_CERT_NUMBER_Column' in table 'ADDITIONAL_CERT_NU" & _
                            "MBER' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableADDITIONAL_CERT_NUMBER.ADDITIONAL_CERT_NUMBER_ColumnColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCert_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlitaInsertCert_Id' in table 'ADDITIONAL_CERT_NUMBER' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCertRow() As OlitaInsertCertRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("OlitaInsertCert_ADDITIONAL_CERT_NUMBER")), OlitaInsertCertRow)
            End Get
            Set(ByVal value As OlitaInsertCertRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("OlitaInsertCert_ADDITIONAL_CERT_NUMBER"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsADDITIONAL_CERT_NUMBER_ColumnNull() As Boolean
            Return Me.IsNull(Me.tableADDITIONAL_CERT_NUMBER.ADDITIONAL_CERT_NUMBER_ColumnColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetADDITIONAL_CERT_NUMBER_ColumnNull()
            Me(Me.tableADDITIONAL_CERT_NUMBER.ADDITIONAL_CERT_NUMBER_ColumnColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsOlitaInsertCert_IdNull() As Boolean
            Return Me.IsNull(Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetOlitaInsertCert_IdNull()
            Me(Me.tableADDITIONAL_CERT_NUMBER.OlitaInsertCert_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TESTTESTRow
        Inherits Global.System.Data.DataRow

        Private tableTESTTEST As TESTTESTDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTESTTEST = CType(Me.Table, TESTTESTDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property TESTTEST_Column() As String
            Get
                Try
                    Return CType(Me(Me.tableTESTTEST.TESTTEST_ColumnColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TESTTEST_Column' in table 'TESTTEST' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTESTTEST.TESTTEST_ColumnColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCert_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTESTTEST.OlitaInsertCert_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OlitaInsertCert_Id' in table 'TESTTEST' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTESTTEST.OlitaInsertCert_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property OlitaInsertCertRow() As OlitaInsertCertRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("OlitaInsertCert_TESTTEST")), OlitaInsertCertRow)
            End Get
            Set(ByVal value As OlitaInsertCertRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("OlitaInsertCert_TESTTEST"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTESTTEST_ColumnNull() As Boolean
            Return Me.IsNull(Me.tableTESTTEST.TESTTEST_ColumnColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTESTTEST_ColumnNull()
            Me(Me.tableTESTTEST.TESTTEST_ColumnColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsOlitaInsertCert_IdNull() As Boolean
            Return Me.IsNull(Me.tableTESTTEST.OlitaInsertCert_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetOlitaInsertCert_IdNull()
            Me(Me.tableTESTTEST.OlitaInsertCert_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class OlitaInsertCertRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As OlitaInsertCertRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As OlitaInsertCertRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As OlitaInsertCertRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class BUNDLED_ITEMSRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As BUNDLED_ITEMSRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As BUNDLED_ITEMSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As BUNDLED_ITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class ADDITIONAL_CERT_NUMBERRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As ADDITIONAL_CERT_NUMBERRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As ADDITIONAL_CERT_NUMBERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As ADDITIONAL_CERT_NUMBERRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class TESTTESTRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TESTTESTRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As TESTTESTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As TESTTESTRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
