'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On 

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

'
'This source code was auto-generated by xsd, Version=1.1.4322.2032.
'

<Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.Diagnostics.DebuggerStepThrough(), _
 System.ComponentModel.ToolboxItem(True)> _
Public Class InterfaceModelDs
    Inherits DataSet

    Private tableInterfaceModel As InterfaceModelDataTable

    Public Sub New()
        MyBase.New()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New()
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("InterfaceModel")) Is Nothing) Then
                Me.Tables.Add(New InterfaceModelDataTable(ds.Tables("InterfaceModel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.InitClass()
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property InterfaceModel() As InterfaceModelDataTable
        Get
            Return Me.tableInterfaceModel
        End Get
    End Property

    Public Overrides Function Clone() As DataSet
        Dim cln As InterfaceModelDs = CType(MyBase.Clone, InterfaceModelDs)
        cln.InitVars()
        Return cln
    End Function

    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset()
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("InterfaceModel")) Is Nothing) Then
            Me.Tables.Add(New InterfaceModelDataTable(ds.Tables("InterfaceModel")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
        Me.InitVars()
    End Sub

    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function

    Friend Sub InitVars()
        Me.tableInterfaceModel = CType(Me.Tables("InterfaceModel"), InterfaceModelDataTable)
        If (Not (Me.tableInterfaceModel) Is Nothing) Then
            Me.tableInterfaceModel.InitVars()
        End If
    End Sub

    Private Sub InitClass()
        Me.DataSetName = "InterfaceModelDs"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InterfaceModel.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = False
        Me.EnforceConstraints = True
        Me.tableInterfaceModel = New InterfaceModelDataTable
        Me.Tables.Add(Me.tableInterfaceModel)
    End Sub

    Private Function ShouldSerializeInterfaceModel() As Boolean
        Return False
    End Function

    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    Public Delegate Sub InterfaceModelRowChangeEventHandler(ByVal sender As Object, ByVal e As InterfaceModelRowChangeEvent)

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class InterfaceModelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable

        Private columnMake As DataColumn

        Private columnModel As DataColumn

        Private columnVersion_Engine As DataColumn

        Private columnModel_Year As DataColumn

        Private columnNew_Class_Code As DataColumn

        Private columnUsed_Class_Code As DataColumn

        Private columnCar_Code As DataColumn

        Private columnActive_New As DataColumn

        Private columnActive_Used As DataColumn

        Friend Sub New()
            MyBase.New("InterfaceModel")
            Me.InitClass()
        End Sub

        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub

        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        Friend ReadOnly Property MakeColumn() As DataColumn
            Get
                Return Me.columnMake
            End Get
        End Property

        Friend ReadOnly Property ModelColumn() As DataColumn
            Get
                Return Me.columnModel
            End Get
        End Property

        Friend ReadOnly Property Version_EngineColumn() As DataColumn
            Get
                Return Me.columnVersion_Engine
            End Get
        End Property

        Friend ReadOnly Property Model_YearColumn() As DataColumn
            Get
                Return Me.columnModel_Year
            End Get
        End Property

        Friend ReadOnly Property New_Class_CodeColumn() As DataColumn
            Get
                Return Me.columnNew_Class_Code
            End Get
        End Property

        Friend ReadOnly Property Used_Class_CodeColumn() As DataColumn
            Get
                Return Me.columnUsed_Class_Code
            End Get
        End Property

        Friend ReadOnly Property Car_CodeColumn() As DataColumn
            Get
                Return Me.columnCar_Code
            End Get
        End Property

        Friend ReadOnly Property Active_NewColumn() As DataColumn
            Get
                Return Me.columnActive_New
            End Get
        End Property

        Friend ReadOnly Property Active_UsedColumn() As DataColumn
            Get
                Return Me.columnActive_Used
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As InterfaceModelRow
            Get
                Return CType(Me.Rows(index), InterfaceModelRow)
            End Get
        End Property

        Public Event InterfaceModelRowChanged As InterfaceModelRowChangeEventHandler

        Public Event InterfaceModelRowChanging As InterfaceModelRowChangeEventHandler

        Public Event InterfaceModelRowDeleted As InterfaceModelRowChangeEventHandler

        Public Event InterfaceModelRowDeleting As InterfaceModelRowChangeEventHandler

        Public Overloads Sub AddInterfaceModelRow(ByVal row As InterfaceModelRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddInterfaceModelRow(ByVal Make As String, ByVal Model As String, ByVal Version_Engine As String, ByVal Model_Year As Integer, ByVal New_Class_Code As String, ByVal Used_Class_Code As String, ByVal Car_Code As Long, ByVal Active_New As String, ByVal Active_Used As String) As InterfaceModelRow
            Dim rowInterfaceModelRow As InterfaceModelRow = CType(Me.NewRow, InterfaceModelRow)
            rowInterfaceModelRow.ItemArray = New Object() {Make, Model, Version_Engine, Model_Year, New_Class_Code, Used_Class_Code, Car_Code, Active_New, Active_Used}
            Me.Rows.Add(rowInterfaceModelRow)
            Return rowInterfaceModelRow
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As InterfaceModelDataTable = CType(MyBase.Clone, InterfaceModelDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New InterfaceModelDataTable
        End Function

        Friend Sub InitVars()
            Me.columnMake = Me.Columns("Make")
            Me.columnModel = Me.Columns("Model")
            Me.columnVersion_Engine = Me.Columns("Version_Engine")
            Me.columnModel_Year = Me.Columns("Model_Year")
            Me.columnNew_Class_Code = Me.Columns("New_Class_Code")
            Me.columnUsed_Class_Code = Me.Columns("Used_Class_Code")
            Me.columnCar_Code = Me.Columns("Car_Code")
            Me.columnActive_New = Me.Columns("Active_New")
            Me.columnActive_Used = Me.Columns("Active_Used")
        End Sub

        Private Sub InitClass()
            Me.columnMake = New DataColumn("Make", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMake)
            Me.columnModel = New DataColumn("Model", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModel)
            Me.columnVersion_Engine = New DataColumn("Version_Engine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersion_Engine)
            Me.columnModel_Year = New DataColumn("Model_Year", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModel_Year)
            Me.columnNew_Class_Code = New DataColumn("New_Class_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNew_Class_Code)
            Me.columnUsed_Class_Code = New DataColumn("Used_Class_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsed_Class_Code)
            Me.columnCar_Code = New DataColumn("Car_Code", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCar_Code)
            Me.columnActive_New = New DataColumn("Active_New", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActive_New)
            Me.columnActive_Used = New DataColumn("Active_Used", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActive_Used)
            Me.columnMake.AllowDBNull = False
            Me.columnModel.AllowDBNull = False
            Me.columnVersion_Engine.AllowDBNull = False
            Me.columnModel_Year.AllowDBNull = False
            Me.columnNew_Class_Code.AllowDBNull = False
            Me.columnUsed_Class_Code.AllowDBNull = False
            Me.columnCar_Code.AllowDBNull = False
            Me.columnActive_New.AllowDBNull = False
            Me.columnActive_Used.AllowDBNull = False
        End Sub

        Public Function NewInterfaceModelRow() As InterfaceModelRow
            Return CType(Me.NewRow, InterfaceModelRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InterfaceModelRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InterfaceModelRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InterfaceModelRowChangedEvent) Is Nothing) Then
                RaiseEvent InterfaceModelRowChanged(Me, New InterfaceModelRowChangeEvent(CType(e.Row, InterfaceModelRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InterfaceModelRowChangingEvent) Is Nothing) Then
                RaiseEvent InterfaceModelRowChanging(Me, New InterfaceModelRowChangeEvent(CType(e.Row, InterfaceModelRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InterfaceModelRowDeletedEvent) Is Nothing) Then
                RaiseEvent InterfaceModelRowDeleted(Me, New InterfaceModelRowChangeEvent(CType(e.Row, InterfaceModelRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InterfaceModelRowDeletingEvent) Is Nothing) Then
                RaiseEvent InterfaceModelRowDeleting(Me, New InterfaceModelRowChangeEvent(CType(e.Row, InterfaceModelRow), e.Action))
            End If
        End Sub

        Public Sub RemoveInterfaceModelRow(ByVal row As InterfaceModelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class InterfaceModelRow
        Inherits DataRow

        Private tableInterfaceModel As InterfaceModelDataTable

        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInterfaceModel = CType(Me.Table, InterfaceModelDataTable)
        End Sub

        Public Property Make() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.MakeColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.MakeColumn) = value
            End Set
        End Property

        Public Property Model() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.ModelColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.ModelColumn) = value
            End Set
        End Property

        Public Property Version_Engine() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.Version_EngineColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.Version_EngineColumn) = value
            End Set
        End Property

        Public Property Model_Year() As Integer
            Get
                Return CType(Me(Me.tableInterfaceModel.Model_YearColumn), Integer)
            End Get
            Set(ByVal Value As Integer)
                Me(Me.tableInterfaceModel.Model_YearColumn) = value
            End Set
        End Property

        Public Property New_Class_Code() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.New_Class_CodeColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.New_Class_CodeColumn) = value
            End Set
        End Property

        Public Property Used_Class_Code() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.Used_Class_CodeColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.Used_Class_CodeColumn) = value
            End Set
        End Property

        Public Property Car_Code() As Long
            Get
                Return CType(Me(Me.tableInterfaceModel.Car_CodeColumn), Long)
            End Get
            Set(ByVal Value As Long)
                Me(Me.tableInterfaceModel.Car_CodeColumn) = value
            End Set
        End Property

        Public Property Active_New() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.Active_NewColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.Active_NewColumn) = value
            End Set
        End Property

        Public Property Active_Used() As String
            Get
                Return CType(Me(Me.tableInterfaceModel.Active_UsedColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableInterfaceModel.Active_UsedColumn) = value
            End Set
        End Property
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class InterfaceModelRowChangeEvent
        Inherits EventArgs

        Private eventRow As InterfaceModelRow

        Private eventAction As DataRowAction

        Public Sub New(ByVal row As InterfaceModelRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        Public ReadOnly Property Row() As InterfaceModelRow
            Get
                Return Me.eventRow
            End Get
        End Property

        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
