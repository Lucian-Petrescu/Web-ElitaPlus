'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

'
'This source code was auto-generated by xsd, Version=1.1.4322.2032.
'

<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class InterfaceCoverageRateDs
    Inherits DataSet
    
    Private tableInterfaceCoverageRate As InterfaceCoverageRateDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("InterfaceCoverageRate")) Is Nothing) Then
                Me.Tables.Add(New InterfaceCoverageRateDataTable(ds.Tables("InterfaceCoverageRate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InterfaceCoverageRate As InterfaceCoverageRateDataTable
        Get
            Return Me.tableInterfaceCoverageRate
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As InterfaceCoverageRateDs = CType(MyBase.Clone,InterfaceCoverageRateDs)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("InterfaceCoverageRate")) Is Nothing) Then
            Me.Tables.Add(New InterfaceCoverageRateDataTable(ds.Tables("InterfaceCoverageRate")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInterfaceCoverageRate = CType(Me.Tables("InterfaceCoverageRate"),InterfaceCoverageRateDataTable)
        If (Not (Me.tableInterfaceCoverageRate) Is Nothing) Then
            Me.tableInterfaceCoverageRate.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "InterfaceCoverageRateDs"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InterfaceCoverageRate.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInterfaceCoverageRate = New InterfaceCoverageRateDataTable
        Me.Tables.Add(Me.tableInterfaceCoverageRate)
    End Sub
    
    Private Function ShouldSerializeInterfaceCoverageRate() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub InterfaceCoverageRateRowChangeEventHandler(ByVal sender As Object, ByVal e As InterfaceCoverageRateRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InterfaceCoverageRateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncompany_group_code As DataColumn
        
        Private columndealer_code As DataColumn
        
        Private columndealer_group_code As DataColumn
        
        Private columndeductible_type As DataColumn
        
        Private columndeductible As DataColumn
        
        Private columnreduced_deductible As DataColumn
        
        Private columnplan_code As DataColumn
        
        Private columnplan_name As DataColumn
        
        Private columnplan_term_months As DataColumn
        
        Private column_plan_term_KM_MI As DataColumn
        
        Private column_KM_MI_from As DataColumn
        
        Private column_KM_MI_to As DataColumn
        
        Private columnengine_manuf_Warr_months As DataColumn
        
        Private column_engine_manuf_Warr_KM_MI As DataColumn
        
        Private columnclass_code As DataColumn
        
        Private columngwp As DataColumn
        
        Private columnwp As DataColumn
        
        Private columncommission_percent As DataColumn
        
        Private columnmarketing_percent As DataColumn
        
        Private columnadmin_expense As DataColumn
        
        Private columnprofit_percent As DataColumn
        
        Private columnloss_cost_percent As DataColumn
        
        Private columnTaxes_Percent As DataColumn
        
        Friend Sub New()
            MyBase.New("InterfaceCoverageRate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property company_group_codeColumn As DataColumn
            Get
                Return Me.columncompany_group_code
            End Get
        End Property
        
        Friend ReadOnly Property dealer_codeColumn As DataColumn
            Get
                Return Me.columndealer_code
            End Get
        End Property
        
        Friend ReadOnly Property dealer_group_codeColumn As DataColumn
            Get
                Return Me.columndealer_group_code
            End Get
        End Property
        
        Friend ReadOnly Property deductible_typeColumn As DataColumn
            Get
                Return Me.columndeductible_type
            End Get
        End Property
        
        Friend ReadOnly Property deductibleColumn As DataColumn
            Get
                Return Me.columndeductible
            End Get
        End Property
        
        Friend ReadOnly Property reduced_deductibleColumn As DataColumn
            Get
                Return Me.columnreduced_deductible
            End Get
        End Property
        
        Friend ReadOnly Property plan_codeColumn As DataColumn
            Get
                Return Me.columnplan_code
            End Get
        End Property
        
        Friend ReadOnly Property plan_nameColumn As DataColumn
            Get
                Return Me.columnplan_name
            End Get
        End Property
        
        Friend ReadOnly Property plan_term_monthsColumn As DataColumn
            Get
                Return Me.columnplan_term_months
            End Get
        End Property
        
        Friend ReadOnly Property _plan_term_KM_MIColumn As DataColumn
            Get
                Return Me.column_plan_term_KM_MI
            End Get
        End Property
        
        Friend ReadOnly Property _KM_MI_fromColumn As DataColumn
            Get
                Return Me.column_KM_MI_from
            End Get
        End Property
        
        Friend ReadOnly Property _KM_MI_toColumn As DataColumn
            Get
                Return Me.column_KM_MI_to
            End Get
        End Property
        
        Friend ReadOnly Property engine_manuf_Warr_monthsColumn As DataColumn
            Get
                Return Me.columnengine_manuf_Warr_months
            End Get
        End Property
        
        Friend ReadOnly Property _engine_manuf_Warr_KM_MIColumn As DataColumn
            Get
                Return Me.column_engine_manuf_Warr_KM_MI
            End Get
        End Property
        
        Friend ReadOnly Property class_codeColumn As DataColumn
            Get
                Return Me.columnclass_code
            End Get
        End Property
        
        Friend ReadOnly Property gwpColumn As DataColumn
            Get
                Return Me.columngwp
            End Get
        End Property
        
        Friend ReadOnly Property wpColumn As DataColumn
            Get
                Return Me.columnwp
            End Get
        End Property
        
        Friend ReadOnly Property commission_percentColumn As DataColumn
            Get
                Return Me.columncommission_percent
            End Get
        End Property
        
        Friend ReadOnly Property marketing_percentColumn As DataColumn
            Get
                Return Me.columnmarketing_percent
            End Get
        End Property
        
        Friend ReadOnly Property admin_expenseColumn As DataColumn
            Get
                Return Me.columnadmin_expense
            End Get
        End Property
        
        Friend ReadOnly Property profit_percentColumn As DataColumn
            Get
                Return Me.columnprofit_percent
            End Get
        End Property
        
        Friend ReadOnly Property loss_cost_percentColumn As DataColumn
            Get
                Return Me.columnloss_cost_percent
            End Get
        End Property
        
        Friend ReadOnly Property Taxes_PercentColumn As DataColumn
            Get
                Return Me.columnTaxes_Percent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InterfaceCoverageRateRow
            Get
                Return CType(Me.Rows(index),InterfaceCoverageRateRow)
            End Get
        End Property
        
        Public Event InterfaceCoverageRateRowChanged As InterfaceCoverageRateRowChangeEventHandler
        
        Public Event InterfaceCoverageRateRowChanging As InterfaceCoverageRateRowChangeEventHandler
        
        Public Event InterfaceCoverageRateRowDeleted As InterfaceCoverageRateRowChangeEventHandler
        
        Public Event InterfaceCoverageRateRowDeleting As InterfaceCoverageRateRowChangeEventHandler
        
        Public Overloads Sub AddInterfaceCoverageRateRow(ByVal row As InterfaceCoverageRateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInterfaceCoverageRateRow( _
                    ByVal company_group_code As String,  _
                    ByVal dealer_code As String,  _
                    ByVal dealer_group_code As String,  _
                    ByVal deductible_type As String,  _
                    ByVal deductible As Decimal,  _
                    ByVal reduced_deductible As Decimal,  _
                    ByVal plan_code As String,  _
                    ByVal plan_name As String,  _
                    ByVal plan_term_months As System.UInt64,  _
                    ByVal _plan_term_KM_MI As System.UInt64,  _
                    ByVal _KM_MI_from As System.UInt64,  _
                    ByVal _KM_MI_to As System.UInt64,  _
                    ByVal engine_manuf_Warr_months As System.UInt64,  _
                    ByVal _engine_manuf_Warr_KM_MI As System.UInt64,  _
                    ByVal class_code As String,  _
                    ByVal gwp As Decimal,  _
                    ByVal wp As Decimal,  _
                    ByVal commission_percent As Decimal,  _
                    ByVal marketing_percent As Decimal,  _
                    ByVal admin_expense As Decimal,  _
                    ByVal profit_percent As Decimal,  _
                    ByVal loss_cost_percent As Decimal,  _
                    ByVal Taxes_Percent As Decimal) As InterfaceCoverageRateRow
            Dim rowInterfaceCoverageRateRow As InterfaceCoverageRateRow = CType(Me.NewRow,InterfaceCoverageRateRow)
            rowInterfaceCoverageRateRow.ItemArray = New Object() {company_group_code, dealer_code, dealer_group_code, deductible_type, deductible, reduced_deductible, plan_code, plan_name, plan_term_months, _plan_term_KM_MI, _KM_MI_from, _KM_MI_to, engine_manuf_Warr_months, _engine_manuf_Warr_KM_MI, class_code, gwp, wp, commission_percent, marketing_percent, admin_expense, profit_percent, loss_cost_percent, Taxes_Percent}
            Me.Rows.Add(rowInterfaceCoverageRateRow)
            Return rowInterfaceCoverageRateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InterfaceCoverageRateDataTable = CType(MyBase.Clone,InterfaceCoverageRateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InterfaceCoverageRateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncompany_group_code = Me.Columns("company_group_code")
            Me.columndealer_code = Me.Columns("dealer_code")
            Me.columndealer_group_code = Me.Columns("dealer_group_code")
            Me.columndeductible_type = Me.Columns("deductible_type")
            Me.columndeductible = Me.Columns("deductible")
            Me.columnreduced_deductible = Me.Columns("reduced_deductible")
            Me.columnplan_code = Me.Columns("plan_code")
            Me.columnplan_name = Me.Columns("plan_name")
            Me.columnplan_term_months = Me.Columns("plan_term_months")
            Me.column_plan_term_KM_MI = Me.Columns("plan_term_KM-MI")
            Me.column_KM_MI_from = Me.Columns("KM-MI_from")
            Me.column_KM_MI_to = Me.Columns("KM-MI_to")
            Me.columnengine_manuf_Warr_months = Me.Columns("engine_manuf_Warr_months")
            Me.column_engine_manuf_Warr_KM_MI = Me.Columns("engine_manuf_Warr_KM-MI")
            Me.columnclass_code = Me.Columns("class_code")
            Me.columngwp = Me.Columns("gwp")
            Me.columnwp = Me.Columns("wp")
            Me.columncommission_percent = Me.Columns("commission_percent")
            Me.columnmarketing_percent = Me.Columns("marketing_percent")
            Me.columnadmin_expense = Me.Columns("admin_expense")
            Me.columnprofit_percent = Me.Columns("profit_percent")
            Me.columnloss_cost_percent = Me.Columns("loss_cost_percent")
            Me.columnTaxes_Percent = Me.Columns("Taxes_Percent")
        End Sub
        
        Private Sub InitClass()
            Me.columncompany_group_code = New DataColumn("company_group_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncompany_group_code)
            Me.columndealer_code = New DataColumn("dealer_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndealer_code)
            Me.columndealer_group_code = New DataColumn("dealer_group_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndealer_group_code)
            Me.columndeductible_type = New DataColumn("deductible_type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeductible_type)
            Me.columndeductible = New DataColumn("deductible", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeductible)
            Me.columnreduced_deductible = New DataColumn("reduced_deductible", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreduced_deductible)
            Me.columnplan_code = New DataColumn("plan_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnplan_code)
            Me.columnplan_name = New DataColumn("plan_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnplan_name)
            Me.columnplan_term_months = New DataColumn("plan_term_months", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnplan_term_months)
            Me.column_plan_term_KM_MI = New DataColumn("plan_term_KM-MI", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_plan_term_KM_MI)
            Me.column_KM_MI_from = New DataColumn("KM-MI_from", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_KM_MI_from)
            Me.column_KM_MI_to = New DataColumn("KM-MI_to", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_KM_MI_to)
            Me.columnengine_manuf_Warr_months = New DataColumn("engine_manuf_Warr_months", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnengine_manuf_Warr_months)
            Me.column_engine_manuf_Warr_KM_MI = New DataColumn("engine_manuf_Warr_KM-MI", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_engine_manuf_Warr_KM_MI)
            Me.columnclass_code = New DataColumn("class_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclass_code)
            Me.columngwp = New DataColumn("gwp", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngwp)
            Me.columnwp = New DataColumn("wp", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwp)
            Me.columncommission_percent = New DataColumn("commission_percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncommission_percent)
            Me.columnmarketing_percent = New DataColumn("marketing_percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmarketing_percent)
            Me.columnadmin_expense = New DataColumn("admin_expense", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadmin_expense)
            Me.columnprofit_percent = New DataColumn("profit_percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprofit_percent)
            Me.columnloss_cost_percent = New DataColumn("loss_cost_percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloss_cost_percent)
            Me.columnTaxes_Percent = New DataColumn("Taxes_Percent", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxes_Percent)
            Me.columncompany_group_code.AllowDBNull = false
            Me.columndealer_code.AllowDBNull = false
            Me.columndealer_group_code.AllowDBNull = false
            Me.columndeductible_type.AllowDBNull = false
            Me.columndeductible.AllowDBNull = false
            Me.columnreduced_deductible.AllowDBNull = false
            Me.columnplan_code.AllowDBNull = false
            Me.columnplan_name.AllowDBNull = false
            Me.columnplan_term_months.AllowDBNull = false
            Me.column_plan_term_KM_MI.AllowDBNull = false
            Me.column_KM_MI_from.AllowDBNull = false
            Me.column_KM_MI_to.AllowDBNull = false
            Me.columnengine_manuf_Warr_months.AllowDBNull = false
            Me.column_engine_manuf_Warr_KM_MI.AllowDBNull = false
            Me.columnclass_code.AllowDBNull = false
            Me.columngwp.AllowDBNull = false
            Me.columnwp.AllowDBNull = false
            Me.columncommission_percent.AllowDBNull = false
            Me.columnmarketing_percent.AllowDBNull = false
            Me.columnprofit_percent.AllowDBNull = false
            Me.columnloss_cost_percent.AllowDBNull = false
            Me.columnTaxes_Percent.AllowDBNull = false
        End Sub
        
        Public Function NewInterfaceCoverageRateRow() As InterfaceCoverageRateRow
            Return CType(Me.NewRow,InterfaceCoverageRateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InterfaceCoverageRateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InterfaceCoverageRateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InterfaceCoverageRateRowChangedEvent) Is Nothing) Then
                RaiseEvent InterfaceCoverageRateRowChanged(Me, New InterfaceCoverageRateRowChangeEvent(CType(e.Row,InterfaceCoverageRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InterfaceCoverageRateRowChangingEvent) Is Nothing) Then
                RaiseEvent InterfaceCoverageRateRowChanging(Me, New InterfaceCoverageRateRowChangeEvent(CType(e.Row,InterfaceCoverageRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InterfaceCoverageRateRowDeletedEvent) Is Nothing) Then
                RaiseEvent InterfaceCoverageRateRowDeleted(Me, New InterfaceCoverageRateRowChangeEvent(CType(e.Row,InterfaceCoverageRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InterfaceCoverageRateRowDeletingEvent) Is Nothing) Then
                RaiseEvent InterfaceCoverageRateRowDeleting(Me, New InterfaceCoverageRateRowChangeEvent(CType(e.Row,InterfaceCoverageRateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInterfaceCoverageRateRow(ByVal row As InterfaceCoverageRateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InterfaceCoverageRateRow
        Inherits DataRow
        
        Private tableInterfaceCoverageRate As InterfaceCoverageRateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInterfaceCoverageRate = CType(Me.Table,InterfaceCoverageRateDataTable)
        End Sub
        
        Public Property company_group_code As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.company_group_codeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.company_group_codeColumn) = value
            End Set
        End Property
        
        Public Property dealer_code As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.dealer_codeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.dealer_codeColumn) = value
            End Set
        End Property
        
        Public Property dealer_group_code As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.dealer_group_codeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.dealer_group_codeColumn) = value
            End Set
        End Property
        
        Public Property deductible_type As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.deductible_typeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.deductible_typeColumn) = value
            End Set
        End Property
        
        Public Property deductible As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.deductibleColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.deductibleColumn) = value
            End Set
        End Property
        
        Public Property reduced_deductible As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.reduced_deductibleColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.reduced_deductibleColumn) = value
            End Set
        End Property
        
        Public Property plan_code As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.plan_codeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.plan_codeColumn) = value
            End Set
        End Property
        
        Public Property plan_name As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.plan_nameColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.plan_nameColumn) = value
            End Set
        End Property
        
        Public Property plan_term_months As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.plan_term_monthsColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.plan_term_monthsColumn) = value
            End Set
        End Property
        
        Public Property _plan_term_KM_MI As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate._plan_term_KM_MIColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate._plan_term_KM_MIColumn) = value
            End Set
        End Property
        
        Public Property _KM_MI_from As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate._KM_MI_fromColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate._KM_MI_fromColumn) = value
            End Set
        End Property
        
        Public Property _KM_MI_to As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate._KM_MI_toColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate._KM_MI_toColumn) = value
            End Set
        End Property
        
        Public Property engine_manuf_Warr_months As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.engine_manuf_Warr_monthsColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.engine_manuf_Warr_monthsColumn) = value
            End Set
        End Property
        
        Public Property _engine_manuf_Warr_KM_MI As System.UInt64
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate._engine_manuf_Warr_KM_MIColumn),System.UInt64)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate._engine_manuf_Warr_KM_MIColumn) = value
            End Set
        End Property
        
        Public Property class_code As String
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.class_codeColumn),String)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.class_codeColumn) = value
            End Set
        End Property
        
        Public Property gwp As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.gwpColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.gwpColumn) = value
            End Set
        End Property
        
        Public Property wp As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.wpColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.wpColumn) = value
            End Set
        End Property
        
        Public Property commission_percent As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.commission_percentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.commission_percentColumn) = value
            End Set
        End Property
        
        Public Property marketing_percent As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.marketing_percentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.marketing_percentColumn) = value
            End Set
        End Property
        
        Public Property admin_expense As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInterfaceCoverageRate.admin_expenseColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.admin_expenseColumn) = value
            End Set
        End Property
        
        Public Property profit_percent As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.profit_percentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.profit_percentColumn) = value
            End Set
        End Property
        
        Public Property loss_cost_percent As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.loss_cost_percentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.loss_cost_percentColumn) = value
            End Set
        End Property
        
        Public Property Taxes_Percent As Decimal
            Get
                Return CType(Me(Me.tableInterfaceCoverageRate.Taxes_PercentColumn),Decimal)
            End Get
            Set
                Me(Me.tableInterfaceCoverageRate.Taxes_PercentColumn) = value
            End Set
        End Property
        
        Public Function Isadmin_expenseNull() As Boolean
            Return Me.IsNull(Me.tableInterfaceCoverageRate.admin_expenseColumn)
        End Function
        
        Public Sub Setadmin_expenseNull()
            Me(Me.tableInterfaceCoverageRate.admin_expenseColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InterfaceCoverageRateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InterfaceCoverageRateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InterfaceCoverageRateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InterfaceCoverageRateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
