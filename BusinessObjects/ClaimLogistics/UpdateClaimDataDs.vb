'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.3038.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("UpdateClaimDataDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class UpdateClaimDataDs
    Inherits Global.System.Data.DataSet

    Private tableUpdateClaimData As UpdateClaimDataDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UpdateClaimData")) Is Nothing) Then
                MyBase.Tables.Add(New UpdateClaimDataDataTable(ds.Tables("UpdateClaimData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property UpdateClaimData() As UpdateClaimDataDataTable
        Get
            Return Me.tableUpdateClaimData
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As UpdateClaimDataDs = CType(MyBase.Clone, UpdateClaimDataDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UpdateClaimData")) Is Nothing) Then
                MyBase.Tables.Add(New UpdateClaimDataDataTable(ds.Tables("UpdateClaimData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUpdateClaimData = CType(MyBase.Tables("UpdateClaimData"), UpdateClaimDataDataTable)
        If (initTable = True) Then
            If (Not (Me.tableUpdateClaimData) Is Nothing) Then
                Me.tableUpdateClaimData.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "UpdateClaimDataDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUpdateClaimData = New UpdateClaimDataDataTable
        MyBase.Tables.Add(Me.tableUpdateClaimData)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeUpdateClaimData() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As UpdateClaimDataDs = New UpdateClaimDataDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub UpdateClaimDataRowChangeEventHandler(ByVal sender As Object, ByVal e As UpdateClaimDataRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class UpdateClaimDataDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnCERT_ITEM_COVERAGE_CODE As Global.System.Data.DataColumn

        Private columnCLAIM_STATUS As Global.System.Data.DataColumn

        Private columnSERVICE_CENTER_CODE As Global.System.Data.DataColumn

        Private columnREASON_CLOSED_CODE As Global.System.Data.DataColumn

        Private columnPROBLEM_DESCRIPTION As Global.System.Data.DataColumn

        Private columnSPECIAL_INSTRUCTION As Global.System.Data.DataColumn

        Private columnVISIT_DATE As Global.System.Data.DataColumn

        Private columnSTATUS_COMMENTS As Global.System.Data.DataColumn

        Private columnAMOUNT As Global.System.Data.DataColumn

        Private columnCLAIM_COMMENTS As Global.System.Data.DataColumn

        Private columnEXTERNAL_USER_NAME As Global.System.Data.DataColumn

        Private columnSPECIAL_SERVICE_CODE As Global.System.Data.DataColumn

        Private columnSPECIAL_SERVICE_ONLY_CODE As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "UpdateClaimData"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CERT_ITEM_COVERAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERT_ITEM_COVERAGE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_STATUS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SERVICE_CENTER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERVICE_CENTER_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property REASON_CLOSED_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREASON_CLOSED_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROBLEM_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROBLEM_DESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPECIAL_INSTRUCTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIAL_INSTRUCTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VISIT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVISIT_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property STATUS_COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_COMMENTS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_COMMENTS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EXTERNAL_USER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNAL_USER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPECIAL_SERVICE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIAL_SERVICE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPECIAL_SERVICE_ONLY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIAL_SERVICE_ONLY_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As UpdateClaimDataRow
            Get
                Return CType(Me.Rows(index), UpdateClaimDataRow)
            End Get
        End Property

        Public Event UpdateClaimDataRowChanging As UpdateClaimDataRowChangeEventHandler

        Public Event UpdateClaimDataRowChanged As UpdateClaimDataRowChangeEventHandler

        Public Event UpdateClaimDataRowDeleting As UpdateClaimDataRowChangeEventHandler

        Public Event UpdateClaimDataRowDeleted As UpdateClaimDataRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddUpdateClaimDataRow(ByVal row As UpdateClaimDataRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddUpdateClaimDataRow(ByVal CLAIM_NUMBER As String, ByVal CERT_ITEM_COVERAGE_CODE As String, ByVal CLAIM_STATUS As String, ByVal SERVICE_CENTER_CODE As String, ByVal REASON_CLOSED_CODE As String, ByVal PROBLEM_DESCRIPTION As String, ByVal SPECIAL_INSTRUCTION As String, ByVal VISIT_DATE As Date, ByVal STATUS_COMMENTS As String, ByVal AMOUNT As Decimal, ByVal CLAIM_COMMENTS As String, ByVal EXTERNAL_USER_NAME As String, ByVal SPECIAL_SERVICE_CODE As String, ByVal SPECIAL_SERVICE_ONLY_CODE As String) As UpdateClaimDataRow
            Dim rowUpdateClaimDataRow As UpdateClaimDataRow = CType(Me.NewRow, UpdateClaimDataRow)
            Dim columnValuesArray() As Object = New Object() {CLAIM_NUMBER, CERT_ITEM_COVERAGE_CODE, CLAIM_STATUS, SERVICE_CENTER_CODE, REASON_CLOSED_CODE, PROBLEM_DESCRIPTION, SPECIAL_INSTRUCTION, VISIT_DATE, STATUS_COMMENTS, AMOUNT, CLAIM_COMMENTS, EXTERNAL_USER_NAME, SPECIAL_SERVICE_CODE, SPECIAL_SERVICE_ONLY_CODE}
            rowUpdateClaimDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUpdateClaimDataRow)
            Return rowUpdateClaimDataRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UpdateClaimDataDataTable = CType(MyBase.Clone, UpdateClaimDataDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UpdateClaimDataDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnCERT_ITEM_COVERAGE_CODE = MyBase.Columns("CERT_ITEM_COVERAGE_CODE")
            Me.columnCLAIM_STATUS = MyBase.Columns("CLAIM_STATUS")
            Me.columnSERVICE_CENTER_CODE = MyBase.Columns("SERVICE_CENTER_CODE")
            Me.columnREASON_CLOSED_CODE = MyBase.Columns("REASON_CLOSED_CODE")
            Me.columnPROBLEM_DESCRIPTION = MyBase.Columns("PROBLEM_DESCRIPTION")
            Me.columnSPECIAL_INSTRUCTION = MyBase.Columns("SPECIAL_INSTRUCTION")
            Me.columnVISIT_DATE = MyBase.Columns("VISIT_DATE")
            Me.columnSTATUS_COMMENTS = MyBase.Columns("STATUS_COMMENTS")
            Me.columnAMOUNT = MyBase.Columns("AMOUNT")
            Me.columnCLAIM_COMMENTS = MyBase.Columns("CLAIM_COMMENTS")
            Me.columnEXTERNAL_USER_NAME = MyBase.Columns("EXTERNAL_USER_NAME")
            Me.columnSPECIAL_SERVICE_CODE = MyBase.Columns("SPECIAL_SERVICE_CODE")
            Me.columnSPECIAL_SERVICE_ONLY_CODE = MyBase.Columns("SPECIAL_SERVICE_ONLY_CODE")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnCERT_ITEM_COVERAGE_CODE = New Global.System.Data.DataColumn("CERT_ITEM_COVERAGE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERT_ITEM_COVERAGE_CODE)
            Me.columnCLAIM_STATUS = New Global.System.Data.DataColumn("CLAIM_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_STATUS)
            Me.columnSERVICE_CENTER_CODE = New Global.System.Data.DataColumn("SERVICE_CENTER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERVICE_CENTER_CODE)
            Me.columnREASON_CLOSED_CODE = New Global.System.Data.DataColumn("REASON_CLOSED_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREASON_CLOSED_CODE)
            Me.columnPROBLEM_DESCRIPTION = New Global.System.Data.DataColumn("PROBLEM_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROBLEM_DESCRIPTION)
            Me.columnSPECIAL_INSTRUCTION = New Global.System.Data.DataColumn("SPECIAL_INSTRUCTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIAL_INSTRUCTION)
            Me.columnVISIT_DATE = New Global.System.Data.DataColumn("VISIT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVISIT_DATE)
            Me.columnSTATUS_COMMENTS = New Global.System.Data.DataColumn("STATUS_COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_COMMENTS)
            Me.columnAMOUNT = New Global.System.Data.DataColumn("AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMOUNT)
            Me.columnCLAIM_COMMENTS = New Global.System.Data.DataColumn("CLAIM_COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_COMMENTS)
            Me.columnEXTERNAL_USER_NAME = New Global.System.Data.DataColumn("EXTERNAL_USER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNAL_USER_NAME)
            Me.columnSPECIAL_SERVICE_CODE = New Global.System.Data.DataColumn("SPECIAL_SERVICE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIAL_SERVICE_CODE)
            Me.columnSPECIAL_SERVICE_ONLY_CODE = New Global.System.Data.DataColumn("SPECIAL_SERVICE_ONLY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIAL_SERVICE_ONLY_CODE)
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnCERT_ITEM_COVERAGE_CODE.AllowDBNull = False
            Me.columnCLAIM_STATUS.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewUpdateClaimDataRow() As UpdateClaimDataRow
            Return CType(Me.NewRow, UpdateClaimDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UpdateClaimDataRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UpdateClaimDataRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UpdateClaimDataRowChangedEvent) Is Nothing) Then
                RaiseEvent UpdateClaimDataRowChanged(Me, New UpdateClaimDataRowChangeEvent(CType(e.Row, UpdateClaimDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UpdateClaimDataRowChangingEvent) Is Nothing) Then
                RaiseEvent UpdateClaimDataRowChanging(Me, New UpdateClaimDataRowChangeEvent(CType(e.Row, UpdateClaimDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UpdateClaimDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent UpdateClaimDataRowDeleted(Me, New UpdateClaimDataRowChangeEvent(CType(e.Row, UpdateClaimDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UpdateClaimDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent UpdateClaimDataRowDeleting(Me, New UpdateClaimDataRowChangeEvent(CType(e.Row, UpdateClaimDataRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveUpdateClaimDataRow(ByVal row As UpdateClaimDataRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As UpdateClaimDataDs = New UpdateClaimDataDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UpdateClaimDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class UpdateClaimDataRow
        Inherits Global.System.Data.DataRow

        Private tableUpdateClaimData As UpdateClaimDataDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUpdateClaimData = CType(Me.Table, UpdateClaimDataDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tableUpdateClaimData.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CERT_ITEM_COVERAGE_CODE() As String
            Get
                Return CType(Me(Me.tableUpdateClaimData.CERT_ITEM_COVERAGE_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.CERT_ITEM_COVERAGE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_STATUS() As String
            Get
                Return CType(Me(Me.tableUpdateClaimData.CLAIM_STATUSColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.CLAIM_STATUSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SERVICE_CENTER_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.SERVICE_CENTER_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERVICE_CENTER_CODE' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.SERVICE_CENTER_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property REASON_CLOSED_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.REASON_CLOSED_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REASON_CLOSED_CODE' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.REASON_CLOSED_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROBLEM_DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.PROBLEM_DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROBLEM_DESCRIPTION' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.PROBLEM_DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPECIAL_INSTRUCTION() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.SPECIAL_INSTRUCTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIAL_INSTRUCTION' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.SPECIAL_INSTRUCTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property VISIT_DATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.VISIT_DATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VISIT_DATE' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableUpdateClaimData.VISIT_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property STATUS_COMMENTS() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.STATUS_COMMENTSColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS_COMMENTS' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.STATUS_COMMENTSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property AMOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.AMOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMOUNT' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableUpdateClaimData.AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_COMMENTS() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.CLAIM_COMMENTSColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLAIM_COMMENTS' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.CLAIM_COMMENTSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EXTERNAL_USER_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.EXTERNAL_USER_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNAL_USER_NAME' in table 'UpdateClaimData' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.EXTERNAL_USER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPECIAL_SERVICE_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIAL_SERVICE_CODE' in table 'UpdateClaimData' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPECIAL_SERVICE_ONLY_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_ONLY_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIAL_SERVICE_ONLY_CODE' in table 'UpdateClaimData' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_ONLY_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSERVICE_CENTER_CODENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.SERVICE_CENTER_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSERVICE_CENTER_CODENull()
            Me(Me.tableUpdateClaimData.SERVICE_CENTER_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsREASON_CLOSED_CODENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.REASON_CLOSED_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetREASON_CLOSED_CODENull()
            Me(Me.tableUpdateClaimData.REASON_CLOSED_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROBLEM_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.PROBLEM_DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROBLEM_DESCRIPTIONNull()
            Me(Me.tableUpdateClaimData.PROBLEM_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPECIAL_INSTRUCTIONNull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.SPECIAL_INSTRUCTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPECIAL_INSTRUCTIONNull()
            Me(Me.tableUpdateClaimData.SPECIAL_INSTRUCTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsVISIT_DATENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.VISIT_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetVISIT_DATENull()
            Me(Me.tableUpdateClaimData.VISIT_DATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSTATUS_COMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.STATUS_COMMENTSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSTATUS_COMMENTSNull()
            Me(Me.tableUpdateClaimData.STATUS_COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.AMOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAMOUNTNull()
            Me(Me.tableUpdateClaimData.AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCLAIM_COMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.CLAIM_COMMENTSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCLAIM_COMMENTSNull()
            Me(Me.tableUpdateClaimData.CLAIM_COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEXTERNAL_USER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.EXTERNAL_USER_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEXTERNAL_USER_NAMENull()
            Me(Me.tableUpdateClaimData.EXTERNAL_USER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPECIAL_SERVICE_CODENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.SPECIAL_SERVICE_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPECIAL_SERVICE_CODENull()
            Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPECIAL_SERVICE_ONLY_CODENull() As Boolean
            Return Me.IsNull(Me.tableUpdateClaimData.SPECIAL_SERVICE_ONLY_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPECIAL_SERVICE_ONLY_CODENull()
            Me(Me.tableUpdateClaimData.SPECIAL_SERVICE_ONLY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class UpdateClaimDataRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As UpdateClaimDataRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As UpdateClaimDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As UpdateClaimDataRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
