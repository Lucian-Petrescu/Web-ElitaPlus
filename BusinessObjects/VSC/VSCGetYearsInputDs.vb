'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System

'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.ComponentModel.ToolboxItem(True), _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 System.Xml.Serialization.XmlRootAttribute("VSCGetYearsInputDs"), _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class VSCGetYearsInputDs
    Inherits System.Data.DataSet

    Private tableVSCGetYearsInput As VSCGetYearsInputDataTable

    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VSCGetYearsInput")) Is Nothing) Then
                MyBase.Tables.Add(New VSCGetYearsInputDataTable(ds.Tables("VSCGetYearsInput")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property VSCGetYearsInput() As VSCGetYearsInputDataTable
        Get
            Return Me.tableVSCGetYearsInput
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.BrowsableAttribute(True), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As VSCGetYearsInputDs = CType(MyBase.Clone, VSCGetYearsInputDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VSCGetYearsInput")) Is Nothing) Then
                MyBase.Tables.Add(New VSCGetYearsInputDataTable(ds.Tables("VSCGetYearsInput")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVSCGetYearsInput = CType(MyBase.Tables("VSCGetYearsInput"), VSCGetYearsInputDataTable)
        If (initTable = True) Then
            If (Not (Me.tableVSCGetYearsInput) Is Nothing) Then
                Me.tableVSCGetYearsInput.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "VSCGetYearsInputDs"
        Me.Prefix = ""
        Me.Locale = New System.Globalization.CultureInfo("")
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVSCGetYearsInput = New VSCGetYearsInputDataTable
        MyBase.Tables.Add(Me.tableVSCGetYearsInput)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeVSCGetYearsInput() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VSCGetYearsInputDs = New VSCGetYearsInputDs
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub VSCGetYearsInputRowChangeEventHandler(ByVal sender As Object, ByVal e As VSCGetYearsInputRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class VSCGetYearsInputDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnMake As System.Data.DataColumn

        Private columnModel As System.Data.DataColumn

        Private columnVersion As System.Data.DataColumn

        Private columnwsConsumer As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "VSCGetYearsInput"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property MakeColumn() As System.Data.DataColumn
            Get
                Return Me.columnMake
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ModelColumn() As System.Data.DataColumn
            Get
                Return Me.columnModel
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnVersion
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property wsConsumerColumn() As System.Data.DataColumn
            Get
                Return Me.columnwsConsumer
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As VSCGetYearsInputRow
            Get
                Return CType(Me.Rows(index), VSCGetYearsInputRow)
            End Get
        End Property

        Public Event VSCGetYearsInputRowChanging As VSCGetYearsInputRowChangeEventHandler

        Public Event VSCGetYearsInputRowChanged As VSCGetYearsInputRowChangeEventHandler

        Public Event VSCGetYearsInputRowDeleting As VSCGetYearsInputRowChangeEventHandler

        Public Event VSCGetYearsInputRowDeleted As VSCGetYearsInputRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddVSCGetYearsInputRow(ByVal row As VSCGetYearsInputRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddVSCGetYearsInputRow(ByVal Make As String, ByVal Model As String, ByVal Version As String, ByVal wsConsumer As String) As VSCGetYearsInputRow
            Dim rowVSCGetYearsInputRow As VSCGetYearsInputRow = CType(Me.NewRow, VSCGetYearsInputRow)
            rowVSCGetYearsInputRow.ItemArray = New Object() {Make, Model, Version, wsConsumer}
            Me.Rows.Add(rowVSCGetYearsInputRow)
            Return rowVSCGetYearsInputRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VSCGetYearsInputDataTable = CType(MyBase.Clone, VSCGetYearsInputDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VSCGetYearsInputDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnMake = MyBase.Columns("Make")
            Me.columnModel = MyBase.Columns("Model")
            Me.columnVersion = MyBase.Columns("Version")
            Me.columnwsConsumer = MyBase.Columns("wsConsumer")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnMake = New System.Data.DataColumn("Make", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMake)
            Me.columnModel = New System.Data.DataColumn("Model", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModel)
            Me.columnVersion = New System.Data.DataColumn("Version", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersion)
            Me.columnwsConsumer = New System.Data.DataColumn("wsConsumer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwsConsumer)
            Me.columnMake.AllowDBNull = False
            Me.columnModel.AllowDBNull = False
            Me.columnVersion.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewVSCGetYearsInputRow() As VSCGetYearsInputRow
            Return CType(Me.NewRow, VSCGetYearsInputRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VSCGetYearsInputRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VSCGetYearsInputRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VSCGetYearsInputRowChangedEvent) Is Nothing) Then
                RaiseEvent VSCGetYearsInputRowChanged(Me, New VSCGetYearsInputRowChangeEvent(CType(e.Row, VSCGetYearsInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VSCGetYearsInputRowChangingEvent) Is Nothing) Then
                RaiseEvent VSCGetYearsInputRowChanging(Me, New VSCGetYearsInputRowChangeEvent(CType(e.Row, VSCGetYearsInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VSCGetYearsInputRowDeletedEvent) Is Nothing) Then
                RaiseEvent VSCGetYearsInputRowDeleted(Me, New VSCGetYearsInputRowChangeEvent(CType(e.Row, VSCGetYearsInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VSCGetYearsInputRowDeletingEvent) Is Nothing) Then
                RaiseEvent VSCGetYearsInputRowDeleting(Me, New VSCGetYearsInputRowChangeEvent(CType(e.Row, VSCGetYearsInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveVSCGetYearsInputRow(ByVal row As VSCGetYearsInputRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VSCGetYearsInputDs = New VSCGetYearsInputDs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VSCGetYearsInputDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class VSCGetYearsInputRow
        Inherits System.Data.DataRow

        Private tableVSCGetYearsInput As VSCGetYearsInputDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVSCGetYearsInput = CType(Me.Table, VSCGetYearsInputDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Make() As String
            Get
                Return CType(Me(Me.tableVSCGetYearsInput.MakeColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableVSCGetYearsInput.MakeColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Model() As String
            Get
                Return CType(Me(Me.tableVSCGetYearsInput.ModelColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableVSCGetYearsInput.ModelColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Version() As String
            Get
                Return CType(Me(Me.tableVSCGetYearsInput.VersionColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableVSCGetYearsInput.VersionColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property wsConsumer() As String
            Get
                Try
                    Return CType(Me(Me.tableVSCGetYearsInput.wsConsumerColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'wsConsumer' in table 'VSCGetYearsInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableVSCGetYearsInput.wsConsumerColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IswsConsumerNull() As Boolean
            Return Me.IsNull(Me.tableVSCGetYearsInput.wsConsumerColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetwsConsumerNull()
            Me(Me.tableVSCGetYearsInput.wsConsumerColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class VSCGetYearsInputRowChangeEvent
        Inherits System.EventArgs

        Private eventRow As VSCGetYearsInputRow

        Private eventAction As System.Data.DataRowAction

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As VSCGetYearsInputRow, ByVal action As System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As VSCGetYearsInputRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
