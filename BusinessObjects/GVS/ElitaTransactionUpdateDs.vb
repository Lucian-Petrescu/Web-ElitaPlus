'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.3038.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("ElitaTransactionUpdateDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class ElitaTransactionUpdateDs
    Inherits Global.System.Data.DataSet

    Private tableElitaTransactionUpdate As ElitaTransactionUpdateDataTable

    Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

    Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

    Private table_ERROR As _ERRORDataTable

    Private relationElitaTransactionUpdate_TRANSACTION_HEADER As Global.System.Data.DataRelation

    Private relationElitaTransactionUpdate_TRANSACTION_DATA_RECORD As Global.System.Data.DataRelation

    Private relationTRANSACTION_DATA_RECORD_ERROR As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ElitaTransactionUpdate")) Is Nothing) Then
                MyBase.Tables.Add(New ElitaTransactionUpdateDataTable(ds.Tables("ElitaTransactionUpdate")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            If (Not (ds.Tables("ERROR")) Is Nothing) Then
                MyBase.Tables.Add(New _ERRORDataTable(ds.Tables("ERROR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ElitaTransactionUpdate() As ElitaTransactionUpdateDataTable
        Get
            Return Me.tableElitaTransactionUpdate
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_HEADER() As TRANSACTION_HEADERDataTable
        Get
            Return Me.tableTRANSACTION_HEADER
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_DATA_RECORD() As TRANSACTION_DATA_RECORDDataTable
        Get
            Return Me.tableTRANSACTION_DATA_RECORD
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property _ERROR() As _ERRORDataTable
        Get
            Return Me.table_ERROR
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ElitaTransactionUpdateDs = CType(MyBase.Clone, ElitaTransactionUpdateDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ElitaTransactionUpdate")) Is Nothing) Then
                MyBase.Tables.Add(New ElitaTransactionUpdateDataTable(ds.Tables("ElitaTransactionUpdate")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            If (Not (ds.Tables("ERROR")) Is Nothing) Then
                MyBase.Tables.Add(New _ERRORDataTable(ds.Tables("ERROR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableElitaTransactionUpdate = CType(MyBase.Tables("ElitaTransactionUpdate"), ElitaTransactionUpdateDataTable)
        If (initTable = True) Then
            If (Not (Me.tableElitaTransactionUpdate) Is Nothing) Then
                Me.tableElitaTransactionUpdate.InitVars()
            End If
        End If
        Me.tableTRANSACTION_HEADER = CType(MyBase.Tables("TRANSACTION_HEADER"), TRANSACTION_HEADERDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_HEADER) Is Nothing) Then
                Me.tableTRANSACTION_HEADER.InitVars()
            End If
        End If
        Me.tableTRANSACTION_DATA_RECORD = CType(MyBase.Tables("TRANSACTION_DATA_RECORD"), TRANSACTION_DATA_RECORDDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_DATA_RECORD) Is Nothing) Then
                Me.tableTRANSACTION_DATA_RECORD.InitVars()
            End If
        End If
        Me.table_ERROR = CType(MyBase.Tables("ERROR"), _ERRORDataTable)
        If (initTable = True) Then
            If (Not (Me.table_ERROR) Is Nothing) Then
                Me.table_ERROR.InitVars()
            End If
        End If
        Me.relationElitaTransactionUpdate_TRANSACTION_HEADER = Me.Relations("ElitaTransactionUpdate_TRANSACTION_HEADER")
        Me.relationElitaTransactionUpdate_TRANSACTION_DATA_RECORD = Me.Relations("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD")
        Me.relationTRANSACTION_DATA_RECORD_ERROR = Me.Relations("TRANSACTION_DATA_RECORD_ERROR")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "ElitaTransactionUpdateDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableElitaTransactionUpdate = New ElitaTransactionUpdateDataTable
        MyBase.Tables.Add(Me.tableElitaTransactionUpdate)
        Me.tableTRANSACTION_HEADER = New TRANSACTION_HEADERDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_HEADER)
        Me.tableTRANSACTION_DATA_RECORD = New TRANSACTION_DATA_RECORDDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_DATA_RECORD)
        Me.table_ERROR = New _ERRORDataTable
        MyBase.Tables.Add(Me.table_ERROR)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("ElitaTransactionUpdate_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn})
        Me.tableTRANSACTION_HEADER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn})
        Me.tableTRANSACTION_DATA_RECORD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_DATA_RECORD_ERROR", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn})
        Me.table_ERROR.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationElitaTransactionUpdate_TRANSACTION_HEADER = New Global.System.Data.DataRelation("ElitaTransactionUpdate_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn}, False)
        Me.relationElitaTransactionUpdate_TRANSACTION_HEADER.Nested = True
        Me.Relations.Add(Me.relationElitaTransactionUpdate_TRANSACTION_HEADER)
        Me.relationElitaTransactionUpdate_TRANSACTION_DATA_RECORD = New Global.System.Data.DataRelation("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn}, False)
        Me.relationElitaTransactionUpdate_TRANSACTION_DATA_RECORD.Nested = True
        Me.Relations.Add(Me.relationElitaTransactionUpdate_TRANSACTION_DATA_RECORD)
        Me.relationTRANSACTION_DATA_RECORD_ERROR = New Global.System.Data.DataRelation("TRANSACTION_DATA_RECORD_ERROR", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn}, False)
        Me.relationTRANSACTION_DATA_RECORD_ERROR.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_DATA_RECORD_ERROR)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeElitaTransactionUpdate() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_HEADER() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_DATA_RECORD() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerialize_ERROR() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ElitaTransactionUpdateDs = New ElitaTransactionUpdateDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub ElitaTransactionUpdateRowChangeEventHandler(ByVal sender As Object, ByVal e As ElitaTransactionUpdateRowChangeEvent)

    Public Delegate Sub TRANSACTION_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_HEADERRowChangeEvent)

    Public Delegate Sub TRANSACTION_DATA_RECORDRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_DATA_RECORDRowChangeEvent)

    Public Delegate Sub _ERRORRowChangeEventHandler(ByVal sender As Object, ByVal e As _ERRORRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ElitaTransactionUpdateDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnElitaTransactionUpdate_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ElitaTransactionUpdate"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ElitaTransactionUpdate_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElitaTransactionUpdate_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ElitaTransactionUpdateRow
            Get
                Return CType(Me.Rows(index), ElitaTransactionUpdateRow)
            End Get
        End Property

        Public Event ElitaTransactionUpdateRowChanging As ElitaTransactionUpdateRowChangeEventHandler

        Public Event ElitaTransactionUpdateRowChanged As ElitaTransactionUpdateRowChangeEventHandler

        Public Event ElitaTransactionUpdateRowDeleting As ElitaTransactionUpdateRowChangeEventHandler

        Public Event ElitaTransactionUpdateRowDeleted As ElitaTransactionUpdateRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddElitaTransactionUpdateRow(ByVal row As ElitaTransactionUpdateRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddElitaTransactionUpdateRow() As ElitaTransactionUpdateRow
            Dim rowElitaTransactionUpdateRow As ElitaTransactionUpdateRow = CType(Me.NewRow, ElitaTransactionUpdateRow)
            Dim columnValuesArray() As Object = New Object() {Nothing}
            rowElitaTransactionUpdateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowElitaTransactionUpdateRow)
            Return rowElitaTransactionUpdateRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ElitaTransactionUpdateDataTable = CType(MyBase.Clone, ElitaTransactionUpdateDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ElitaTransactionUpdateDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnElitaTransactionUpdate_Id = MyBase.Columns("ElitaTransactionUpdate_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnElitaTransactionUpdate_Id = New Global.System.Data.DataColumn("ElitaTransactionUpdate_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnElitaTransactionUpdate_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnElitaTransactionUpdate_Id}, True))
            Me.columnElitaTransactionUpdate_Id.AutoIncrement = True
            Me.columnElitaTransactionUpdate_Id.AllowDBNull = False
            Me.columnElitaTransactionUpdate_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewElitaTransactionUpdateRow() As ElitaTransactionUpdateRow
            Return CType(Me.NewRow, ElitaTransactionUpdateRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ElitaTransactionUpdateRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ElitaTransactionUpdateRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ElitaTransactionUpdateRowChangedEvent) Is Nothing) Then
                RaiseEvent ElitaTransactionUpdateRowChanged(Me, New ElitaTransactionUpdateRowChangeEvent(CType(e.Row, ElitaTransactionUpdateRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ElitaTransactionUpdateRowChangingEvent) Is Nothing) Then
                RaiseEvent ElitaTransactionUpdateRowChanging(Me, New ElitaTransactionUpdateRowChangeEvent(CType(e.Row, ElitaTransactionUpdateRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ElitaTransactionUpdateRowDeletedEvent) Is Nothing) Then
                RaiseEvent ElitaTransactionUpdateRowDeleted(Me, New ElitaTransactionUpdateRowChangeEvent(CType(e.Row, ElitaTransactionUpdateRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ElitaTransactionUpdateRowDeletingEvent) Is Nothing) Then
                RaiseEvent ElitaTransactionUpdateRowDeleting(Me, New ElitaTransactionUpdateRowChangeEvent(CType(e.Row, ElitaTransactionUpdateRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveElitaTransactionUpdateRow(ByVal row As ElitaTransactionUpdateRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ElitaTransactionUpdateDs = New ElitaTransactionUpdateDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ElitaTransactionUpdateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTRANSACTION_ID As Global.System.Data.DataColumn

        Private columnFUNCTION_TYPE As Global.System.Data.DataColumn

        Private columnELITA_ORGINAL_TRANS_ID As Global.System.Data.DataColumn

        Private columnElitaTransactionUpdate_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_HEADER"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FUNCTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFUNCTION_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ELITA_ORGINAL_TRANS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELITA_ORGINAL_TRANS_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ElitaTransactionUpdate_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElitaTransactionUpdate_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_HEADERRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_HEADERRow)
            End Get
        End Property

        Public Event TRANSACTION_HEADERRowChanging As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowChanged As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleting As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleted As TRANSACTION_HEADERRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_HEADERRow(ByVal TRANSACTION_ID As String, ByVal FUNCTION_TYPE As String, ByVal ELITA_ORGINAL_TRANS_ID As String, ByVal parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_HEADER As ElitaTransactionUpdateRow) As TRANSACTION_HEADERRow
            Dim rowTRANSACTION_HEADERRow As TRANSACTION_HEADERRow = CType(Me.NewRow, TRANSACTION_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {TRANSACTION_ID, FUNCTION_TYPE, ELITA_ORGINAL_TRANS_ID, Nothing}
            If (Not (parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_HEADER) Is Nothing) Then
                columnValuesArray(3) = parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_HEADER(0)
            End If
            rowTRANSACTION_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_HEADERRow)
            Return rowTRANSACTION_HEADERRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_HEADERDataTable = CType(MyBase.Clone, TRANSACTION_HEADERDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_HEADERDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTRANSACTION_ID = MyBase.Columns("TRANSACTION_ID")
            Me.columnFUNCTION_TYPE = MyBase.Columns("FUNCTION_TYPE")
            Me.columnELITA_ORGINAL_TRANS_ID = MyBase.Columns("ELITA_ORGINAL_TRANS_ID")
            Me.columnElitaTransactionUpdate_Id = MyBase.Columns("ElitaTransactionUpdate_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTRANSACTION_ID = New Global.System.Data.DataColumn("TRANSACTION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTION_ID)
            Me.columnFUNCTION_TYPE = New Global.System.Data.DataColumn("FUNCTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFUNCTION_TYPE)
            Me.columnELITA_ORGINAL_TRANS_ID = New Global.System.Data.DataColumn("ELITA_ORGINAL_TRANS_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELITA_ORGINAL_TRANS_ID)
            Me.columnElitaTransactionUpdate_Id = New Global.System.Data.DataColumn("ElitaTransactionUpdate_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnElitaTransactionUpdate_Id)
            Me.columnTRANSACTION_ID.AllowDBNull = False
            Me.columnFUNCTION_TYPE.AllowDBNull = False
            Me.columnELITA_ORGINAL_TRANS_ID.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_HEADERRow() As TRANSACTION_HEADERRow
            Return CType(Me.NewRow, TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_HEADERRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanged(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanging(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleted(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleting(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ElitaTransactionUpdateDs = New ElitaTransactionUpdateDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_DATA_RECORDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnITEM_NUMBER As Global.System.Data.DataColumn

        Private columnRESULT As Global.System.Data.DataColumn

        Private columnTRANSACTION_DATA_RECORD_Id As Global.System.Data.DataColumn

        Private columnElitaTransactionUpdate_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_DATA_RECORD"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RESULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_DATA_RECORD_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_DATA_RECORD_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ElitaTransactionUpdate_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElitaTransactionUpdate_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_DATA_RECORDRow)
            End Get
        End Property

        Public Event TRANSACTION_DATA_RECORDRowChanging As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowChanged As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleting As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleted As TRANSACTION_DATA_RECORDRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_DATA_RECORDRow(ByVal ITEM_NUMBER As Integer, ByVal RESULT As String, ByVal parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_DATA_RECORD As ElitaTransactionUpdateRow) As TRANSACTION_DATA_RECORDRow
            Dim rowTRANSACTION_DATA_RECORDRow As TRANSACTION_DATA_RECORDRow = CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_NUMBER, RESULT, Nothing, Nothing}
            If (Not (parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_DATA_RECORD) Is Nothing) Then
                columnValuesArray(3) = parentElitaTransactionUpdateRowByElitaTransactionUpdate_TRANSACTION_DATA_RECORD(0)
            End If
            rowTRANSACTION_DATA_RECORDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_DATA_RECORDRow)
            Return rowTRANSACTION_DATA_RECORDRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_DATA_RECORDDataTable = CType(MyBase.Clone, TRANSACTION_DATA_RECORDDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_DATA_RECORDDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnITEM_NUMBER = MyBase.Columns("ITEM_NUMBER")
            Me.columnRESULT = MyBase.Columns("RESULT")
            Me.columnTRANSACTION_DATA_RECORD_Id = MyBase.Columns("TRANSACTION_DATA_RECORD_Id")
            Me.columnElitaTransactionUpdate_Id = MyBase.Columns("ElitaTransactionUpdate_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnITEM_NUMBER = New Global.System.Data.DataColumn("ITEM_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NUMBER)
            Me.columnRESULT = New Global.System.Data.DataColumn("RESULT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT)
            Me.columnTRANSACTION_DATA_RECORD_Id = New Global.System.Data.DataColumn("TRANSACTION_DATA_RECORD_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_DATA_RECORD_Id)
            Me.columnElitaTransactionUpdate_Id = New Global.System.Data.DataColumn("ElitaTransactionUpdate_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnElitaTransactionUpdate_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRANSACTION_DATA_RECORD_Id}, True))
            Me.columnITEM_NUMBER.AllowDBNull = False
            Me.columnRESULT.AllowDBNull = False
            Me.columnTRANSACTION_DATA_RECORD_Id.AutoIncrement = True
            Me.columnTRANSACTION_DATA_RECORD_Id.AllowDBNull = False
            Me.columnTRANSACTION_DATA_RECORD_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Return CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_DATA_RECORDRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanged(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanging(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleted(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleting(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ElitaTransactionUpdateDs = New ElitaTransactionUpdateDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_DATA_RECORDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class _ERRORDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnCODE As Global.System.Data.DataColumn

        Private columnMESSAGE As Global.System.Data.DataColumn

        Private columnERROR_INFO As Global.System.Data.DataColumn

        Private columnTRANSACTION_DATA_RECORD_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ERROR"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ERROR_INFOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnERROR_INFO
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_DATA_RECORD_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_DATA_RECORD_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As _ERRORRow
            Get
                Return CType(Me.Rows(index), _ERRORRow)
            End Get
        End Property

        Public Event _ERRORRowChanging As _ERRORRowChangeEventHandler

        Public Event _ERRORRowChanged As _ERRORRowChangeEventHandler

        Public Event _ERRORRowDeleting As _ERRORRowChangeEventHandler

        Public Event _ERRORRowDeleted As _ERRORRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub Add_ERRORRow(ByVal row As _ERRORRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function Add_ERRORRow(ByVal CODE As String, ByVal MESSAGE As String, ByVal ERROR_INFO As String, ByVal parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_ERROR As TRANSACTION_DATA_RECORDRow) As _ERRORRow
            Dim row_ERRORRow As _ERRORRow = CType(Me.NewRow, _ERRORRow)
            Dim columnValuesArray() As Object = New Object() {CODE, MESSAGE, ERROR_INFO, Nothing}
            If (Not (parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_ERROR) Is Nothing) Then
                columnValuesArray(3) = parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_ERROR(2)
            End If
            row_ERRORRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_ERRORRow)
            Return row_ERRORRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _ERRORDataTable = CType(MyBase.Clone, _ERRORDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _ERRORDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCODE = MyBase.Columns("CODE")
            Me.columnMESSAGE = MyBase.Columns("MESSAGE")
            Me.columnERROR_INFO = MyBase.Columns("ERROR_INFO")
            Me.columnTRANSACTION_DATA_RECORD_Id = MyBase.Columns("TRANSACTION_DATA_RECORD_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCODE = New Global.System.Data.DataColumn("CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE)
            Me.columnMESSAGE = New Global.System.Data.DataColumn("MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMESSAGE)
            Me.columnERROR_INFO = New Global.System.Data.DataColumn("ERROR_INFO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnERROR_INFO)
            Me.columnTRANSACTION_DATA_RECORD_Id = New Global.System.Data.DataColumn("TRANSACTION_DATA_RECORD_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_DATA_RECORD_Id)
            Me.columnCODE.AllowDBNull = False
            Me.columnMESSAGE.AllowDBNull = False
            Me.columnERROR_INFO.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function New_ERRORRow() As _ERRORRow
            Return CType(Me.NewRow, _ERRORRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _ERRORRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_ERRORRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ERRORRowChangedEvent) Is Nothing) Then
                RaiseEvent _ERRORRowChanged(Me, New _ERRORRowChangeEvent(CType(e.Row, _ERRORRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ERRORRowChangingEvent) Is Nothing) Then
                RaiseEvent _ERRORRowChanging(Me, New _ERRORRowChangeEvent(CType(e.Row, _ERRORRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ERRORRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ERRORRowDeleted(Me, New _ERRORRowChangeEvent(CType(e.Row, _ERRORRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ERRORRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ERRORRowDeleting(Me, New _ERRORRowChangeEvent(CType(e.Row, _ERRORRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Remove_ERRORRow(ByVal row As _ERRORRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ElitaTransactionUpdateDs = New ElitaTransactionUpdateDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_ERRORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class ElitaTransactionUpdateRow
        Inherits Global.System.Data.DataRow

        Private tableElitaTransactionUpdate As ElitaTransactionUpdateDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableElitaTransactionUpdate = CType(Me.Table, ElitaTransactionUpdateDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ElitaTransactionUpdate_Id() As Integer
            Get
                Return CType(Me(Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableElitaTransactionUpdate.ElitaTransactionUpdate_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_HEADERRows() As TRANSACTION_HEADERRow()
            If (Me.Table.ChildRelations("ElitaTransactionUpdate_TRANSACTION_HEADER") Is Nothing) Then
                Return New TRANSACTION_HEADERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ElitaTransactionUpdate_TRANSACTION_HEADER")), TRANSACTION_HEADERRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_DATA_RECORDRows() As TRANSACTION_DATA_RECORDRow()
            If (Me.Table.ChildRelations("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD") Is Nothing) Then
                Return New TRANSACTION_DATA_RECORDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD")), TRANSACTION_DATA_RECORDRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_HEADERRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_HEADER = CType(Me.Table, TRANSACTION_HEADERDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_ID() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property FUNCTION_TYPE() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ELITA_ORGINAL_TRANS_ID() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.ELITA_ORGINAL_TRANS_IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.ELITA_ORGINAL_TRANS_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ElitaTransactionUpdate_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ElitaTransactionUpdate_Id' in table 'TRANSACTION_HEADER' is" & _
                            " DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ElitaTransactionUpdateRow() As ElitaTransactionUpdateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ElitaTransactionUpdate_TRANSACTION_HEADER")), ElitaTransactionUpdateRow)
            End Get
            Set(ByVal value As ElitaTransactionUpdateRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("ElitaTransactionUpdate_TRANSACTION_HEADER"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsElitaTransactionUpdate_IdNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetElitaTransactionUpdate_IdNull()
            Me(Me.tableTRANSACTION_HEADER.ElitaTransactionUpdate_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_DATA_RECORDRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_DATA_RECORD = CType(Me.Table, TRANSACTION_DATA_RECORDDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property RESULT() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.RESULTColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.RESULTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORD_Id() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ElitaTransactionUpdate_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ElitaTransactionUpdate_Id' in table 'TRANSACTION_DATA_RECOR" & _
                            "D' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ElitaTransactionUpdateRow() As ElitaTransactionUpdateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD")), ElitaTransactionUpdateRow)
            End Get
            Set(ByVal value As ElitaTransactionUpdateRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("ElitaTransactionUpdate_TRANSACTION_DATA_RECORD"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsElitaTransactionUpdate_IdNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetElitaTransactionUpdate_IdNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.ElitaTransactionUpdate_IdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetERRORRows() As _ERRORRow()
            If (Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_ERROR") Is Nothing) Then
                Return New _ERRORRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_ERROR")), _ERRORRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class _ERRORRow
        Inherits Global.System.Data.DataRow

        Private table_ERROR As _ERRORDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_ERROR = CType(Me.Table, _ERRORDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CODE() As String
            Get
                Return CType(Me(Me.table_ERROR.CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.table_ERROR.CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property MESSAGE() As String
            Get
                Return CType(Me(Me.table_ERROR.MESSAGEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.table_ERROR.MESSAGEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ERROR_INFO() As String
            Get
                Return CType(Me(Me.table_ERROR.ERROR_INFOColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.table_ERROR.ERROR_INFOColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORD_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_DATA_RECORD_Id' in table 'ERROR' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_ERROR")), TRANSACTION_DATA_RECORDRow)
            End Get
            Set(ByVal value As TRANSACTION_DATA_RECORDRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_ERROR"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_DATA_RECORD_IdNull() As Boolean
            Return Me.IsNull(Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_DATA_RECORD_IdNull()
            Me(Me.table_ERROR.TRANSACTION_DATA_RECORD_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class ElitaTransactionUpdateRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As ElitaTransactionUpdateRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As ElitaTransactionUpdateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As ElitaTransactionUpdateRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_HEADERRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_HEADERRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_DATA_RECORDRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_DATA_RECORDRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_DATA_RECORDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_DATA_RECORDRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class _ERRORRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As _ERRORRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As _ERRORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As _ERRORRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
