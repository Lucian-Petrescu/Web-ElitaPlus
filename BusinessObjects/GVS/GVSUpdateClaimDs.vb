'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.1432.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("GVSUpdateClaimDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class GVSUpdateClaimDs
    Inherits Global.System.Data.DataSet

    Private tableTRANSACTION As TRANSACTIONDataTable

    Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

    Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

    Private tablePARTS_LIST As PARTS_LISTDataTable

    Private tableFOLLOWUP As FOLLOWUPDataTable

    Private relationTRANSACTION_TRANSACTION_HEADER As Global.System.Data.DataRelation

    Private relationTRANSACTION_TRANSACTION_DATA_RECORD As Global.System.Data.DataRelation

    Private relationTRANSACTION_DATA_RECORD_PARTS_LIST As Global.System.Data.DataRelation

    Private relationTRANSACTION_DATA_RECORD_FOLLOWUP As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            If (Not (ds.Tables("PARTS_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New PARTS_LISTDataTable(ds.Tables("PARTS_LIST")))
            End If
            If (Not (ds.Tables("FOLLOWUP")) Is Nothing) Then
                MyBase.Tables.Add(New FOLLOWUPDataTable(ds.Tables("FOLLOWUP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION() As TRANSACTIONDataTable
        Get
            Return Me.tableTRANSACTION
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_HEADER() As TRANSACTION_HEADERDataTable
        Get
            Return Me.tableTRANSACTION_HEADER
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_DATA_RECORD() As TRANSACTION_DATA_RECORDDataTable
        Get
            Return Me.tableTRANSACTION_DATA_RECORD
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PARTS_LIST() As PARTS_LISTDataTable
        Get
            Return Me.tablePARTS_LIST
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property FOLLOWUP() As FOLLOWUPDataTable
        Get
            Return Me.tableFOLLOWUP
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GVSUpdateClaimDs = CType(MyBase.Clone, GVSUpdateClaimDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            If (Not (ds.Tables("PARTS_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New PARTS_LISTDataTable(ds.Tables("PARTS_LIST")))
            End If
            If (Not (ds.Tables("FOLLOWUP")) Is Nothing) Then
                MyBase.Tables.Add(New FOLLOWUPDataTable(ds.Tables("FOLLOWUP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTRANSACTION = CType(MyBase.Tables("TRANSACTION"), TRANSACTIONDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION) Is Nothing) Then
                Me.tableTRANSACTION.InitVars()
            End If
        End If
        Me.tableTRANSACTION_HEADER = CType(MyBase.Tables("TRANSACTION_HEADER"), TRANSACTION_HEADERDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_HEADER) Is Nothing) Then
                Me.tableTRANSACTION_HEADER.InitVars()
            End If
        End If
        Me.tableTRANSACTION_DATA_RECORD = CType(MyBase.Tables("TRANSACTION_DATA_RECORD"), TRANSACTION_DATA_RECORDDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_DATA_RECORD) Is Nothing) Then
                Me.tableTRANSACTION_DATA_RECORD.InitVars()
            End If
        End If
        Me.tablePARTS_LIST = CType(MyBase.Tables("PARTS_LIST"), PARTS_LISTDataTable)
        If (initTable = True) Then
            If (Not (Me.tablePARTS_LIST) Is Nothing) Then
                Me.tablePARTS_LIST.InitVars()
            End If
        End If
        Me.tableFOLLOWUP = CType(MyBase.Tables("FOLLOWUP"), FOLLOWUPDataTable)
        If (initTable = True) Then
            If (Not (Me.tableFOLLOWUP) Is Nothing) Then
                Me.tableFOLLOWUP.InitVars()
            End If
        End If
        Me.relationTRANSACTION_TRANSACTION_HEADER = Me.Relations("TRANSACTION_TRANSACTION_HEADER")
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD = Me.Relations("TRANSACTION_TRANSACTION_DATA_RECORD")
        Me.relationTRANSACTION_DATA_RECORD_PARTS_LIST = Me.Relations("TRANSACTION_DATA_RECORD_PARTS_LIST")
        Me.relationTRANSACTION_DATA_RECORD_FOLLOWUP = Me.Relations("TRANSACTION_DATA_RECORD_FOLLOWUP")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "GVSUpdateClaimDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTRANSACTION = New TRANSACTIONDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION)
        Me.tableTRANSACTION_HEADER = New TRANSACTION_HEADERDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_HEADER)
        Me.tableTRANSACTION_DATA_RECORD = New TRANSACTION_DATA_RECORDDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_DATA_RECORD)
        Me.tablePARTS_LIST = New PARTS_LISTDataTable
        MyBase.Tables.Add(Me.tablePARTS_LIST)
        Me.tableFOLLOWUP = New FOLLOWUPDataTable
        MyBase.Tables.Add(Me.tableFOLLOWUP)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column})
        Me.tableTRANSACTION_HEADER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn})
        Me.tableTRANSACTION_DATA_RECORD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_DATA_RECORD_PARTS_LIST", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn})
        Me.tablePARTS_LIST.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_DATA_RECORD_FOLLOWUP", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn})
        Me.tableFOLLOWUP.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationTRANSACTION_TRANSACTION_HEADER = New Global.System.Data.DataRelation("TRANSACTION_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column}, False)
        Me.relationTRANSACTION_TRANSACTION_HEADER.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_TRANSACTION_HEADER)
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD = New Global.System.Data.DataRelation("TRANSACTION_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn}, False)
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_TRANSACTION_DATA_RECORD)
        Me.relationTRANSACTION_DATA_RECORD_PARTS_LIST = New Global.System.Data.DataRelation("TRANSACTION_DATA_RECORD_PARTS_LIST", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn}, False)
        Me.relationTRANSACTION_DATA_RECORD_PARTS_LIST.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_DATA_RECORD_PARTS_LIST)
        Me.relationTRANSACTION_DATA_RECORD_FOLLOWUP = New Global.System.Data.DataRelation("TRANSACTION_DATA_RECORD_FOLLOWUP", New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn}, New Global.System.Data.DataColumn() {Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn}, False)
        Me.relationTRANSACTION_DATA_RECORD_FOLLOWUP.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_DATA_RECORD_FOLLOWUP)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_HEADER() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_DATA_RECORD() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePARTS_LIST() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeFOLLOWUP() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub TRANSACTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTIONRowChangeEvent)

    Public Delegate Sub TRANSACTION_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_HEADERRowChangeEvent)

    Public Delegate Sub TRANSACTION_DATA_RECORDRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_DATA_RECORDRowChangeEvent)

    Public Delegate Sub PARTS_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTS_LISTRowChangeEvent)

    Public Delegate Sub FOLLOWUPRowChangeEventHandler(ByVal sender As Object, ByVal e As FOLLOWUPRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTRANSACTION_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTIONRow
            Get
                Return CType(Me.Rows(index), TRANSACTIONRow)
            End Get
        End Property

        Public Event TRANSACTIONRowChanging As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowChanged As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowDeleting As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowDeleted As TRANSACTIONRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTIONRow() As TRANSACTIONRow
            Dim rowTRANSACTIONRow As TRANSACTIONRow = CType(Me.NewRow, TRANSACTIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing}
            rowTRANSACTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTIONRow)
            Return rowTRANSACTIONRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTIONDataTable = CType(MyBase.Clone, TRANSACTIONDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTIONDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTRANSACTION_Id = MyBase.Columns("TRANSACTION_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTRANSACTION_Id = New Global.System.Data.DataColumn("TRANSACTION_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRANSACTION_Id}, True))
            Me.columnTRANSACTION_Id.AutoIncrement = True
            Me.columnTRANSACTION_Id.AllowDBNull = False
            Me.columnTRANSACTION_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTIONRow() As TRANSACTIONRow
            Return CType(Me.NewRow, TRANSACTIONRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTIONRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTIONRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanged(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanging(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleted(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleting(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTRANSACTION_ID As Global.System.Data.DataColumn

        Private columnFUNCTION_TYPE As Global.System.Data.DataColumn

        Private columnTRANSACTION_Id_0 As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_HEADER"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FUNCTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFUNCTION_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_Id_0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id_0
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_HEADERRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_HEADERRow)
            End Get
        End Property

        Public Event TRANSACTION_HEADERRowChanging As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowChanged As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleting As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleted As TRANSACTION_HEADERRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_HEADERRow(ByVal TRANSACTION_ID As String, ByVal FUNCTION_TYPE As String, ByVal parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER As TRANSACTIONRow) As TRANSACTION_HEADERRow
            Dim rowTRANSACTION_HEADERRow As TRANSACTION_HEADERRow = CType(Me.NewRow, TRANSACTION_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {TRANSACTION_ID, FUNCTION_TYPE, Nothing}
            If (Not (parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER) Is Nothing) Then
                columnValuesArray(2) = parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER(0)
            End If
            rowTRANSACTION_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_HEADERRow)
            Return rowTRANSACTION_HEADERRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_HEADERDataTable = CType(MyBase.Clone, TRANSACTION_HEADERDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_HEADERDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTRANSACTION_ID = MyBase.Columns("TRANSACTION_ID")
            Me.columnFUNCTION_TYPE = MyBase.Columns("FUNCTION_TYPE")
            Me.columnTRANSACTION_Id_0 = MyBase.Columns("TRANSACTION_Id_0")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTRANSACTION_ID = New Global.System.Data.DataColumn("TRANSACTION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTION_ID)
            Me.columnFUNCTION_TYPE = New Global.System.Data.DataColumn("FUNCTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFUNCTION_TYPE)
            Me.columnTRANSACTION_Id_0 = New Global.System.Data.DataColumn("TRANSACTION_Id_0", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id_0)
            Me.columnTRANSACTION_ID.AllowDBNull = False
            Me.columnFUNCTION_TYPE.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_HEADERRow() As TRANSACTION_HEADERRow
            Return CType(Me.NewRow, TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_HEADERRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanged(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanging(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleted(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleting(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_DATA_RECORDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnITEM_NUMBER As Global.System.Data.DataColumn

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnCLAIM_STATUS As Global.System.Data.DataColumn

        Private columnREASON_CLOSE_CODE As Global.System.Data.DataColumn

        Private columnLABOR_AMOUNT As Global.System.Data.DataColumn

        Private columnTRIP_AMOUNT As Global.System.Data.DataColumn

        Private columnSHIPPING As Global.System.Data.DataColumn

        Private columnAPPROVED_QUOTE_DATE As Global.System.Data.DataColumn

        Private columnINVOICE_NUMBER As Global.System.Data.DataColumn

        Private columnINVOICE_PROCESSED_DATE As Global.System.Data.DataColumn

        Private columnTRANSACTION_DATA_RECORD_Id As Global.System.Data.DataColumn

        Private columnTRANSACTION_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_DATA_RECORD"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_STATUS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property REASON_CLOSE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREASON_CLOSE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LABOR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABOR_AMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRIP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRIP_AMOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SHIPPINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPPING
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property APPROVED_QUOTE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPPROVED_QUOTE_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INVOICE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INVOICE_PROCESSED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_PROCESSED_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_DATA_RECORD_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_DATA_RECORD_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_DATA_RECORDRow)
            End Get
        End Property

        Public Event TRANSACTION_DATA_RECORDRowChanging As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowChanged As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleting As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleted As TRANSACTION_DATA_RECORDRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_DATA_RECORDRow(ByVal ITEM_NUMBER As Integer, ByVal CLAIM_NUMBER As String, ByVal CLAIM_STATUS As String, ByVal REASON_CLOSE_CODE As String, ByVal LABOR_AMOUNT As Decimal, ByVal TRIP_AMOUNT As Decimal, ByVal SHIPPING As Decimal, ByVal APPROVED_QUOTE_DATE As Date, ByVal INVOICE_NUMBER As String, ByVal INVOICE_PROCESSED_DATE As Date, ByVal parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD As TRANSACTIONRow) As TRANSACTION_DATA_RECORDRow
            Dim rowTRANSACTION_DATA_RECORDRow As TRANSACTION_DATA_RECORDRow = CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_NUMBER, CLAIM_NUMBER, CLAIM_STATUS, REASON_CLOSE_CODE, LABOR_AMOUNT, TRIP_AMOUNT, SHIPPING, APPROVED_QUOTE_DATE, INVOICE_NUMBER, INVOICE_PROCESSED_DATE, Nothing, Nothing}
            If (Not (parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD) Is Nothing) Then
                columnValuesArray(11) = parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD(0)
            End If
            rowTRANSACTION_DATA_RECORDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_DATA_RECORDRow)
            Return rowTRANSACTION_DATA_RECORDRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_DATA_RECORDDataTable = CType(MyBase.Clone, TRANSACTION_DATA_RECORDDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_DATA_RECORDDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnITEM_NUMBER = MyBase.Columns("ITEM_NUMBER")
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnCLAIM_STATUS = MyBase.Columns("CLAIM_STATUS")
            Me.columnREASON_CLOSE_CODE = MyBase.Columns("REASON_CLOSE_CODE")
            Me.columnLABOR_AMOUNT = MyBase.Columns("LABOR_AMOUNT")
            Me.columnTRIP_AMOUNT = MyBase.Columns("TRIP_AMOUNT")
            Me.columnSHIPPING = MyBase.Columns("SHIPPING")
            Me.columnAPPROVED_QUOTE_DATE = MyBase.Columns("APPROVED_QUOTE_DATE")
            Me.columnINVOICE_NUMBER = MyBase.Columns("INVOICE_NUMBER")
            Me.columnINVOICE_PROCESSED_DATE = MyBase.Columns("INVOICE_PROCESSED_DATE")
            Me.columnTRANSACTION_DATA_RECORD_Id = MyBase.Columns("TRANSACTION_DATA_RECORD_Id")
            Me.columnTRANSACTION_Id = MyBase.Columns("TRANSACTION_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnITEM_NUMBER = New Global.System.Data.DataColumn("ITEM_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NUMBER)
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnCLAIM_STATUS = New Global.System.Data.DataColumn("CLAIM_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_STATUS)
            Me.columnREASON_CLOSE_CODE = New Global.System.Data.DataColumn("REASON_CLOSE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREASON_CLOSE_CODE)
            Me.columnLABOR_AMOUNT = New Global.System.Data.DataColumn("LABOR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABOR_AMOUNT)
            Me.columnTRIP_AMOUNT = New Global.System.Data.DataColumn("TRIP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRIP_AMOUNT)
            Me.columnSHIPPING = New Global.System.Data.DataColumn("SHIPPING", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPPING)
            Me.columnAPPROVED_QUOTE_DATE = New Global.System.Data.DataColumn("APPROVED_QUOTE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPPROVED_QUOTE_DATE)
            Me.columnINVOICE_NUMBER = New Global.System.Data.DataColumn("INVOICE_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NUMBER)
            Me.columnINVOICE_PROCESSED_DATE = New Global.System.Data.DataColumn("INVOICE_PROCESSED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_PROCESSED_DATE)
            Me.columnTRANSACTION_DATA_RECORD_Id = New Global.System.Data.DataColumn("TRANSACTION_DATA_RECORD_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_DATA_RECORD_Id)
            Me.columnTRANSACTION_Id = New Global.System.Data.DataColumn("TRANSACTION_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRANSACTION_DATA_RECORD_Id}, True))
            Me.columnITEM_NUMBER.AllowDBNull = False
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnCLAIM_STATUS.AllowDBNull = False
            Me.columnTRANSACTION_DATA_RECORD_Id.AutoIncrement = True
            Me.columnTRANSACTION_DATA_RECORD_Id.AllowDBNull = False
            Me.columnTRANSACTION_DATA_RECORD_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Return CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_DATA_RECORDRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanged(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanging(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleted(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleting(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_DATA_RECORDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PARTS_LISTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnITEM_NUMBER As Global.System.Data.DataColumn

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnPART_DESCRIPTION_CODE As Global.System.Data.DataColumn

        Private columnPART_COST As Global.System.Data.DataColumn

        Private columnTRANSACTION_DATA_RECORD_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PARTS_LIST"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PART_DESCRIPTION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_DESCRIPTION_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PART_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_COST
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_DATA_RECORD_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_DATA_RECORD_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PARTS_LISTRow
            Get
                Return CType(Me.Rows(index), PARTS_LISTRow)
            End Get
        End Property

        Public Event PARTS_LISTRowChanging As PARTS_LISTRowChangeEventHandler

        Public Event PARTS_LISTRowChanged As PARTS_LISTRowChangeEventHandler

        Public Event PARTS_LISTRowDeleting As PARTS_LISTRowChangeEventHandler

        Public Event PARTS_LISTRowDeleted As PARTS_LISTRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPARTS_LISTRow(ByVal row As PARTS_LISTRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPARTS_LISTRow(ByVal ITEM_NUMBER As Integer, ByVal CLAIM_NUMBER As String, ByVal PART_DESCRIPTION_CODE As String, ByVal PART_COST As Decimal, ByVal parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_PARTS_LIST As TRANSACTION_DATA_RECORDRow) As PARTS_LISTRow
            Dim rowPARTS_LISTRow As PARTS_LISTRow = CType(Me.NewRow, PARTS_LISTRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_NUMBER, CLAIM_NUMBER, PART_DESCRIPTION_CODE, PART_COST, Nothing}
            If (Not (parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_PARTS_LIST) Is Nothing) Then
                columnValuesArray(4) = parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_PARTS_LIST(10)
            End If
            rowPARTS_LISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPARTS_LISTRow)
            Return rowPARTS_LISTRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PARTS_LISTDataTable = CType(MyBase.Clone, PARTS_LISTDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PARTS_LISTDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnITEM_NUMBER = MyBase.Columns("ITEM_NUMBER")
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnPART_DESCRIPTION_CODE = MyBase.Columns("PART_DESCRIPTION_CODE")
            Me.columnPART_COST = MyBase.Columns("PART_COST")
            Me.columnTRANSACTION_DATA_RECORD_Id = MyBase.Columns("TRANSACTION_DATA_RECORD_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnITEM_NUMBER = New Global.System.Data.DataColumn("ITEM_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NUMBER)
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnPART_DESCRIPTION_CODE = New Global.System.Data.DataColumn("PART_DESCRIPTION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_DESCRIPTION_CODE)
            Me.columnPART_COST = New Global.System.Data.DataColumn("PART_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_COST)
            Me.columnTRANSACTION_DATA_RECORD_Id = New Global.System.Data.DataColumn("TRANSACTION_DATA_RECORD_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_DATA_RECORD_Id)
            Me.columnITEM_NUMBER.AllowDBNull = False
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnPART_DESCRIPTION_CODE.AllowDBNull = False
            Me.columnPART_COST.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPARTS_LISTRow() As PARTS_LISTRow
            Return CType(Me.NewRow, PARTS_LISTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PARTS_LISTRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PARTS_LISTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTS_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTS_LISTRowChanged(Me, New PARTS_LISTRowChangeEvent(CType(e.Row, PARTS_LISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTS_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTS_LISTRowChanging(Me, New PARTS_LISTRowChangeEvent(CType(e.Row, PARTS_LISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTS_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTS_LISTRowDeleted(Me, New PARTS_LISTRowChangeEvent(CType(e.Row, PARTS_LISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTS_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTS_LISTRowDeleting(Me, New PARTS_LISTRowChangeEvent(CType(e.Row, PARTS_LISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePARTS_LISTRow(ByVal row As PARTS_LISTRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PARTS_LISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class FOLLOWUPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnITEM_NUMBER As Global.System.Data.DataColumn

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnCREATE_DATE As Global.System.Data.DataColumn

        Private columnCOMMENT_TYPE_CODE As Global.System.Data.DataColumn

        Private columnCOMMENTS As Global.System.Data.DataColumn

        Private columnCALLER_NAME As Global.System.Data.DataColumn

        Private columnTRANSACTION_DATA_RECORD_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "FOLLOWUP"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property COMMENT_TYPE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT_TYPE_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CALLER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCALLER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_DATA_RECORD_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_DATA_RECORD_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As FOLLOWUPRow
            Get
                Return CType(Me.Rows(index), FOLLOWUPRow)
            End Get
        End Property

        Public Event FOLLOWUPRowChanging As FOLLOWUPRowChangeEventHandler

        Public Event FOLLOWUPRowChanged As FOLLOWUPRowChangeEventHandler

        Public Event FOLLOWUPRowDeleting As FOLLOWUPRowChangeEventHandler

        Public Event FOLLOWUPRowDeleted As FOLLOWUPRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddFOLLOWUPRow(ByVal row As FOLLOWUPRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddFOLLOWUPRow(ByVal ITEM_NUMBER As Integer, ByVal CLAIM_NUMBER As String, ByVal CREATE_DATE As Date, ByVal COMMENT_TYPE_CODE As String, ByVal COMMENTS As String, ByVal CALLER_NAME As String, ByVal parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_FOLLOWUP As TRANSACTION_DATA_RECORDRow) As FOLLOWUPRow
            Dim rowFOLLOWUPRow As FOLLOWUPRow = CType(Me.NewRow, FOLLOWUPRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_NUMBER, CLAIM_NUMBER, CREATE_DATE, COMMENT_TYPE_CODE, COMMENTS, CALLER_NAME, Nothing}
            If (Not (parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_FOLLOWUP) Is Nothing) Then
                columnValuesArray(6) = parentTRANSACTION_DATA_RECORDRowByTRANSACTION_DATA_RECORD_FOLLOWUP(10)
            End If
            rowFOLLOWUPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFOLLOWUPRow)
            Return rowFOLLOWUPRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FOLLOWUPDataTable = CType(MyBase.Clone, FOLLOWUPDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FOLLOWUPDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnITEM_NUMBER = MyBase.Columns("ITEM_NUMBER")
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnCREATE_DATE = MyBase.Columns("CREATE_DATE")
            Me.columnCOMMENT_TYPE_CODE = MyBase.Columns("COMMENT_TYPE_CODE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnCALLER_NAME = MyBase.Columns("CALLER_NAME")
            Me.columnTRANSACTION_DATA_RECORD_Id = MyBase.Columns("TRANSACTION_DATA_RECORD_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnITEM_NUMBER = New Global.System.Data.DataColumn("ITEM_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NUMBER)
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnCREATE_DATE = New Global.System.Data.DataColumn("CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE)
            Me.columnCOMMENT_TYPE_CODE = New Global.System.Data.DataColumn("COMMENT_TYPE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT_TYPE_CODE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnCALLER_NAME = New Global.System.Data.DataColumn("CALLER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCALLER_NAME)
            Me.columnTRANSACTION_DATA_RECORD_Id = New Global.System.Data.DataColumn("TRANSACTION_DATA_RECORD_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_DATA_RECORD_Id)
            Me.columnITEM_NUMBER.AllowDBNull = False
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnCREATE_DATE.AllowDBNull = False
            Me.columnCOMMENT_TYPE_CODE.AllowDBNull = False
            Me.columnCOMMENTS.AllowDBNull = False
            Me.columnCALLER_NAME.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewFOLLOWUPRow() As FOLLOWUPRow
            Return CType(Me.NewRow, FOLLOWUPRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FOLLOWUPRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FOLLOWUPRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FOLLOWUPRowChangedEvent) Is Nothing) Then
                RaiseEvent FOLLOWUPRowChanged(Me, New FOLLOWUPRowChangeEvent(CType(e.Row, FOLLOWUPRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FOLLOWUPRowChangingEvent) Is Nothing) Then
                RaiseEvent FOLLOWUPRowChanging(Me, New FOLLOWUPRowChangeEvent(CType(e.Row, FOLLOWUPRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FOLLOWUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent FOLLOWUPRowDeleted(Me, New FOLLOWUPRowChangeEvent(CType(e.Row, FOLLOWUPRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FOLLOWUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent FOLLOWUPRowDeleting(Me, New FOLLOWUPRowChangeEvent(CType(e.Row, FOLLOWUPRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveFOLLOWUPRow(ByVal row As FOLLOWUPRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSUpdateClaimDs = New GVSUpdateClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FOLLOWUPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTIONRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION As TRANSACTIONDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION = CType(Me.Table, TRANSACTIONDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION.TRANSACTION_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION.TRANSACTION_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_HEADERRows() As TRANSACTION_HEADERRow()
            If (Me.Table.ChildRelations("TRANSACTION_TRANSACTION_HEADER") Is Nothing) Then
                Return New TRANSACTION_HEADERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_TRANSACTION_HEADER")), TRANSACTION_HEADERRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_DATA_RECORDRows() As TRANSACTION_DATA_RECORDRow()
            If (Me.Table.ChildRelations("TRANSACTION_TRANSACTION_DATA_RECORD") Is Nothing) Then
                Return New TRANSACTION_DATA_RECORDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_TRANSACTION_DATA_RECORD")), TRANSACTION_DATA_RECORDRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_HEADERRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_HEADER = CType(Me.Table, TRANSACTION_HEADERDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_ID() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property FUNCTION_TYPE() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id_0() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_Id_0' in table 'TRANSACTION_HEADER' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTIONRow() As TRANSACTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_TRANSACTION_HEADER")), TRANSACTIONRow)
            End Get
            Set(ByVal value As TRANSACTIONRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_TRANSACTION_HEADER"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_Id_0Null() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_Id_0Null()
            Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_DATA_RECORDRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_DATA_RECORD = CType(Me.Table, TRANSACTION_DATA_RECORDDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_STATUS() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_STATUSColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_STATUSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property REASON_CLOSE_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.REASON_CLOSE_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REASON_CLOSE_CODE' in table 'TRANSACTION_DATA_RECORD' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.REASON_CLOSE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LABOR_AMOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.LABOR_AMOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABOR_AMOUNT' in table 'TRANSACTION_DATA_RECORD' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableTRANSACTION_DATA_RECORD.LABOR_AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRIP_AMOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.TRIP_AMOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRIP_AMOUNT' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableTRANSACTION_DATA_RECORD.TRIP_AMOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SHIPPING() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.SHIPPINGColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPPING' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tableTRANSACTION_DATA_RECORD.SHIPPINGColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property APPROVED_QUOTE_DATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.APPROVED_QUOTE_DATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APPROVED_QUOTE_DATE' in table 'TRANSACTION_DATA_RECORD' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableTRANSACTION_DATA_RECORD.APPROVED_QUOTE_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property INVOICE_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NUMBER' in table 'TRANSACTION_DATA_RECORD' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property INVOICE_PROCESSED_DATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_PROCESSED_DATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_PROCESSED_DATE' in table 'TRANSACTION_DATA_RECORD' " & _
                            "is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_PROCESSED_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORD_Id() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_DATA_RECORD_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_Id' in table 'TRANSACTION_DATA_RECORD' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTIONRow() As TRANSACTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_TRANSACTION_DATA_RECORD")), TRANSACTIONRow)
            End Get
            Set(ByVal value As TRANSACTIONRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_TRANSACTION_DATA_RECORD"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsREASON_CLOSE_CODENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.REASON_CLOSE_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetREASON_CLOSE_CODENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.REASON_CLOSE_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLABOR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.LABOR_AMOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLABOR_AMOUNTNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.LABOR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRIP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.TRIP_AMOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRIP_AMOUNTNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.TRIP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSHIPPINGNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.SHIPPINGColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSHIPPINGNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.SHIPPINGColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAPPROVED_QUOTE_DATENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.APPROVED_QUOTE_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAPPROVED_QUOTE_DATENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.APPROVED_QUOTE_DATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsINVOICE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetINVOICE_NUMBERNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsINVOICE_PROCESSED_DATENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.INVOICE_PROCESSED_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetINVOICE_PROCESSED_DATENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_PROCESSED_DATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_IdNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_IdNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetPARTS_LISTRows() As PARTS_LISTRow()
            If (Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_PARTS_LIST") Is Nothing) Then
                Return New PARTS_LISTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_PARTS_LIST")), PARTS_LISTRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetFOLLOWUPRows() As FOLLOWUPRow()
            If (Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_FOLLOWUP") Is Nothing) Then
                Return New FOLLOWUPRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_DATA_RECORD_FOLLOWUP")), FOLLOWUPRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class PARTS_LISTRow
        Inherits Global.System.Data.DataRow

        Private tablePARTS_LIST As PARTS_LISTDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTS_LIST = CType(Me.Table, PARTS_LISTDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_NUMBER() As Integer
            Get
                Return CType(Me(Me.tablePARTS_LIST.ITEM_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tablePARTS_LIST.ITEM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tablePARTS_LIST.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tablePARTS_LIST.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PART_DESCRIPTION_CODE() As String
            Get
                Return CType(Me(Me.tablePARTS_LIST.PART_DESCRIPTION_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tablePARTS_LIST.PART_DESCRIPTION_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PART_COST() As Decimal
            Get
                Return CType(Me(Me.tablePARTS_LIST.PART_COSTColumn), Decimal)
            End Get
            Set(ByVal value As Decimal)
                Me(Me.tablePARTS_LIST.PART_COSTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORD_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_DATA_RECORD_Id' in table 'PARTS_LIST' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_PARTS_LIST")), TRANSACTION_DATA_RECORDRow)
            End Get
            Set(ByVal value As TRANSACTION_DATA_RECORDRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_PARTS_LIST"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_DATA_RECORD_IdNull() As Boolean
            Return Me.IsNull(Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_DATA_RECORD_IdNull()
            Me(Me.tablePARTS_LIST.TRANSACTION_DATA_RECORD_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class FOLLOWUPRow
        Inherits Global.System.Data.DataRow

        Private tableFOLLOWUP As FOLLOWUPDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFOLLOWUP = CType(Me.Table, FOLLOWUPDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableFOLLOWUP.ITEM_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableFOLLOWUP.ITEM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tableFOLLOWUP.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableFOLLOWUP.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CREATE_DATE() As Date
            Get
                Return CType(Me(Me.tableFOLLOWUP.CREATE_DATEColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableFOLLOWUP.CREATE_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property COMMENT_TYPE_CODE() As String
            Get
                Return CType(Me(Me.tableFOLLOWUP.COMMENT_TYPE_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableFOLLOWUP.COMMENT_TYPE_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property COMMENTS() As String
            Get
                Return CType(Me(Me.tableFOLLOWUP.COMMENTSColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableFOLLOWUP.COMMENTSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CALLER_NAME() As String
            Get
                Return CType(Me(Me.tableFOLLOWUP.CALLER_NAMEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableFOLLOWUP.CALLER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORD_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_DATA_RECORD_Id' in table 'FOLLOWUP' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_FOLLOWUP")), TRANSACTION_DATA_RECORDRow)
            End Get
            Set(ByVal value As TRANSACTION_DATA_RECORDRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_DATA_RECORD_FOLLOWUP"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_DATA_RECORD_IdNull() As Boolean
            Return Me.IsNull(Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_DATA_RECORD_IdNull()
            Me(Me.tableFOLLOWUP.TRANSACTION_DATA_RECORD_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTIONRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTIONRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_HEADERRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_HEADERRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_DATA_RECORDRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_DATA_RECORDRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_DATA_RECORDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_DATA_RECORDRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class PARTS_LISTRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As PARTS_LISTRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As PARTS_LISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As PARTS_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class FOLLOWUPRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As FOLLOWUPRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As FOLLOWUPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As FOLLOWUPRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
