'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.1432.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("GVSInsertNewClaimDs"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class GVSInsertNewClaimDs
    Inherits Global.System.Data.DataSet

    Private tableTRANSACTION As TRANSACTIONDataTable

    Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

    Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

    Private relationTRANSACTION_TRANSACTION_HEADER As Global.System.Data.DataRelation

    Private relationTRANSACTION_TRANSACTION_DATA_RECORD As Global.System.Data.DataRelation

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION() As TRANSACTIONDataTable
        Get
            Return Me.tableTRANSACTION
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_HEADER() As TRANSACTION_HEADERDataTable
        Get
            Return Me.tableTRANSACTION_HEADER
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TRANSACTION_DATA_RECORD() As TRANSACTION_DATA_RECORDDataTable
        Get
            Return Me.tableTRANSACTION_DATA_RECORD
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GVSInsertNewClaimDs = CType(MyBase.Clone, GVSInsertNewClaimDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            If (Not (ds.Tables("TRANSACTION_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_HEADERDataTable(ds.Tables("TRANSACTION_HEADER")))
            End If
            If (Not (ds.Tables("TRANSACTION_DATA_RECORD")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTION_DATA_RECORDDataTable(ds.Tables("TRANSACTION_DATA_RECORD")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTRANSACTION = CType(MyBase.Tables("TRANSACTION"), TRANSACTIONDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION) Is Nothing) Then
                Me.tableTRANSACTION.InitVars()
            End If
        End If
        Me.tableTRANSACTION_HEADER = CType(MyBase.Tables("TRANSACTION_HEADER"), TRANSACTION_HEADERDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_HEADER) Is Nothing) Then
                Me.tableTRANSACTION_HEADER.InitVars()
            End If
        End If
        Me.tableTRANSACTION_DATA_RECORD = CType(MyBase.Tables("TRANSACTION_DATA_RECORD"), TRANSACTION_DATA_RECORDDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTRANSACTION_DATA_RECORD) Is Nothing) Then
                Me.tableTRANSACTION_DATA_RECORD.InitVars()
            End If
        End If
        Me.relationTRANSACTION_TRANSACTION_HEADER = Me.Relations("TRANSACTION_TRANSACTION_HEADER")
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD = Me.Relations("TRANSACTION_TRANSACTION_DATA_RECORD")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "GVSInsertNewClaimDs"
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTRANSACTION = New TRANSACTIONDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION)
        Me.tableTRANSACTION_HEADER = New TRANSACTION_HEADERDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_HEADER)
        Me.tableTRANSACTION_DATA_RECORD = New TRANSACTION_DATA_RECORDDataTable
        MyBase.Tables.Add(Me.tableTRANSACTION_DATA_RECORD)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column})
        Me.tableTRANSACTION_HEADER.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("TRANSACTION_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn})
        Me.tableTRANSACTION_DATA_RECORD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationTRANSACTION_TRANSACTION_HEADER = New Global.System.Data.DataRelation("TRANSACTION_TRANSACTION_HEADER", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column}, False)
        Me.relationTRANSACTION_TRANSACTION_HEADER.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_TRANSACTION_HEADER)
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD = New Global.System.Data.DataRelation("TRANSACTION_TRANSACTION_DATA_RECORD", New Global.System.Data.DataColumn() {Me.tableTRANSACTION.TRANSACTION_IdColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn}, False)
        Me.relationTRANSACTION_TRANSACTION_DATA_RECORD.Nested = True
        Me.Relations.Add(Me.relationTRANSACTION_TRANSACTION_DATA_RECORD)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_HEADER() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTRANSACTION_DATA_RECORD() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GVSInsertNewClaimDs = New GVSInsertNewClaimDs
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub TRANSACTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTIONRowChangeEvent)

    Public Delegate Sub TRANSACTION_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_HEADERRowChangeEvent)

    Public Delegate Sub TRANSACTION_DATA_RECORDRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTION_DATA_RECORDRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTRANSACTION_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTIONRow
            Get
                Return CType(Me.Rows(index), TRANSACTIONRow)
            End Get
        End Property

        Public Event TRANSACTIONRowChanging As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowChanged As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowDeleting As TRANSACTIONRowChangeEventHandler

        Public Event TRANSACTIONRowDeleted As TRANSACTIONRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTIONRow() As TRANSACTIONRow
            Dim rowTRANSACTIONRow As TRANSACTIONRow = CType(Me.NewRow, TRANSACTIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing}
            rowTRANSACTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTIONRow)
            Return rowTRANSACTIONRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTIONDataTable = CType(MyBase.Clone, TRANSACTIONDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTIONDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTRANSACTION_Id = MyBase.Columns("TRANSACTION_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTRANSACTION_Id = New Global.System.Data.DataColumn("TRANSACTION_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRANSACTION_Id}, True))
            Me.columnTRANSACTION_Id.AutoIncrement = True
            Me.columnTRANSACTION_Id.AllowDBNull = False
            Me.columnTRANSACTION_Id.Unique = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTIONRow() As TRANSACTIONRow
            Return CType(Me.NewRow, TRANSACTIONRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTIONRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTIONRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanged(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanging(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleted(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleting(Me, New TRANSACTIONRowChangeEvent(CType(e.Row, TRANSACTIONRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSInsertNewClaimDs = New GVSInsertNewClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTRANSACTION_ID As Global.System.Data.DataColumn

        Private columnFUNCTION_TYPE As Global.System.Data.DataColumn

        Private columnTRANSACTION_Id_0 As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_HEADER"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_ID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FUNCTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFUNCTION_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_Id_0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id_0
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_HEADERRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_HEADERRow)
            End Get
        End Property

        Public Event TRANSACTION_HEADERRowChanging As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowChanged As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleting As TRANSACTION_HEADERRowChangeEventHandler

        Public Event TRANSACTION_HEADERRowDeleted As TRANSACTION_HEADERRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_HEADERRow(ByVal TRANSACTION_ID As String, ByVal FUNCTION_TYPE As String, ByVal parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER As TRANSACTIONRow) As TRANSACTION_HEADERRow
            Dim rowTRANSACTION_HEADERRow As TRANSACTION_HEADERRow = CType(Me.NewRow, TRANSACTION_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {TRANSACTION_ID, FUNCTION_TYPE, Nothing}
            If (Not (parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER) Is Nothing) Then
                columnValuesArray(2) = parentTRANSACTIONRowByTRANSACTION_TRANSACTION_HEADER(0)
            End If
            rowTRANSACTION_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_HEADERRow)
            Return rowTRANSACTION_HEADERRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_HEADERDataTable = CType(MyBase.Clone, TRANSACTION_HEADERDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_HEADERDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTRANSACTION_ID = MyBase.Columns("TRANSACTION_ID")
            Me.columnFUNCTION_TYPE = MyBase.Columns("FUNCTION_TYPE")
            Me.columnTRANSACTION_Id_0 = MyBase.Columns("TRANSACTION_Id_0")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTRANSACTION_ID = New Global.System.Data.DataColumn("TRANSACTION_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTION_ID)
            Me.columnFUNCTION_TYPE = New Global.System.Data.DataColumn("FUNCTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFUNCTION_TYPE)
            Me.columnTRANSACTION_Id_0 = New Global.System.Data.DataColumn("TRANSACTION_Id_0", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id_0)
            Me.columnTRANSACTION_ID.AllowDBNull = False
            Me.columnFUNCTION_TYPE.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_HEADERRow() As TRANSACTION_HEADERRow
            Return CType(Me.NewRow, TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_HEADERRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_HEADERRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanged(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowChanging(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleted(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_HEADERRowDeleting(Me, New TRANSACTION_HEADERRowChangeEvent(CType(e.Row, TRANSACTION_HEADERRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_HEADERRow(ByVal row As TRANSACTION_HEADERRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSInsertNewClaimDs = New GVSInsertNewClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TRANSACTION_DATA_RECORDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnITEM_NUMBER As Global.System.Data.DataColumn

        Private columnCLAIM_NUMBER As Global.System.Data.DataColumn

        Private columnCREATED_DATE As Global.System.Data.DataColumn

        Private columnSERVICE_CENTER_CODE As Global.System.Data.DataColumn

        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn

        Private columnIDENTIFICATION_NUMBER As Global.System.Data.DataColumn

        Private columnADDRESS1 As Global.System.Data.DataColumn

        Private columnADDRESS2 As Global.System.Data.DataColumn

        Private columnCITY As Global.System.Data.DataColumn

        Private column_REGION As Global.System.Data.DataColumn

        Private columnPOSTAL_CODE As Global.System.Data.DataColumn

        Private columnHOME_PHONE As Global.System.Data.DataColumn

        Private columnWORK_PHONE As Global.System.Data.DataColumn

        Private columnEMAIL As Global.System.Data.DataColumn

        Private columnCONTACT_NAME As Global.System.Data.DataColumn

        Private columnPRODUCT_CODE As Global.System.Data.DataColumn

        Private columnDESCRIPTION As Global.System.Data.DataColumn

        Private columnITEM_DESCRIPTION As Global.System.Data.DataColumn

        Private columnSERIAL_NUMBER As Global.System.Data.DataColumn

        Private columnINVOICE_NUMBER As Global.System.Data.DataColumn

        Private columnPROBLEM_DESCRIPTION As Global.System.Data.DataColumn

        Private columnMETHOD_OF_REPAIR_CODE As Global.System.Data.DataColumn

        Private columnTRANSACTION_Id As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TRANSACTION_DATA_RECORD"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CLAIM_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAIM_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CREATED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SERVICE_CENTER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERVICE_CENTER_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDENTIFICATION_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIFICATION_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property _REGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_REGION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property POSTAL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTAL_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property HOME_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOME_PHONE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property WORK_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORK_PHONE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CONTACT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACT_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PRODUCT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ITEM_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_DESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SERIAL_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INVOICE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NUMBER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROBLEM_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROBLEM_DESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property METHOD_OF_REPAIR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMETHOD_OF_REPAIR_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSACTION_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_Id
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TRANSACTION_DATA_RECORDRow
            Get
                Return CType(Me.Rows(index), TRANSACTION_DATA_RECORDRow)
            End Get
        End Property

        Public Event TRANSACTION_DATA_RECORDRowChanging As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowChanged As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleting As TRANSACTION_DATA_RECORDRowChangeEventHandler

        Public Event TRANSACTION_DATA_RECORDRowDeleted As TRANSACTION_DATA_RECORDRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTRANSACTION_DATA_RECORDRow( _
                    ByVal ITEM_NUMBER As Integer, _
                    ByVal CLAIM_NUMBER As String, _
                    ByVal CREATED_DATE As Date, _
                    ByVal SERVICE_CENTER_CODE As String, _
                    ByVal CUSTOMER_NAME As String, _
                    ByVal IDENTIFICATION_NUMBER As String, _
                    ByVal ADDRESS1 As String, _
                    ByVal ADDRESS2 As String, _
                    ByVal CITY As String, _
                    ByVal _REGION As String, _
                    ByVal POSTAL_CODE As String, _
                    ByVal HOME_PHONE As String, _
                    ByVal WORK_PHONE As String, _
                    ByVal EMAIL As String, _
                    ByVal CONTACT_NAME As String, _
                    ByVal PRODUCT_CODE As String, _
                    ByVal DESCRIPTION As String, _
                    ByVal ITEM_DESCRIPTION As String, _
                    ByVal SERIAL_NUMBER As String, _
                    ByVal INVOICE_NUMBER As String, _
                    ByVal PROBLEM_DESCRIPTION As String, _
                    ByVal METHOD_OF_REPAIR_CODE As String, _
                    ByVal parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD As TRANSACTIONRow) As TRANSACTION_DATA_RECORDRow
            Dim rowTRANSACTION_DATA_RECORDRow As TRANSACTION_DATA_RECORDRow = CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_NUMBER, CLAIM_NUMBER, CREATED_DATE, SERVICE_CENTER_CODE, CUSTOMER_NAME, IDENTIFICATION_NUMBER, ADDRESS1, ADDRESS2, CITY, _REGION, POSTAL_CODE, HOME_PHONE, WORK_PHONE, EMAIL, CONTACT_NAME, PRODUCT_CODE, DESCRIPTION, ITEM_DESCRIPTION, SERIAL_NUMBER, INVOICE_NUMBER, PROBLEM_DESCRIPTION, METHOD_OF_REPAIR_CODE, Nothing}
            If (Not (parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD) Is Nothing) Then
                columnValuesArray(22) = parentTRANSACTIONRowByTRANSACTION_TRANSACTION_DATA_RECORD(0)
            End If
            rowTRANSACTION_DATA_RECORDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTION_DATA_RECORDRow)
            Return rowTRANSACTION_DATA_RECORDRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTION_DATA_RECORDDataTable = CType(MyBase.Clone, TRANSACTION_DATA_RECORDDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTION_DATA_RECORDDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnITEM_NUMBER = MyBase.Columns("ITEM_NUMBER")
            Me.columnCLAIM_NUMBER = MyBase.Columns("CLAIM_NUMBER")
            Me.columnCREATED_DATE = MyBase.Columns("CREATED_DATE")
            Me.columnSERVICE_CENTER_CODE = MyBase.Columns("SERVICE_CENTER_CODE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnIDENTIFICATION_NUMBER = MyBase.Columns("IDENTIFICATION_NUMBER")
            Me.columnADDRESS1 = MyBase.Columns("ADDRESS1")
            Me.columnADDRESS2 = MyBase.Columns("ADDRESS2")
            Me.columnCITY = MyBase.Columns("CITY")
            Me.column_REGION = MyBase.Columns("REGION")
            Me.columnPOSTAL_CODE = MyBase.Columns("POSTAL_CODE")
            Me.columnHOME_PHONE = MyBase.Columns("HOME_PHONE")
            Me.columnWORK_PHONE = MyBase.Columns("WORK_PHONE")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnCONTACT_NAME = MyBase.Columns("CONTACT_NAME")
            Me.columnPRODUCT_CODE = MyBase.Columns("PRODUCT_CODE")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnITEM_DESCRIPTION = MyBase.Columns("ITEM_DESCRIPTION")
            Me.columnSERIAL_NUMBER = MyBase.Columns("SERIAL_NUMBER")
            Me.columnINVOICE_NUMBER = MyBase.Columns("INVOICE_NUMBER")
            Me.columnPROBLEM_DESCRIPTION = MyBase.Columns("PROBLEM_DESCRIPTION")
            Me.columnMETHOD_OF_REPAIR_CODE = MyBase.Columns("METHOD_OF_REPAIR_CODE")
            Me.columnTRANSACTION_Id = MyBase.Columns("TRANSACTION_Id")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnITEM_NUMBER = New Global.System.Data.DataColumn("ITEM_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NUMBER)
            Me.columnCLAIM_NUMBER = New Global.System.Data.DataColumn("CLAIM_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIM_NUMBER)
            Me.columnCREATED_DATE = New Global.System.Data.DataColumn("CREATED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_DATE)
            Me.columnSERVICE_CENTER_CODE = New Global.System.Data.DataColumn("SERVICE_CENTER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERVICE_CENTER_CODE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnIDENTIFICATION_NUMBER = New Global.System.Data.DataColumn("IDENTIFICATION_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIFICATION_NUMBER)
            Me.columnADDRESS1 = New Global.System.Data.DataColumn("ADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS1)
            Me.columnADDRESS2 = New Global.System.Data.DataColumn("ADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS2)
            Me.columnCITY = New Global.System.Data.DataColumn("CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCITY)
            Me.column_REGION = New Global.System.Data.DataColumn("REGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_REGION)
            Me.columnPOSTAL_CODE = New Global.System.Data.DataColumn("POSTAL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTAL_CODE)
            Me.columnHOME_PHONE = New Global.System.Data.DataColumn("HOME_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOME_PHONE)
            Me.columnWORK_PHONE = New Global.System.Data.DataColumn("WORK_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORK_PHONE)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnCONTACT_NAME = New Global.System.Data.DataColumn("CONTACT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACT_NAME)
            Me.columnPRODUCT_CODE = New Global.System.Data.DataColumn("PRODUCT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_CODE)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnITEM_DESCRIPTION = New Global.System.Data.DataColumn("ITEM_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_DESCRIPTION)
            Me.columnSERIAL_NUMBER = New Global.System.Data.DataColumn("SERIAL_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_NUMBER)
            Me.columnINVOICE_NUMBER = New Global.System.Data.DataColumn("INVOICE_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NUMBER)
            Me.columnPROBLEM_DESCRIPTION = New Global.System.Data.DataColumn("PROBLEM_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROBLEM_DESCRIPTION)
            Me.columnMETHOD_OF_REPAIR_CODE = New Global.System.Data.DataColumn("METHOD_OF_REPAIR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMETHOD_OF_REPAIR_CODE)
            Me.columnTRANSACTION_Id = New Global.System.Data.DataColumn("TRANSACTION_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTRANSACTION_Id)
            Me.columnITEM_NUMBER.AllowDBNull = False
            Me.columnCLAIM_NUMBER.AllowDBNull = False
            Me.columnCREATED_DATE.AllowDBNull = False
            Me.columnSERVICE_CENTER_CODE.AllowDBNull = False
            Me.columnCUSTOMER_NAME.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTRANSACTION_DATA_RECORDRow() As TRANSACTION_DATA_RECORDRow
            Return CType(Me.NewRow, TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTION_DATA_RECORDRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTION_DATA_RECORDRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanged(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowChanging(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleted(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTION_DATA_RECORDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTION_DATA_RECORDRowDeleting(Me, New TRANSACTION_DATA_RECORDRowChangeEvent(CType(e.Row, TRANSACTION_DATA_RECORDRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTRANSACTION_DATA_RECORDRow(ByVal row As TRANSACTION_DATA_RECORDRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GVSInsertNewClaimDs = New GVSInsertNewClaimDs
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTION_DATA_RECORDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTIONRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION As TRANSACTIONDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION = CType(Me.Table, TRANSACTIONDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION.TRANSACTION_IdColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION.TRANSACTION_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_HEADERRows() As TRANSACTION_HEADERRow()
            If (Me.Table.ChildRelations("TRANSACTION_TRANSACTION_HEADER") Is Nothing) Then
                Return New TRANSACTION_HEADERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_TRANSACTION_HEADER")), TRANSACTION_HEADERRow())
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function GetTRANSACTION_DATA_RECORDRows() As TRANSACTION_DATA_RECORDRow()
            If (Me.Table.ChildRelations("TRANSACTION_TRANSACTION_DATA_RECORD") Is Nothing) Then
                Return New TRANSACTION_DATA_RECORDRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TRANSACTION_TRANSACTION_DATA_RECORD")), TRANSACTION_DATA_RECORDRow())
            End If
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_HEADERRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_HEADER As TRANSACTION_HEADERDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_HEADER = CType(Me.Table, TRANSACTION_HEADERDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_ID() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.TRANSACTION_IDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property FUNCTION_TYPE() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_HEADER.FUNCTION_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id_0() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_Id_0' in table 'TRANSACTION_HEADER' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTIONRow() As TRANSACTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_TRANSACTION_HEADER")), TRANSACTIONRow)
            End Get
            Set(ByVal value As TRANSACTIONRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_TRANSACTION_HEADER"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_Id_0Null() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_Id_0Null()
            Me(Me.tableTRANSACTION_HEADER.TRANSACTION_Id_0Column) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TRANSACTION_DATA_RECORDRow
        Inherits Global.System.Data.DataRow

        Private tableTRANSACTION_DATA_RECORD As TRANSACTION_DATA_RECORDDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION_DATA_RECORD = CType(Me.Table, TRANSACTION_DATA_RECORDDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn), Integer)
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CLAIM_NUMBER() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_NUMBERColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CLAIM_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CREATED_DATE() As Date
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CREATED_DATEColumn), Date)
            End Get
            Set(ByVal value As Date)
                Me(Me.tableTRANSACTION_DATA_RECORD.CREATED_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SERVICE_CENTER_CODE() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.SERVICE_CENTER_CODEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.SERVICE_CENTER_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CUSTOMER_NAME() As String
            Get
                Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CUSTOMER_NAMEColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CUSTOMER_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property IDENTIFICATION_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.IDENTIFICATION_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTIFICATION_NUMBER' in table 'TRANSACTION_DATA_RECORD' i" & _
                            "s DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.IDENTIFICATION_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ADDRESS1() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS1Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS1' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ADDRESS2() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS2' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CITY() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CITYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CITY' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CITYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property _REGION() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD._REGIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REGION' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD._REGIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property POSTAL_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.POSTAL_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSTAL_CODE' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.POSTAL_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property HOME_PHONE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.HOME_PHONEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOME_PHONE' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.HOME_PHONEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property WORK_PHONE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.WORK_PHONEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WORK_PHONE' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.WORK_PHONEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EMAIL() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.EMAILColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.EMAILColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CONTACT_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.CONTACT_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTACT_NAME' in table 'TRANSACTION_DATA_RECORD' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.CONTACT_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PRODUCT_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.PRODUCT_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCT_CODE' in table 'TRANSACTION_DATA_RECORD' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.PRODUCT_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'TRANSACTION_DATA_RECORD' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ITEM_DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_DESCRIPTION' in table 'TRANSACTION_DATA_RECORD' is DBN" & _
                            "ull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SERIAL_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.SERIAL_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_NUMBER' in table 'TRANSACTION_DATA_RECORD' is DBNull" & _
                            ".", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.SERIAL_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property INVOICE_NUMBER() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NUMBER' in table 'TRANSACTION_DATA_RECORD' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROBLEM_DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.PROBLEM_DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROBLEM_DESCRIPTION' in table 'TRANSACTION_DATA_RECORD' is " & _
                            "DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.PROBLEM_DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property METHOD_OF_REPAIR_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.METHOD_OF_REPAIR_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'METHOD_OF_REPAIR_CODE' in table 'TRANSACTION_DATA_RECORD' i" & _
                            "s DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableTRANSACTION_DATA_RECORD.METHOD_OF_REPAIR_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTION_Id() As Integer
            Get
                Try
                    Return CType(Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSACTION_Id' in table 'TRANSACTION_DATA_RECORD' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSACTIONRow() As TRANSACTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TRANSACTION_TRANSACTION_DATA_RECORD")), TRANSACTIONRow)
            End Get
            Set(ByVal value As TRANSACTIONRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("TRANSACTION_TRANSACTION_DATA_RECORD"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsIDENTIFICATION_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.IDENTIFICATION_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetIDENTIFICATION_NUMBERNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.IDENTIFICATION_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsADDRESS1Null() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.ADDRESS1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetADDRESS1Null()
            Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.ADDRESS2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetADDRESS2Null()
            Me(Me.tableTRANSACTION_DATA_RECORD.ADDRESS2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.CITYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCITYNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.CITYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD._REGIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Set_REGIONNull()
            Me(Me.tableTRANSACTION_DATA_RECORD._REGIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPOSTAL_CODENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.POSTAL_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPOSTAL_CODENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.POSTAL_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsHOME_PHONENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.HOME_PHONEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetHOME_PHONENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.HOME_PHONEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsWORK_PHONENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.WORK_PHONEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetWORK_PHONENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.WORK_PHONEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.EMAILColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEMAILNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.EMAILColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCONTACT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.CONTACT_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCONTACT_NAMENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.CONTACT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPRODUCT_CODENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.PRODUCT_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPRODUCT_CODENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.PRODUCT_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsITEM_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.ITEM_DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetITEM_DESCRIPTIONNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.ITEM_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSERIAL_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.SERIAL_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSERIAL_NUMBERNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.SERIAL_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsINVOICE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetINVOICE_NUMBERNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.INVOICE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROBLEM_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.PROBLEM_DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROBLEM_DESCRIPTIONNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.PROBLEM_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsMETHOD_OF_REPAIR_CODENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.METHOD_OF_REPAIR_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetMETHOD_OF_REPAIR_CODENull()
            Me(Me.tableTRANSACTION_DATA_RECORD.METHOD_OF_REPAIR_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSACTION_IdNull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSACTION_IdNull()
            Me(Me.tableTRANSACTION_DATA_RECORD.TRANSACTION_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTIONRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTIONRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_HEADERRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_HEADERRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TRANSACTION_DATA_RECORDRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TRANSACTION_DATA_RECORDRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TRANSACTION_DATA_RECORDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TRANSACTION_DATA_RECORDRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
