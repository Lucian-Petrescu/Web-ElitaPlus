'************* THIS CODE HAS BEEN GENERATED FROM TEMPLATE BusinessObject.cst (7/20/2004)  ********************

Imports Common = Assurant.ElitaPlus.Common

Public Class Contract
    Inherits BusinessObjectBase

#Region "Constructors"

    'Exiting BO
    Public Sub New(id As Guid)
        MyBase.New()
        Dataset = New DataSet
        Load(id)
    End Sub

    'New BO
    Public Sub New()
        MyBase.New()
        Dataset = New DataSet
        Load()
    End Sub

    'Exiting BO attaching to a BO family
    Public Sub New(id As Guid, familyDS As DataSet)
        MyBase.New(False)
        Dataset = familyDS
        Load(id)
    End Sub

    'New BO attaching to a BO family
    Public Sub New(familyDS As DataSet)
        MyBase.New(False)
        Dataset = familyDS
        Load()
    End Sub

    Protected Sub Load()
        Try
            Dim dal As New ContractDAL
            If Dataset.Tables.IndexOf(dal.TABLE_NAME) < 0 Then
                dal.LoadSchema(Dataset)
            End If
            Dim newRow As DataRow = Dataset.Tables(dal.TABLE_NAME).NewRow
            Dataset.Tables(dal.TABLE_NAME).Rows.Add(newRow)
            Row = newRow
            setvalue(dal.TABLE_KEY_NAME, Guid.NewGuid)
            Initialize() 'Code added manually
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try
    End Sub

    Protected Sub Load(id As Guid)
        Try
            Dim dal As New ContractDAL
            'This code was added manually. Begin
            If _isDSCreator Then
                If Row IsNot Nothing Then
                    Dataset.Tables(ContractDAL.TABLE_NAME).Rows.Remove(Row)
                End If
            End If
            'This code was added Manually. End
            Row = Nothing

            If Dataset.Tables.IndexOf(dal.TABLE_NAME) >= 0 Then
                Row = FindRow(id, dal.TABLE_KEY_NAME, Dataset.Tables(dal.TABLE_NAME))
            End If
            If Row Is Nothing Then 'it is not in the dataset, so will bring it from the db
                dal.Load(Dataset, id)
                Row = FindRow(id, dal.TABLE_KEY_NAME, Dataset.Tables(dal.TABLE_NAME))
            End If
            If Row Is Nothing Then
                Throw New DataNotFoundException
            End If
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try
    End Sub

#End Region

#Region "Constants"
    Public Const COINSURANCE_DIRECT As String = "3"
    Public Const COINSURANCE_CEDED As String = "1"
    Public Const COINSURANCE_ASSUMED As String = "2"
    Public Const COMPANY_TYPE_INSURANCE As String = "1"
    Private Const AUTO_GEN_SEQ_POL_NUM_KEY = "POL_NUM"
    Private Const AUTO_GEN_SEQ_POL_NUM_SOURCE = "DEALER_CONTRACT"
#End Region

#Region "Private Members"

    ' Ind Policy. For restoring auto generate seq#
    Private _autoGenerateSequenceKey As String
    Private _autoGeneratedSequenceNum As Long
    Private _countryId As Guid


    Private Sub Initialize()
        AdminExpense = New DecimalType(0)
        ProfitPercent = New DecimalType(0)
        MarketingPercent = New DecimalType(0)
        CommissionsPercent = New DecimalType(0)
        LossCostPercent = New DecimalType(0)
        RemainingMFGDays = New LongType(0)
        WarrantyMaxDelay = New LongType(0)
        RemainingMFGDays = New LongType(0)
        WaitingPeriod = New LongType(0)
        Deductible = New DecimalType(0)
        DeductiblePercent = New DecimalType(0)
        MinReplacementCost = New DecimalType(0)
        RestrictMarkupId = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        AllowCoverageMarkupDistribution = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        ClaimControlID = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        IgnoreIncomingPremiumID = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        CoinsuranceId = LookupListNew.GetIdFromCode(LookupListCache.LK_COINSURANCE, COINSURANCE_DIRECT)
        CurrencyConversionId = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        PayOutstandingPremiumId = LookupListNew.GetIdFromCode(LookupListCache.LK_LANG_INDEPENDENT_YES_NO, "N")
        DeductibleBasedOnId = LookupListNew.GetIdFromCode(LookupListCache.LK_DEDUCTIBLE_BASED_ON, "FIXED")
        ProRataMethodId = LookupListNew.GetIdFromCode(LookupListCache.LK_PRO_RATA_METHOD, Codes.PRO_RATA_METHOD_NPR)
        AllowMultipleRejectionsId = LookupListNew.GetIdFromCode(LookupListCache.LK_ALLOW_CC_REJECTIONS, Codes.ALLOW_CC_REJECTIONS_NO)
        RdoPercent = New DecimalType(0)

    End Sub

#End Region

#Region "Properties"

    'Key Property
    Public ReadOnly Property Id As Guid
        Get
            If Row(ContractDAL.TABLE_KEY_NAME) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CONTRACT_ID), Byte()))
            End If
        End Get
    End Property

    <ValueMandatory("")>
    Public Property DealerId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEALER_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DEALER_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEALER_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property DeductibleBasedOnId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEDUCTIBLE_BASED_ON_ID) Is DBNull.Value Then
                Return Guid.Empty
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DEDUCTIBLE_BASED_ON_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEDUCTIBLE_BASED_ON_ID, value)
        End Set
    End Property
    Public Property DeductibleExpressionId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEDUCTIBLE_EXPRESSION_ID) Is DBNull.Value Then
                Return Guid.Empty
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DEDUCTIBLE_EXPRESSION_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEDUCTIBLE_EXPRESSION_ID, value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property ContractTypeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CONTRACT_TYPE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CONTRACT_TYPE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CONTRACT_TYPE_ID, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidEffectiveAndExpirationDate("")>
    Public Property Effective As DateType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EFFECTIVE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DateType(CType(Row(ContractDAL.COL_NAME_EFFECTIVE), Date))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EFFECTIVE, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property Expiration As DateType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EXPIRATION) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DateType(CType(Row(ContractDAL.COL_NAME_EXPIRATION), Date))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EXPIRATION, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property CommissionsPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COMMISSIONS_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_COMMISSIONS_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COMMISSIONS_PERCENT, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property MarketingPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_MARKETING_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_MARKETING_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_MARKETING_PERCENT, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property AdminExpense As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ADMIN_EXPENSE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_ADMIN_EXPENSE), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ADMIN_EXPENSE, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property ProfitPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PROFIT_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_PROFIT_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PROFIT_PERCENT, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property LossCostPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_LOSS_COST_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_LOSS_COST_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_LOSS_COST_PERCENT, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property CurrencyId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CURRENCY_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CURRENCY_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CURRENCY_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property TypeOfMarketingId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_TYPE_OF_MARKETING_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_TYPE_OF_MARKETING_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_TYPE_OF_MARKETING_ID, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property TypeOfEquipmentId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_TYPE_OF_EQUIPMENT_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_TYPE_OF_EQUIPMENT_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_TYPE_OF_EQUIPMENT_ID, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property TypeOfInsuranceId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_TYPE_OF_INSURANCE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_TYPE_OF_INSURANCE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_TYPE_OF_INSURANCE_ID, Value)
        End Set
    End Property

    <ValidNumericRange("", Max:=NEW_MAX_DOUBLE)>
    Public Property MinReplacementCost As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_MIN_REPLACEMENT_COST) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_MIN_REPLACEMENT_COST), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_MIN_REPLACEMENT_COST, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Max:=9999)>
    Public Property WarrantyMaxDelay As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_WARRANTY_MAX_DELAY) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_WARRANTY_MAX_DELAY), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_WARRANTY_MAX_DELAY, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=999)>
    Public Property RemainingMFGDays As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_REMAINING_MFG_DAYS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_REMAINING_MFG_DAYS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_REMAINING_MFG_DAYS, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property NetCommissionsId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NET_COMMISSIONS_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_NET_COMMISSIONS_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NET_COMMISSIONS_ID, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property NetMarketingId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NET_MARKETING_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_NET_MARKETING_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NET_MARKETING_ID, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property NetTaxesId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NET_TAXES_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_NET_TAXES_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NET_TAXES_ID, Value)
        End Set
    End Property


    <ValidNumericRange("", Min:=0, Max:=NEW_MAX_DOUBLE)>
    Public Property Deductible As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEDUCTIBLE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_DEDUCTIBLE), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEDUCTIBLE, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidNumericRange("", Max:=99)>
    Public Property WaitingPeriod As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_WAITING_PERIOD) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_WAITING_PERIOD), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_WAITING_PERIOD, Value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property FundingSourceId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_FUNDING_SOURCE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_FUNDING_SOURCE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_FUNDING_SOURCE_ID, Value)
        End Set
    End Property

    <ValueMandatory("", Message:="Policy Number is required."), ValidStringLength("", Max:=12, Message:="Policy number should be between 1 to 12 chars.")>
    Public Property Policy As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_POLICY) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_POLICY), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_POLICY, Value)
        End Set

    End Property

    'Req -1016 Start
    '<ValueMandatory("")> _
    'Public Property MonthlyBillingId() As Guid
    '    Get
    '        CheckDeleted()
    '        If Row(ContractDAL.COL_NAME_MONTHLY_BILLING_ID) Is DBNull.Value Then
    '            Return Nothing
    '        Else
    '            Return New Guid(CType(Row(ContractDAL.COL_NAME_MONTHLY_BILLING_ID), Byte()))
    '        End If
    '    End Get
    '    Set(ByVal Value As Guid)
    '        CheckDeleted()
    '        Me.SetValue(ContractDAL.COL_NAME_MONTHLY_BILLING_ID, Value)
    '    End Set
    'End Property

    <ValueMandatory("")>
    Public Property RecurringPremiumId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RECURRING_PREMIUM_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_RECURRING_PREMIUM_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RECURRING_PREMIUM_ID, Value)
        End Set
    End Property
    'Req -1016 end

    <ValueMandatory("")>
    Public Property IgnoreCoverageAmtId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_IGNORE_COVERAGE_AMT_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_IGNORE_COVERAGE_AMT_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_IGNORE_COVERAGE_AMT_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property BackEndClaimsAllowedId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_BACKEND_CLAIMS_ALLOWED_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_BACKEND_CLAIMS_ALLOWED_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_BACKEND_CLAIMS_ALLOWED_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property EditModelId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EDIT_MODEL_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_EDIT_MODEL_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EDIT_MODEL_ID, Value)
        End Set
    End Property


    <ValueMandatory(""), ValidDealerMarkup(""), ValidDealerMarkupAndRestrictMarkup("")>
    Public Property DealerMarkupId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEALER_MARKUP_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DEALER_MARKUP_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEALER_MARKUP_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property FixedEscDurationFlag As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_FIXED_ESC_DURATION_FLAG) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_FIXED_ESC_DURATION_FLAG), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_FIXED_ESC_DURATION_FLAG, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property AutoMfgCoverageId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_AUTO_MFG_COVERAGE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_AUTO_MFG_COVERAGE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_AUTO_MFG_COVERAGE_ID, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property RestrictMarkupId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RESTRICT_MARKUP_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_RESTRICT_MARKUP_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RESTRICT_MARKUP_ID, Value)
        End Set
    End Property


    <ValidStringLength("", Max:=20)>
    Public Property Layout As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_LAYOUT) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_LAYOUT), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_LAYOUT, Value)
        End Set
    End Property



    <MandatoryForMonthlyBillingAttribute(""), ValidNumericRange("", Max:=9999)>
    Public Property SuspenseDays As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_SUSPENSE_DAYS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_SUSPENSE_DAYS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_SUSPENSE_DAYS, Value)
        End Set
    End Property

    <MandatoryForMonthlyBillingAttribute(""), ValidNumericRange("", Max:=9999)>
    Public Property CancellationDays As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CANCELLATION_DAYS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_CANCELLATION_DAYS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CANCELLATION_DAYS, Value)
        End Set
    End Property

    Public ReadOnly Property OriginalEffectiveDate As DateType
        Get
            Return New DateType(CType(Row(ContractDAL.COL_NAME_EFFECTIVE, DataRowVersion.Original), Date))
        End Get
    End Property

    Public ReadOnly Property OriginalExpirationDate As DateType
        Get
            Return New DateType(CType(Row(ContractDAL.COL_NAME_EXPIRATION, DataRowVersion.Original), Date))
        End Get
    End Property


    <ValidStringLength("", Max:=4000)>
    Public Property Comment1 As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COMMENT1) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_COMMENT1), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COMMENT1, Value)
        End Set
    End Property

    Public ReadOnly Property IsLastContract As Boolean
        Get
            Dim minMax As New MinEffectiveMaxExpiration(Me)
            Return minMax.IsLast
        End Get
    End Property

    <ValueMandatory("")>
    Public Property ReplacementPolicyId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_REPLACEMENT_POLICY_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_REPLACEMENT_POLICY_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_REPLACEMENT_POLICY_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property CancellationReasonId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CONCELLATION_REASON_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CONCELLATION_REASON_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CONCELLATION_REASON_ID, Value)
        End Set
    End Property

    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=999)>
    Public Property FullRefundDays As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_FULL_REFUND_DAYS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_FULL_REFUND_DAYS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_FULL_REFUND_DAYS, Value)
        End Set
    End Property


    <ValueMandatory("")>
    Public Property CoinsuranceId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COINSURANCE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_COINSURANCE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COINSURANCE_ID, Value)
        End Set
    End Property

    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=False)>
    Public Property ParticipationPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PARTICIPATION_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_PARTICIPATION_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PARTICIPATION_PERCENT, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=99)>
    Public Property RatingPlan As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RATING_PLAN) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_RATING_PLAN), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RATING_PLAN, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property ID_Validation_Id As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ID_VALIDATION_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ID_VALIDATION_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ID_VALIDATION_ID, Value)
        End Set
    End Property

    <MandatoryAcselProdCodeAttribute("")>
    Public Property Acsel_Prod_Code_Id As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ACSEL_PROD_CODE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ACSEL_PROD_CODE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ACSEL_PROD_CODE_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property ClaimControlID As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CLAIM_CONTROL_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CLAIM_CONTROL_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CLAIM_CONTROL_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property IgnoreIncomingPremiumID As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_IGNORE_INCOMING_PREMIUM_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_IGNORE_INCOMING_PREMIUM_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_IGNORE_INCOMING_PREMIUM_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property ProRataMethodId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PRO_RATA_METHOD_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_PRO_RATA_METHOD_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PRO_RATA_METHOD_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property CurrencyConversionId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CURRENCY_CONVERSION_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CURRENCY_CONVERSION_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CURRENCY_CONVERSION_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property CurrencyOfCoveragesId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CURRENCY_OF_COVERAGES_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CURRENCY_OF_COVERAGES_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CURRENCY_OF_COVERAGES_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property AutoSetLiabilityId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_AUTO_SET_LIABILITY_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_AUTO_SET_LIABILITY_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_AUTO_SET_LIABILITY_ID, Value)
        End Set
    End Property

    Public Property PayOutstandingPremiumId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PAY_OUTSTANDING_PREMIUM_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_PAY_OUTSTANDING_PREMIUM_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PAY_OUTSTANDING_PREMIUM_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property InstallmentPaymentId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_INSTALLMENT_PAYMENT_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_INSTALLMENT_PAYMENT_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_INSTALLMENT_PAYMENT_ID, Value)
        End Set
    End Property

    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=999, MaxExclusive:=False, MinExclusive:=False)>
    Public Property DaysOfFirstPymt As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DAYS_OF_FIRST_PYMT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_DAYS_OF_FIRST_PYMT), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DAYS_OF_FIRST_PYMT, Value)
        End Set
    End Property

    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property DaysToSendLetter As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DAYS_TO_SEND_LETTER) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_DAYS_TO_SEND_LETTER), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DAYS_TO_SEND_LETTER, Value)
        End Set
    End Property

    <ValueMandatory(""), ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property DaysToCancelCert As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DAYS_TO_CANCEL_CERT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_DAYS_TO_CANCEL_CERT), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DAYS_TO_CANCEL_CERT, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=False)>
    Public Property DeductiblePercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEDUCTIBLE_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_DEDUCTIBLE_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEDUCTIBLE_PERCENT, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property CoverageDeductibleId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COVERAGE_DEDUCTIBLE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_COVERAGE_DEDUCTIBLE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COVERAGE_DEDUCTIBLE_ID, Value)
        End Set
    End Property
    <ValidNumericRange("", Max:=9999)>
    Public Property RepairDiscountPct As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_REPAIR_DISCOUNT_PCT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_REPAIR_DISCOUNT_PCT), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_REPAIR_DISCOUNT_PCT, Value)
        End Set
    End Property
    <ValidNumericRange("", Max:=9999)>
    Public Property ReplacementDiscountPct As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_REPLACEMENT_DISCOUNT_PCT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_REPLACEMENT_DISCOUNT_PCT), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_REPLACEMENT_DISCOUNT_PCT, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property EditMFGTermId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EDIT_MFG_TERM_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_EDIT_MFG_TERM_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EDIT_MFG_TERM_ID, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property DeductibleByManufacturerId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DEDUCT_BY_MFG_ID) Is DBNull.Value Then
                Return Guid.Empty
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DEDUCT_BY_MFG_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DEDUCT_BY_MFG_ID, Value)
        End Set
    End Property

    Public Property AcctBusinessUnitId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ACCT_BUSINESS_UNIT_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ACCT_BUSINESS_UNIT_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ACCT_BUSINESS_UNIT_ID, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=False)>
    Public Property PenaltyPct As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PENALTY_PCT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_PENALTY_PCT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PENALTY_PCT, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property IsCommPCodeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_IS_COMM_P_CODE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_IS_COMM_P_CODE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_IS_COMM_P_CODE_ID, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=False), ValidCLIPPercent("")>
    Public Property ClipPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CLIP_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_CLIP_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CLIP_PERCENT, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute("")>
    Public Property BaseInstallments As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_BASE_INSTALLMENTS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_BASE_INSTALLMENTS), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_BASE_INSTALLMENTS, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute("")>
    Public Property BillingCycleFrequency As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_BILLING_CYCLE_FREQUENCY) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_BILLING_CYCLE_FREQUENCY), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_BILLING_CYCLE_FREQUENCY, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute(""), ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property InstallmentsBaseReducer As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_INSTALLMENTS_BASE_REDUCER) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_INSTALLMENTS_BASE_REDUCER), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_INSTALLMENTS_BASE_REDUCER, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute(""), ValidNumericRange("", Min:=1, Max:=99, MaxExclusive:=False)>
    Public Property MaxInstallments As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_MAX_INSTALLMENTS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_MAX_INSTALLMENTS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_MAX_INSTALLMENTS, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute(""), ValidNumericRange("", Min:=1, Max:=99, MaxExclusive:=False)>
    Public Property PastDueMonthsAllowed As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PAST_DUE_MONTHS_ALLOWED) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_PAST_DUE_MONTHS_ALLOWED), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PAST_DUE_MONTHS_ALLOWED, Value)
        End Set
    End Property

    <MandatoryForInstallmentPaymentAttribute(""), ValidNumericRange("", Min:=1, Max:=99, MaxExclusive:=False)>
    Public Property CollectionReAttempts As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COLLECTION_RE_ATTEMPTS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_COLLECTION_RE_ATTEMPTS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COLLECTION_RE_ATTEMPTS, Value)
        End Set
    End Property

    Public Property IncludeFirstPmt As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_INCLUDE_FIRST_PMT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_INCLUDE_FIRST_PMT), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_INCLUDE_FIRST_PMT, Value)
        End Set
    End Property

    Public Property CollectionCycleTypeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COLLECTION_CYCLE_TYPE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_COLLECTION_CYCLE_TYPE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COLLECTION_CYCLE_TYPE_ID, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=1, Max:=28, MaxExclusive:=False)>
    Public Property CycleDay As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CYCLE_DAY) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_CYCLE_DAY), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CYCLE_DAY, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=60, MaxExclusive:=False), ValidOffSetBeforeDueDate("")>
    Public Property OffsetBeforeDueDate As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_OFFSET_BEFORE_DUE_DATE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_OFFSET_BEFORE_DUE_DATE), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_OFFSET_BEFORE_DUE_DATE, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=999, MaxExclusive:=False)>
    Public Property InsPremiumFactor As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_INS_PREMIUM_FACTOR) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_INS_PREMIUM_FACTOR), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_INS_PREMIUM_FACTOR, Value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property ExtendCoverageId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EXTEND_COVERAGE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_EXTEND_COVERAGE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EXTEND_COVERAGE_ID, Value)
        End Set
    End Property


    <ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property ExtraMonsToExtendCoverage As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EXTRA_MONS_TO_EXTEND_COVERAGE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_EXTRA_MONS_TO_EXTEND_COVERAGE), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EXTRA_MONS_TO_EXTEND_COVERAGE, Value)
        End Set
    End Property


    <ValidNumericRange("", Min:=0, Max:=9999, MaxExclusive:=False)>
    Public Property ExtraDaysToExtendCoverage As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_EXTRA_DAYS_TO_EXTEND_COVERAGE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_EXTRA_DAYS_TO_EXTEND_COVERAGE), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_EXTRA_DAYS_TO_EXTEND_COVERAGE, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property AllowDifferentCoverage As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_DIFFERENT_COVERAGE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_DIFFERENT_COVERAGE), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_DIFFERENT_COVERAGE, Value)
        End Set
    End Property

    'Added for Req-635
    <ValueMandatory("")>
    Public Property AllowNoExtended As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_NO_EXTENDED) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_NO_EXTENDED), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_NO_EXTENDED, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=9999), ValidClaimLimitConfig("")> <NumOfClaimsValidation("")>
    Public Property NumOfClaims As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NUM_OF_CLAIMS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_NUM_OF_CLAIMS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NUM_OF_CLAIMS, Value)
        End Set
    End Property

    Public Property ClaimLimitBasedOnId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CLAIM_LIMIT_BASED_ON_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CLAIM_LIMIT_BASED_ON_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CLAIM_LIMIT_BASED_ON_ID, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=999, MaxExclusive:=False)>
    Public Property DaysToReportClaim As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DAYS_TO_REPORT_CLAIM) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_DAYS_TO_REPORT_CLAIM), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DAYS_TO_REPORT_CLAIM, Value)
        End Set
    End Property
    'Req-703 Start
    Public Property MarketingPromotionId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_MARKETING_PROMO_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_MARKETING_PROMO_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_MARKETING_PROMO_ID, Value)
        End Set
    End Property
    'Req-703 End
    <ValueMandatory("")>
    Public Property CustmerAddressRequiredId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_CUST_ADDRESS_REQUIRED_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_CUST_ADDRESS_REQUIRED_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_CUST_ADDRESS_REQUIRED_ID, Value)
        End Set
    End Property

    <ValueMandatory("")> <ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property FirstPymtMonths As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_FIRST_PYMT_MONTHS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_FIRST_PYMT_MONTHS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_FIRST_PYMT_MONTHS, Value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property AllowMultipleRejectionsId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_MULTIPLE_REJECTIONS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_MULTIPLE_REJECTIONS), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_MULTIPLE_REJECTIONS, Value)
        End Set
    End Property

    ''REQ-794
    'The below lines of code is commented for def-1861
    'Public Property IgnoreCoverageRateId() As Guid
    '    Get
    '        CheckDeleted()
    '        If Row(ContractDAL.COL_IGNORE_COVERAGE_RATE_ID) Is DBNull.Value Then
    '            Return Nothing
    '        Else
    '            Return New Guid(CType(Row(ContractDAL.COL_IGNORE_COVERAGE_RATE_ID), Byte()))
    '        End If
    '    End Get
    '    Set(ByVal Value As Guid)
    '        CheckDeleted()
    '        Me.SetValue(ContractDAL.COL_IGNORE_COVERAGE_RATE_ID, Value)
    '    End Set
    'End Property

    <ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property AuthorizedAmountMaxUpdates As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_AUTHORIZED_AMOUNT_MAX_UPDATES) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_AUTHORIZED_AMOUNT_MAX_UPDATES), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_AUTHORIZED_AMOUNT_MAX_UPDATES, Value)
        End Set
    End Property

    'Req - 1016 Start
    <MandatoryForMonthlyBillingAttribute(""), ValidWarrantyPeriod(""), ValidNumericRange("", Min:=1, Max:=9999)>
    Public Property RecurringWarrantyPeriod As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RECURRING_WARRANTY_PERIOD) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_RECURRING_WARRANTY_PERIOD), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RECURRING_WARRANTY_PERIOD, Value)
        End Set
    End Property
    'Req - 1016 End

    Public Property AllowPymtSkipMonths As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_PYMT_SKIP_MONTHS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_PYMT_SKIP_MONTHS), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_PYMT_SKIP_MONTHS, Value)
        End Set
    End Property
    'REQ-1050 start
    'DEF-2507 remove the Mandatory Field Option
    <ValidNumericRange("", Max:=9999)>
    Public Property DaysToReactivate As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NUMBER_OF_DAYS_TO_REACTIVATE) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_NUMBER_OF_DAYS_TO_REACTIVATE), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NUMBER_OF_DAYS_TO_REACTIVATE, Value)
        End Set
    End Property
    'REQ-1050 END

    Public Property BillingCycleTypeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_BILLING_CYCLE_TYPE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_BILLING_CYCLE_TYPE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_BILLING_CYCLE_TYPE_ID, Value)
        End Set
    End Property

    Public Property DailyRateBasedOnId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_DAILY_RATE_BASED_ON_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_DAILY_RATE_BASED_ON_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_DAILY_RATE_BASED_ON_ID, Value)
        End Set
    End Property

    Public Property AllowBillingAfterCancellation As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_BILLING_AFTER_CANCELLATION) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_BILLING_AFTER_CANCELLATION), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_BILLING_AFTER_CANCELLATION, Value)
        End Set
    End Property

    Public Property AllowCollectionAfterCancellation As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_COLLECTION_AFTER_CANCELLATION) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_COLLECTION_AFTER_CANCELLATION), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_COLLECTION_AFTER_CANCELLATION, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property AllowCoverageMarkupDistribution As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ALLOW_COVERAGE_MARKUP_DISTRIBUTION) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_ALLOW_COVERAGE_MARKUP_DISTRIBUTION), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ALLOW_COVERAGE_MARKUP_DISTRIBUTION, Value)
        End Set
    End Property

    <ValueMandatory("")>
    Public Property FutureDateAllowForID As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_FUTURE_DATE_ALLOW_FOR_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_FUTURE_DATE_ALLOW_FOR_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_FUTURE_DATE_ALLOW_FOR_ID, Value)
        End Set
    End Property


    'REQ-1333
    <ValidNumericRange("", Min:=0, Max:=99, MaxExclusive:=False)>
    Public Property ReplacementPolicyClaimCount As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_REPLACEMENT_POLICY_CLAIM_COUNT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_REPLACEMENT_POLICY_CLAIM_COUNT), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_REPLACEMENT_POLICY_CLAIM_COUNT, Value)
        End Set
    End Property

    'REQ-1344/DEF-21932
    <ValueMandatory("")>
    Public Property IgnoreWaitingPeriodWsdPsd As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_IGNORE_WAITING_PERIOD_WSD_PSD) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_IGNORE_WAITING_PERIOD_WSD_PSD), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_IGNORE_WAITING_PERIOD_WSD_PSD, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=9999, MaxExclusive:=False)> <NumOfRepairClaimsValidation("")>
    Public Property NumOfRepairClaims As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NUM_OF_REPAIR_CLAIMS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_NUM_OF_REPAIR_CLAIMS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NUM_OF_REPAIR_CLAIMS, Value)
        End Set
    End Property

    <ValidNumericRange("", Min:=0, Max:=9999, MaxExclusive:=False)> <NumOfReplacementClaimsValidation("")>
    Public Property NumOfReplacementClaims As LongType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_NUM_OF_REPLACEMENT_CLAIMS) Is DBNull.Value Then
                Return Nothing
            Else
                Return New LongType(CType(Row(ContractDAL.COL_NAME_NUM_OF_REPLACEMENT_CLAIMS), Long))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_NUM_OF_REPLACEMENT_CLAIMS, Value)
        End Set
    End Property
    'REQ-5773 Start
    Public Property PaymentProcessingTypeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PAYMENT_PROCESSING_TYPE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_PAYMENT_PROCESSING_TYPE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PAYMENT_PROCESSING_TYPE_ID, Value)
        End Set
    End Property


    <MandatoryForPaymentProcessingTypeThirdPartyNameAttribute("")> <ValidStringLength("", Max:=50)>
    Public Property ThirdPartyName As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_THIRD_PARTY_NAME) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_THIRD_PARTY_NAME), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_THIRD_PARTY_NAME, Value)
        End Set
    End Property


    <MandatoryForPaymentProcessingTypeThirdPartyTaxIdAttribute("")> <ValidStringLength("", Max:=15)>
    Public Property ThirdPartyTaxId As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_THIRD_PARTY_TAX_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_THIRD_PARTY_TAX_ID), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_THIRD_PARTY_TAX_ID, Value)
        End Set
    End Property


    <MandatoryForRdoNameAttribute("")> <ValidStringLength("", Max:=50)>
    Public Property RdoName As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RDO_NAME) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_RDO_NAME), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RDO_NAME, Value)
        End Set
    End Property


    <MandatoryForRdoNameAttribute("")> <ValidStringLength("", Max:=15)>
    Public Property RdoTaxId As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RDO_TAX_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_RDO_TAX_ID), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RDO_TAX_ID, Value)
        End Set
    End Property


    <MandatoryForRdoNameAttribute(""), ValidNumericRange("", Min:=0, Max:=100, MaxExclusive:=True)>
    Public Property RdoPercent As DecimalType
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_RDO_PERCENT) Is DBNull.Value Then
                Return Nothing
            Else
                Return New DecimalType(CType(Row(ContractDAL.COL_NAME_RDO_PERCENT), Decimal))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_RDO_PERCENT, Value)
        End Set
    End Property
    'REQ-5773 End
    Public Property OverrideEditMfgTerm As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_OVERRIDE_EDIT_MFG_TERM) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_OVERRIDE_EDIT_MFG_TERM), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_OVERRIDE_EDIT_MFG_TERM, Value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property PolicyTypeId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_POLICY_TYPE_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_POLICY_TYPE_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_POLICY_TYPE_ID, Value)
        End Set
    End Property
    <ValueMandatory("")>
    Public Property PolicyGenerationId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_POLICY_GENERATION_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_POLICY_GENERATION_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_POLICY_GENERATION_ID, Value)
        End Set
    End Property
    <ValueMandatoryOnAutoGeneratedPolicy("")>
    Public Property LineOfBusinessId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_LINE_OF_BUSINESS_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_LINE_OF_BUSINESS_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_LINE_OF_BUSINESS_ID, Value)
        End Set
    End Property
    Public Property ProducerId As Guid
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PRODUCER_ID) Is DBNull.Value Then
                Return Nothing
            Else
                Return New Guid(CType(Row(ContractDAL.COL_NAME_PRODUCER_ID), Byte()))
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PRODUCER_ID, Value)
        End Set
    End Property
    Public Property CountryId As Guid
        Get
            Return _countryId
        End Get
        Set
            _countryId = Value
        End Set
    End Property

    'US 489857
    <ValidStringLength("", Max:=50, Message:="CommissionsPercentSourceXcd should be between 1 to 30 chars.")>
    Public Property CommissionsPercentSourceXcd As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_COMMISSIONS_PERCENT_SOURCE_XCD) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_COMMISSIONS_PERCENT_SOURCE_XCD), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_COMMISSIONS_PERCENT_SOURCE_XCD, Value)
        End Set
    End Property

    <ValidStringLength("", Max:=50, Message:="MarketingPercentSourceXcd should be between 1 to 30 chars.")>
    Public Property MarketingPercentSourceXcd As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_MARKETING_PERCENT_SOURCE_XCD) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_MARKETING_PERCENT_SOURCE_XCD), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_MARKETING_PERCENT_SOURCE_XCD, Value)
        End Set
    End Property
    <ValidStringLength("", Max:=50, Message:="AdminExpenseSourceXcd should be between 1 to 30 chars.")>
    Public Property AdminExpenseSourceXcd As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_ADMIN_EXPENSE_SOURCE_XCD) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_ADMIN_EXPENSE_SOURCE_XCD), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_ADMIN_EXPENSE_SOURCE_XCD, Value)
        End Set
    End Property
   <ValidStringLength("", Max:=50, Message:="ProfitPercentSourceXcd should be between 1 to 30 chars.")>
    Public Property ProfitPercentSourceXcd As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_PROFIT_PERCENT_SOURCE_XCD) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_PROFIT_PERCENT_SOURCE_XCD), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_PROFIT_PERCENT_SOURCE_XCD, Value)
        End Set
    End Property
    <ValidStringLength("", Max:=50, Message:="LossCostPercentSourceXcd should be between 1 to 30 chars.")>
    Public Property LossCostPercentSourceXcd As String
        Get
            CheckDeleted()
            If Row(ContractDAL.COL_NAME_LOSS_COST_PERCENT_SOURCE_XCD) Is DBNull.Value Then
                Return Nothing
            Else
                Return CType(Row(ContractDAL.COL_NAME_LOSS_COST_PERCENT_SOURCE_XCD), String)
            End If
        End Get
        Set
            CheckDeleted()
            SetValue(ContractDAL.COL_NAME_LOSS_COST_PERCENT_SOURCE_XCD, Value)
        End Set

    End Property

#End Region

#Region "Public Members"

    Public Overrides Sub Save()

        Try
            Dim dal As New ContractDAL

            'This Code is different from the generated version
            MyBase.Save()

            ' This generate auto sequence number if policy type is collective and auto generated.
            If IsNew AndAlso Not IsDeleted Then
                GetAutoGeneratedSequenceNum()
            End If


            If _isDSCreator AndAlso IsDirty AndAlso Row.RowState <> DataRowState.Detached Then
                               
               If (Not IsDeleted AndAlso Not IsNew AndAlso Not Expiration.Equals(OriginalExpirationDate)) OrElse(
                   Not IsDeleted AndAlso Dataset.Tables.Count > 1) Then
                    dal.UpdateFamily(Dataset, DealerId, Expiration, Effective)
                Else
                    dal.Update(Row)
                End If

                'Reload the Data from the DB
                If Row.RowState <> DataRowState.Detached Then Load(Id)

            End If

        Catch ex As Exception

            'Return the auto gen sequence back if error occured in case of collective/ autogenerated policy.
            If (_autoGeneratedSequenceNum > 0) Then
                ReturnUnUsedAutoGenSequenceNumber(_autoGeneratedSequenceNum, LineOfBusinessId, _autoGenerateSequenceKey)
            End If

            Throw ex

        End Try
    End Sub

    'This code is Different from the one 
    Public Overrides Sub Delete()
        Try
            CheckDeleted()
            If Not IsNew Then
                Dim minMax As New MinEffectiveMaxExpiration(Me)
                If Not minMax.IsLast Then
                    Dim err As New ValidationError(Common.ErrorCodes.INVALID_EFFECTIVE_EXPIRATION_ERR, [GetType], GetType(ValidEffectiveAndExpirationDate), "Effective", Effective)
                    Throw New BOValidationException(New ValidationError() {err}, [GetType].Name, UniqueId)
                End If
            End If
            MyBase.Delete()
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.WriteErr, ex)
        End Try
    End Sub

    Public Class MinEffectiveMaxExpiration
        Public MinEffective As Date
        Public MaxExpiration As Date
        Public IsFirst As Boolean = True
        Public IsLast As Boolean = True

        Public Sub New(obj As Contract)
            Try
                Dim dal As New ContractDAL
                Dim minMaxDs As DataSet = dal.LoadMinEffectiveMaxExpiration(obj.DealerId)
                If minMaxDs.Tables(0).Rows.Count > 0 AndAlso (minMaxDs.Tables(0).Rows(0)(dal.COL_MIN_EFECTIVE) IsNot DBNull.Value) AndAlso (minMaxDs.Tables(0).Rows(0)(dal.COL_MAX_EXPIRATION) IsNot DBNull.Value) Then
                    MinEffective = CType(minMaxDs.Tables(0).Rows(0)(dal.COL_MIN_EFECTIVE), Date)
                    MaxExpiration = CType(minMaxDs.Tables(0).Rows(0)(dal.COL_MAX_EXPIRATION), Date)

                    IsFirst = Not obj.IsNew AndAlso (obj.OriginalEffectiveDate.Value = MinEffective)
                    IsLast = Not obj.IsNew AndAlso (obj.OriginalExpirationDate.Value = MaxExpiration)
                End If
            Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
                Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
            End Try
        End Sub

        Public Sub New(dealerId As Guid)
            Try
                Dim dal As New ContractDAL
                Dim minMaxDs As DataSet = dal.LoadMinEffectiveMaxExpiration(dealerId)

                If minMaxDs.Tables(0).Rows.Count > 0 AndAlso (minMaxDs.Tables(0).Rows(0)(dal.COL_MIN_EFECTIVE) IsNot DBNull.Value) AndAlso (minMaxDs.Tables(0).Rows(0)(dal.COL_MAX_EXPIRATION) IsNot DBNull.Value) Then
                    MinEffective = CType(minMaxDs.Tables(0).Rows(0)(dal.COL_MIN_EFECTIVE), Date)
                    MaxExpiration = CType(minMaxDs.Tables(0).Rows(0)(dal.COL_MAX_EXPIRATION), Date)
                End If
            Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
                Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
            End Try
        End Sub
    End Class

    Public Class StartEndDates
        Public StartDate As Date
        Public EndDate As Date
    End Class

    Public Shared Function GetNewDefaultDates(dealerId As Guid) As StartEndDates
        Dim minMaxDates As New Contract.MinEffectiveMaxExpiration(dealerId)
        Dim resultDates As New StartEndDates
        With minMaxDates
            If Not .MinEffective = Nothing Then
                resultDates.StartDate = .MaxExpiration.AddDays(1)
            Else
                resultDates.StartDate = Date.Today
            End If
            resultDates.EndDate = resultDates.StartDate.AddYears(1).AddDays(-1)
        End With
        Return resultDates
    End Function

    Public Function CanItBeDeleted() As Boolean
        Dim dal As New ContractDAL
        Dim ds As DataSet

        ds = dal.GetSertificatesCount(Id)

        If CType((ds.Tables(ContractDAL.CERTIFICATE_COUNT_TABLE).Rows(0).Item(ContractDAL.COL_NAME_CERT_COUNT)), Integer) > 0 Then
            Return False
        Else
            Return True
        End If

    End Function

    Public Function AddDealer(dealerID As Guid) As Dealer
        If dealerID.Equals(Guid.Empty) Then
            Dim objDealer As New Dealer(Dataset)
            Return objDealer
        Else
            Dim objDealer As New Dealer(dealerID, Dataset)
            Return objDealer
        End If
    End Function

    Public Function ReturnUnUsedAutoGenSequenceNumber(seqNumToRestore As Long, autoGenSourceId As Guid, autoGenSequenceKey As String)

        Try

            Dim dal As New ContractDAL
            dal.ReturnUnUsedAutoGenSequenceNumber(seqNumToRestore, autoGenSourceId, autoGenSequenceKey)

        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try

    End Function

#End Region

#Region "DataView Retrieveing Methods"

    Public Shared Function GetContract(dealerID As Guid, contractDate As Date, ByVal Optional loggedinuserspecific As Boolean = True) As Contract

        Dim contractID As Guid
        Dim dv As DataView = getList(dealerID, loggedinuserspecific)
        dv.Sort = ContractSearchDV.COL_EFFECTIVE & " DESC," & ContractSearchDV.COL_EXPIRATION & " DESC"
        Dim dt As DataTable = dv.Table

        For Each row As DataRow In dt.Rows
            Dim MinEffective As Date = CType(row(ContractSearchDV.COL_EFFECTIVE), Date)
            Dim MaxExpiration As Date = CType(row(ContractSearchDV.COL_EXPIRATION), Date)
            If (contractDate.Date >= MinEffective) And (contractDate.Date <= MaxExpiration) Then
                contractID = New Guid(CType(row(ContractSearchDV.COL_CONTRACT_ID), Byte()))
                Return New Contract(contractID)
            End If
        Next

        Return Nothing
    End Function

    Public Shared Function GetContractID(certID As Guid) As Guid

        Dim contractID As Guid
        Try
            Dim dal As New ContractDAL

            Dim dt As DataTable = dal.GetContract(ElitaPlusIdentity.Current.ActiveUser.Companies, certID).Tables(0)
            If (dt IsNot Nothing AndAlso dt.Rows.Count = 1) Then
                contractID = GuidControl.ByteArrayToGuid(dt.Rows(0)(0))
            Else
                contractID = Nothing
                'Throw New BOValidationException(Common.ErrorCodes.ERR_CONTRACT_NOT_FOUND, Common.ErrorCodes.ERR_CONTRACT_NOT_FOUND)

                Dim errors() As ValidationError = {New ValidationError(Common.ErrorCodes.ERR_CONTRACT_NOT_FOUND, GetType(Contract), Nothing, "", Nothing)}
                Throw New BOValidationException(errors, GetType(Contract).FullName, contractID.ToString)

            End If

            Return contractID
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(ex.ErrorType, ex)
        End Try

        Return Nothing
    End Function

    Public Shared Function GetContract(dealerID As Guid, effectiveDate As Date, expirationDate As Date) As Contract
        ' JLR - Returns the contract that fully covers the specified date range
        ' JLR - Assumes that no contract overlaps another contract

        Dim contractID As Guid
        Dim dv As DataView = getList(dealerID)
        dv.Sort = ContractSearchDV.COL_EFFECTIVE & " DESC," & ContractSearchDV.COL_EXPIRATION & " DESC"
        Dim dt As DataTable = dv.Table
        For Each row As DataRow In dt.Rows
            Dim contractEffective As Date = CType(row(ContractSearchDV.COL_EFFECTIVE), Date)
            Dim contractExpiration As Date = CType(row(ContractSearchDV.COL_EXPIRATION), Date)
            If (effectiveDate >= contractEffective) And (effectiveDate <= contractExpiration) And
                (expirationDate >= contractEffective) And (expirationDate <= contractExpiration) Then
                contractID = New Guid(CType(row(ContractSearchDV.COL_CONTRACT_ID), Byte()))
                Return New Contract(contractID)
            End If
        Next
        Return Nothing
    End Function

    Public Shared Function GetCurrentContract(dealerID As Guid, ByVal Optional loggedinuserspecific As Boolean = True) As Contract
        Return GetContract(dealerID, System.DateTime.Now, loggedinuserspecific)
    End Function

    Public Shared Function GetMaxExpirationContract(dealerID As Guid) As Contract
        Dim dal As New ContractDAL

        Dim contractID As Guid
        Dim ds As DataSet = dal.LoadMaxExpirationContract(ElitaPlusIdentity.Current.ActiveUser.CompanyId, dealerID)
        If ds IsNot Nothing AndAlso ds.Tables(0).Rows.Count > 0 Then
            If ds.Tables(0).Rows(0)(ContractSearchDV.COL_CONTRACT_ID) IsNot DBNull.Value Then
                contractID = New Guid(CType(ds.Tables(0).Rows(0)(ContractSearchDV.COL_CONTRACT_ID), Byte()))
                Return New Contract(contractID)
            Else
                Return Nothing
            End If
        Else
            Return Nothing
        End If
    End Function

    Public Shared Function GetContracts(dealerID As Guid) As ContractSearchDV

        Dim contractID As Guid
        Dim dv As ContractSearchDV = getList(dealerID)
        dv.Sort = ContractSearchDV.COL_EFFECTIVE & " DESC," & ContractSearchDV.COL_EXPIRATION & " DESC"

        Return dv
    End Function

    Public Shared Function GetContractDropdownList(dealerID As Guid) As DataView
        Dim dt As New DataTable
        dt.Columns.Add("ID", GetType(Byte()))
        dt.Columns.Add("Description", GetType(String))

        Dim dv As ContractSearchDV = getList(dealerID)
        dv.Sort = ContractSearchDV.COL_EFFECTIVE & " DESC," & ContractSearchDV.COL_EXPIRATION & " DESC"

        For Each row As DataRow In dv.Table.Rows
            Dim MinEffective As Date = CType(row(ContractSearchDV.COL_EFFECTIVE), Date)
            Dim MaxExpiration As Date = CType(row(ContractSearchDV.COL_EXPIRATION), Date)

            Dim dr As DataRow = dt.NewRow()
            dr(0) = CType(row(ContractSearchDV.COL_CONTRACT_ID), Byte())
            dr(1) = MinEffective.ToString("dd-MMM-yyyy", Threading.Thread.CurrentThread.CurrentCulture) &
                    " - " & MaxExpiration.ToString("dd-MMM-yyyy", Threading.Thread.CurrentThread.CurrentCulture)
            dt.Rows.Add(dr)
        Next

        Return New DataView(dt)
    End Function

    'Manually added method
    'If DealerId is empty Guid it will return all Contracts regardless of the Dealer they are associated to
    Public Shared Function getList(dealerId As Guid, ByVal Optional loggedinuserspecific As Boolean = True) As ContractSearchDV
        Try
            Dim dal As New ContractDAL
            If loggedinuserspecific Then
                Return New ContractSearchDV(dal.LoadList(ElitaPlusIdentity.Current.ActiveUser.Companies, dealerId).Tables(0))
            Else
                Return New ContractSearchDV(dal.LoadList(New ArrayList(), dealerId).Tables(0))
            End If
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(ex.ErrorType, ex)
        End Try
    End Function

    Public Shared Function HasContract(dealerId As Guid, warrantySalesDate As Date) As Boolean
        Dim oContract As Contract
        oContract = GetContract(dealerId, warrantySalesDate)

        If oContract Is Nothing Then
            Return False
        Else
            Return True
        End If
    End Function

    Public Sub GetAutoGeneratedSequenceNum()

               ' If policy is not Collective and Auto generate then exit.
        If Not PolicyTypeId.Equals(LookupListNew.GetIdFromCode(LookupListCache.LK_CONTRACT_POLICY_TYPE, Codes.CONTRACT_POLTYPE_COLLECTIVE)) OrElse
          Not PolicyGenerationId.Equals(LookupListNew.GetIdFromCode(LookupListCache.LK_CONTRACT_POLICY_GEN_TYPE, Codes.CONTRACT_POLGEN_AUTOGENERATE)) Then
            Return
        End If

        Try
            Dim dal As New ContractDAL
            Dim objCountry As New Country(CountryId)

            _autoGeneratedSequenceNum = 0

            Dim subRamoCode As String = LookupListNew.GetCodeFromId(LookupListCache.LK_COUNTRY_LINE_OF_BUSINESS, LineOfBusinessId)
            _autoGenerateSequenceKey = objCountry.Code + "_" + subRamoCode + "_" + AUTO_GEN_SEQ_POL_NUM_KEY + "_" + DateTime.Today.Year.ToString().Substring(2, 2)

            _autoGeneratedSequenceNum = dal.GetAutoGenSequenceNumber(LineOfBusinessId, AUTO_GEN_SEQ_POL_NUM_SOURCE, _autoGenerateSequenceKey)

            If _autoGeneratedSequenceNum >= 0 Then
                Policy = subRamoCode + DateTime.Today.Year.ToString().Substring(2, 2) + _autoGeneratedSequenceNum.ToString().PadLeft(5, "0")
            Else
                Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, Nothing, "Failed to get auto generated sequence number")
            End If

        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(ex.ErrorType, ex)
        End Try

    End Sub
    Public Class ContractSearchDV
        Inherits DataView

#Region "Constants"
        Public Const COL_CONTRACT_ID As String = "contract_id"
        Public Const COL_DEALER_ID As String = "dealer_id"
        Public Const COL_EFFECTIVE As String = "effective"
        Public Const COL_EXPIRATION As String = "expiration"
        Public Const COL_DEALER_CODE As String = "dealer_code"
        Public Const COL_DEALER_NAME As String = "DEALER_NAME"
        Public Const COL_COMPANY_CODE As String = "COMPANY_CODE"
        Public Const COL_LAYOUT As String = "layout"
        Public Const COL_RDO_NAME As String = "Rdo_Name"

#End Region

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(table As DataTable)
            MyBase.New(table)
        End Sub

    End Class

#End Region

#Region "Custom Validation"
    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class ValidEffectiveAndExpirationDate
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_EFFECTIVE_EXPIRATION_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.DealerId.Equals(Guid.Empty) Then Return True
            If obj.Effective Is Nothing OrElse obj.Expiration Is Nothing Then Return True

            If obj.Effective.Value >= obj.Expiration.Value Then
                Return False
            End If

            Dim minMax As New MinEffectiveMaxExpiration(obj)


            If obj.IsNew Then
                If minMax.MaxExpiration = Nothing Then
                    Return True
                ElseIf obj.Effective.Value = minMax.MaxExpiration.AddDays(1) Then
                    Return True
                Else
                    Return False
                End If
            Else 'Dirty
                If minMax.IsLast AndAlso (obj.Effective.Equals(obj.OriginalEffectiveDate)) Then
                    Return True
                ElseIf (obj.Effective.Equals(obj.OriginalEffectiveDate) AndAlso obj.Expiration.Equals(obj.OriginalExpirationDate)) Then
                    Return True
                End If
            End If

            Return False

        End Function
    End Class


    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class ValidDealerMarkup
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_DEALER_MAKUP_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            'Req-1016 Start 
            Dim yesValueId As Guid = LookupListNew.GetIdFromCode("YES_NO", "Y")
            Dim emptyGuid As Guid = Guid.Empty
            Dim singlePremiumId As Guid = LookupListNew.GetIdFromCode(LookupListCache.LK_PERIOD_RENEW, Codes.PERIOD_RENEW__SINGLE_PREMIUM)

            'If obj.MonthlyBillingId.Equals(yesValueId) AndAlso obj.DealerMarkupId.Equals(yesValueId) Then
            'REQ5804
            'If ((Not obj.RecurringPremiumId.Equals(emptyGuid)) And (Not obj.RecurringPremiumId.Equals(singlePremiumId))) AndAlso obj.DealerMarkupId.Equals(yesValueId) Then
            If ((Not obj.RecurringPremiumId.Equals(emptyGuid)) AndAlso obj.DealerMarkupId.Equals(emptyGuid)) Then
                Return False
            Else
                Return True
            End If
            'Req-1016 End
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class ValidDealerMarkupAndRestrictMarkup
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_DEALER_MAKUP_RESTRICTED_MARKUP_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            Dim yesValueId As Guid = LookupListNew.GetIdFromCode("YES_NO", "Y")

            If obj.RestrictMarkupId.Equals(yesValueId) AndAlso Not obj.DealerMarkupId.Equals(yesValueId) Then
                Return False
            Else
                Return True
            End If
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class MandatoryForMonthlyBillingAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            'Req-1016 Start 
            'Dim yesValueId As Guid = LookupListNew.GetIdFromCode("YES_NO", "Y")
            Dim emptyGuid As Guid = Guid.Empty
            Dim singlePremiumId As Guid = LookupListNew.GetIdFromCode(LookupListCache.LK_PERIOD_RENEW, Codes.PERIOD_RENEW__SINGLE_PREMIUM)

            'If obj.MonthlyBillingId.Equals(yesValueId) Then
            'REQ5804
            If ((Not obj.RecurringPremiumId.Equals(emptyGuid)) And (Not obj.RecurringPremiumId.Equals(singlePremiumId))) Then
                'If ((Not obj.RecurringPremiumId.Equals(emptyGuid))) Then
                Dim mandatAttr As New ValueMandatoryAttribute(DisplayName)
                Return mandatAttr.IsValid(valueToCheck, objectToValidate)
            Else
                Return True
            End If
            'Req-1016 End
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class MandatoryAcselProdCodeAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If Not obj.DealerId.Equals(Guid.Empty) Then
                Dim dealer As New Dealer(obj.DealerId)
                Dim oCompany As Company = New Company(dealer.CompanyId)

                If oCompany.CompanyTypeId.Equals(LookupListNew.GetIdFromCode(LookupListCache.LK_COMPANY_TYPE, COMPANY_TYPE_INSURANCE)) Then
                    Dim mandatAttr As New ValueMandatoryAttribute(DisplayName)
                    Return mandatAttr.IsValid(valueToCheck, objectToValidate)
                Else
                    Return True
                End If
            Else
                Return True
            End If

        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class ValidCLIPPercent
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_CLIP_PERCENT)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.DealerId.Equals(Guid.Empty) Then
                Return True
            End If
            Dim ClipMethodId As Guid = New Company(New Dealer(obj.DealerId).CompanyId).ClipMethodId
            If ClipMethodId = Guid.Empty Then
                Return True
            Else
                Dim CLIPMethodCode As String = LookupListNew.GetCodeFromId(LookupListNew.DropdownLookupList(LookupListCache.LK_CLIPMETHOD, ElitaPlusIdentity.Current.ActiveUser.LanguageId), ClipMethodId)
                If CLIPMethodCode = Company.CLIP_METHOD_NONE Then
                    Return True
                Else 'CLIP value required
                    If obj.ClipPercent Is Nothing Then
                        Return False
                    Else
                        If obj.ClipPercent.Value < 0 OrElse obj.ClipPercent.Value > 100 Then
                            Return False
                        End If
                    End If
                End If
            End If
            Return True
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class MandatoryForInstallmentPaymentAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.DealerId.Equals(Guid.Empty) Then
                Return True
            End If
            Dim yesValueId As Guid = LookupListNew.GetIdFromCode("YES_NO", "Y")
            Dim objDealer As Dealer = New Dealer(obj.DealerId)

            If obj.InstallmentPaymentId.Equals(yesValueId) AndAlso objDealer.DealerTypeDesc = objDealer.DEALER_TYPE_DESC Then
                Dim mandatAttr As New ValueMandatoryAttribute(DisplayName)
                Return mandatAttr.IsValid(valueToCheck, objectToValidate)
            Else
                Return True
            End If
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class MandatoryNoOfRepairClaimsAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.NumOfClaims IsNot Nothing And obj.NumOfRepairClaims Is Nothing Then
                Dim mandatAttr As New ValueMandatoryAttribute(DisplayName)
                Return mandatAttr.IsValid(valueToCheck, objectToValidate)
            Else
                Return True
            End If
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class ValidNoOfRepairClaims
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_NO_OF_REPAIR_CLAIMS)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If obj.NumOfClaims Is Nothing Or obj.NumOfRepairClaims Is Nothing Then
                Return True
            ElseIf obj.NumOfClaims IsNot Nothing And obj.NumOfRepairClaims IsNot Nothing Then
                If obj.NumOfRepairClaims.Value > obj.NumOfClaims.Value Then
                    Return False
                Else
                    Return True
                End If
            End If
        End Function
    End Class
    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class MandatoryNoOfReplacementClaimsAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.NumOfClaims IsNot Nothing And obj.NumOfReplacementClaims Is Nothing Then
                Dim mandatAttr As New ValueMandatoryAttribute(DisplayName)
                Return mandatAttr.IsValid(valueToCheck, objectToValidate)
            Else
                Return True
            End If
        End Function
    End Class
    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class ValidNoOfReplacementClaims
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_NO_OF_REPLACEMENT_CLAIMS)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If obj.NumOfClaims Is Nothing Or obj.NumOfReplacementClaims Is Nothing Then
                Return True
            ElseIf obj.NumOfClaims IsNot Nothing And obj.NumOfReplacementClaims IsNot Nothing Then
                If obj.NumOfReplacementClaims.Value > obj.NumOfClaims.Value Then
                    Return False
                Else
                    Return True
                End If
            End If
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class ValidClaimLimitConfig
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, "INVALID_CLAIM_LIMIT_CONFIG")
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If (obj.NumOfClaims IsNot Nothing) AndAlso obj.NumOfClaims.Value > 0 Then
                If obj.ClaimLimitBasedOnId = Guid.Empty Then
                    Return False
                End If
            End If
            Return True
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class NumOfClaimsValidation
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.GUI_NUM_OF_CLAIMS_VALIDATION)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If Not obj.ClaimLimitBasedOnId = Guid.Empty Then
                If (obj.NumOfClaims Is Nothing) Then
                    Return False
                End If

            End If

            Return True
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class NumOfRepairClaimsValidation
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.GUI_NUM_OF_REPAIR_CLAIMS_VALIDATION)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If Not obj.ClaimLimitBasedOnId = Guid.Empty Then
                If (obj.NumOfRepairClaims Is Nothing) Then
                    Return False
                End If

            End If

            Return True
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class NumOfReplacementClaimsValidation
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.GUI_NUM_OF_REPLACEMENT_CLAIMS_VALIDATION)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If Not obj.ClaimLimitBasedOnId = Guid.Empty Then
                If (obj.NumOfReplacementClaims Is Nothing) Then
                    Return False
                End If

            End If

            Return True
        End Function
    End Class
    'Req - 1016 Start
    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class ValidWarrantyPeriod
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_WARRANTY_PERIOD)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            Dim SinglePremiumRenewable As String = "4"

            If (obj IsNot Nothing) Then
                Dim sVal As String = LookupListNew.GetCodeFromId(LookupListCache.LK_PERIOD_RENEW, obj.RecurringPremiumId)

                If (obj.RecurringWarrantyPeriod IsNot Nothing) And (obj.RecurringWarrantyPeriod <> 0) Then
                    If (sVal IsNot Nothing) And (CType(sVal, Long) <> 0) Then
                        If Not sVal = SinglePremiumRenewable Then
                            If CType(obj.RecurringWarrantyPeriod, Long) Mod CType(sVal, Long) = 0 Then
                                Return True
                            Else
                                Return False
                            End If
                        Else
                            Return True
                        End If
                    End If
                End If
            End If
            Return True
        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)> _
    Public NotInheritable Class ValidOffSetBeforeDueDate
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.INVALID_OFFSET_BEFORE_DUE_DATE)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            If (obj IsNot Nothing) Then
                If (obj.OffsetBeforeDueDate IsNot Nothing) Then
                    Dim sVal As String = LookupListNew.GetCodeFromId(LookupListCache.LK_PERIOD_RENEW, obj.RecurringPremiumId)

                    Select Case sVal
                        Case 0
                            Return True
                        Case 1
                            If CType(obj.OffsetBeforeDueDate, Long) > 28 Then
                                Return False
                            End If
                        Case 3
                            If CType(obj.OffsetBeforeDueDate, Long) > 60 Then
                                Return False
                            End If
                        Case Else
                            Return True
                    End Select
                End If
            End If
            Return True
        End Function
    End Class
    'Req - 1016 End

    'REQ-5773 begin
    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class MandatoryForPaymentProcessingTypeThirdPartyNameAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            Dim DealerTypeCode As Guid

            Dim LKPT As Guid = LookupListNew.GetIdFromCode(LookupListCache.LK_PPT, Codes.THIRD_PARTY_PAYMENT)
            If Not obj.DealerId.Equals(Guid.Empty) Then
                Dim objDealer As Dealer = New Dealer(obj.DealerId)

                If obj.PaymentProcessingTypeId.Equals(LKPT) AndAlso LookupListNew.GetCodeFromId(LookupListCache.LK_DEALER_TYPE, objDealer.DealerTypeId) = Codes.DEALER_TYPES__VSC Then
                    Dim mandatattr As New ValueMandatoryAttribute(DisplayName)
                    Return mandatattr.IsValid(valueToCheck, objectToValidate)
                Else
                    Return True
                End If
            End If

        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class MandatoryForPaymentProcessingTypeThirdPartyTaxIdAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)
            Dim DealerTypeCode As Guid

            Dim LKPT As Guid = LookupListNew.GetIdFromCode(LookupListCache.LK_PPT, Codes.THIRD_PARTY_PAYMENT)
            If Not obj.DealerId.Equals(Guid.Empty) Then
                Dim objDealer As Dealer = New Dealer(obj.DealerId)

                If obj.PaymentProcessingTypeId.Equals(LKPT) AndAlso LookupListNew.GetCodeFromId(LookupListCache.LK_DEALER_TYPE, objDealer.DealerTypeId) = Codes.DEALER_TYPES__VSC Then
                    Dim mandatattr As New ValueMandatoryAttribute(DisplayName)
                    Return mandatattr.IsValid(valueToCheck, objectToValidate)
                Else
                    Return True
                End If

            End If
        End Function
    End Class



    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class MandatoryForRdoNameAttribute
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Messages.VALUE_MANDATORY_ERR)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean
            Dim obj As Contract = CType(objectToValidate, Contract)

            Dim oDealer As New Dealer(obj.DealerId)
            Dim oCompany As Company = New Company(oDealer.CompanyId)
            Dim oCompanyGroup As CompanyGroup = New CompanyGroup(oCompany.CompanyGroupId)


            If oCompanyGroup.UseCommEntityTypeId.Equals(LookupListNew.GetIdFromCode(LookupListCache.LK_YESNO, Codes.YESNO_Y)) Then
                If Not obj.DealerId.Equals(Guid.Empty) Then
                    Dim objDealer As Dealer = New Dealer(obj.DealerId)
                    Dim DealerTypeCode As String


                    If LookupListNew.GetCodeFromId(LookupListCache.LK_DEALER_TYPE, objDealer.DealerTypeId) = Codes.DEALER_TYPES__VSC Then
                        If obj.RdoName Is Nothing OrElse obj.RdoTaxId Is Nothing OrElse obj.RdoPercent = New DecimalType(0) Then
                            Dim mandatattr As New ValueMandatoryAttribute(DisplayName)
                            Return mandatattr.IsValid(valueToCheck, objectToValidate)
                        Else
                            Return True
                        End If
                    Else
                        Return True
                    End If
                End If
            Else
                Return True
            End If

        End Function
    End Class

    <AttributeUsage(AttributeTargets.Property Or AttributeTargets.Field)>
    Public NotInheritable Class ValueMandatoryOnAutoGeneratedPolicy
        Inherits ValidBaseAttribute

        Public Sub New(fieldDisplayName As String)
            MyBase.New(fieldDisplayName, Common.ErrorCodes.GUI_SELECT_LOB_WITH_AUTOGEN)
        End Sub

        Public Overrides Function IsValid(valueToCheck As Object, objectToValidate As Object) As Boolean

            Dim obj As Contract = CType(objectToValidate, Contract)
            If obj.PolicyGenerationId.Equals(LookupListNew.GetIdFromCode(LookupListCache.LK_CONTRACT_POLICY_GEN_TYPE, Codes.CONTRACT_POLGEN_AUTOGENERATE)) AndAlso
                                             obj.LineOfBusinessId.Equals(Guid.Empty) Then
                Return False
            End If

            Return True

        End Function
    End Class

#End Region


End Class



