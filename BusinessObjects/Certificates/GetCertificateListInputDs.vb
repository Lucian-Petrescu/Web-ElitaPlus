'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System

'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.ComponentModel.ToolboxItem(True), _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 System.Xml.Serialization.XmlRootAttribute("GetCertificateListInputDs"), _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class GetCertificateListInputDs
    Inherits System.Data.DataSet

    Private tableGetCertificateListInput As GetCertificateListInputDataTable

    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GetCertificateListInput")) Is Nothing) Then
                MyBase.Tables.Add(New GetCertificateListInputDataTable(ds.Tables("GetCertificateListInput")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property GetCertificateListInput() As GetCertificateListInputDataTable
        Get
            Return Me.tableGetCertificateListInput
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.BrowsableAttribute(True), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As GetCertificateListInputDs = CType(MyBase.Clone, GetCertificateListInputDs)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("GetCertificateListInput")) Is Nothing) Then
                MyBase.Tables.Add(New GetCertificateListInputDataTable(ds.Tables("GetCertificateListInput")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGetCertificateListInput = CType(MyBase.Tables("GetCertificateListInput"), GetCertificateListInputDataTable)
        If (initTable = True) Then
            If (Not (Me.tableGetCertificateListInput) Is Nothing) Then
                Me.tableGetCertificateListInput.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "GetCertificateListInputDs"
        Me.Prefix = ""
        Me.Locale = New System.Globalization.CultureInfo("")
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGetCertificateListInput = New GetCertificateListInputDataTable
        MyBase.Tables.Add(Me.tableGetCertificateListInput)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeGetCertificateListInput() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GetCertificateListInputDs = New GetCertificateListInputDs
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub GetCertificateListInputRowChangeEventHandler(ByVal sender As Object, ByVal e As GetCertificateListInputRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class GetCertificateListInputDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCertificateNumber As System.Data.DataColumn

        Private columnCustomerName As System.Data.DataColumn

        Private columnAddress As System.Data.DataColumn

        Private columnZIP As System.Data.DataColumn

        Private columnTaxID As System.Data.DataColumn

        Private columnDealerCode As System.Data.DataColumn

        Private columnLimitResultset As System.Data.DataColumn

        Private columnSortBy As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "GetCertificateListInput"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CertificateNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnCertificateNumber
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CustomerNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AddressColumn() As System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ZIPColumn() As System.Data.DataColumn
            Get
                Return Me.columnZIP
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TaxIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnTaxID
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DealerCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDealerCode
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LimitResultsetColumn() As System.Data.DataColumn
            Get
                Return Me.columnLimitResultset
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SortByColumn() As System.Data.DataColumn
            Get
                Return Me.columnSortBy
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As GetCertificateListInputRow
            Get
                Return CType(Me.Rows(index), GetCertificateListInputRow)
            End Get
        End Property

        Public Event GetCertificateListInputRowChanging As GetCertificateListInputRowChangeEventHandler

        Public Event GetCertificateListInputRowChanged As GetCertificateListInputRowChangeEventHandler

        Public Event GetCertificateListInputRowDeleting As GetCertificateListInputRowChangeEventHandler

        Public Event GetCertificateListInputRowDeleted As GetCertificateListInputRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddGetCertificateListInputRow(ByVal row As GetCertificateListInputRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddGetCertificateListInputRow(ByVal CertificateNumber As String, ByVal CustomerName As String, ByVal Address As String, ByVal ZIP As String, ByVal TaxID As String, ByVal DealerCode As String, ByVal LimitResultset As Long, ByVal SortBy As String) As GetCertificateListInputRow
            Dim rowGetCertificateListInputRow As GetCertificateListInputRow = CType(Me.NewRow, GetCertificateListInputRow)
            rowGetCertificateListInputRow.ItemArray = New Object() {CertificateNumber, CustomerName, Address, ZIP, TaxID, DealerCode, LimitResultset, SortBy}
            Me.Rows.Add(rowGetCertificateListInputRow)
            Return rowGetCertificateListInputRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As GetCertificateListInputDataTable = CType(MyBase.Clone, GetCertificateListInputDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New GetCertificateListInputDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCertificateNumber = MyBase.Columns("CertificateNumber")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnZIP = MyBase.Columns("ZIP")
            Me.columnTaxID = MyBase.Columns("TaxID")
            Me.columnDealerCode = MyBase.Columns("DealerCode")
            Me.columnLimitResultset = MyBase.Columns("LimitResultset")
            Me.columnSortBy = MyBase.Columns("SortBy")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCertificateNumber = New System.Data.DataColumn("CertificateNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificateNumber)
            Me.columnCustomerName = New System.Data.DataColumn("CustomerName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnAddress = New System.Data.DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnZIP = New System.Data.DataColumn("ZIP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP)
            Me.columnTaxID = New System.Data.DataColumn("TaxID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxID)
            Me.columnDealerCode = New System.Data.DataColumn("DealerCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDealerCode)
            Me.columnLimitResultset = New System.Data.DataColumn("LimitResultset", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimitResultset)
            Me.columnSortBy = New System.Data.DataColumn("SortBy", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortBy)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewGetCertificateListInputRow() As GetCertificateListInputRow
            Return CType(Me.NewRow, GetCertificateListInputRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New GetCertificateListInputRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetCertificateListInputRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetCertificateListInputRowChangedEvent) Is Nothing) Then
                RaiseEvent GetCertificateListInputRowChanged(Me, New GetCertificateListInputRowChangeEvent(CType(e.Row, GetCertificateListInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetCertificateListInputRowChangingEvent) Is Nothing) Then
                RaiseEvent GetCertificateListInputRowChanging(Me, New GetCertificateListInputRowChangeEvent(CType(e.Row, GetCertificateListInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetCertificateListInputRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetCertificateListInputRowDeleted(Me, New GetCertificateListInputRowChangeEvent(CType(e.Row, GetCertificateListInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetCertificateListInputRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetCertificateListInputRowDeleting(Me, New GetCertificateListInputRowChangeEvent(CType(e.Row, GetCertificateListInputRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveGetCertificateListInputRow(ByVal row As GetCertificateListInputRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As GetCertificateListInputDs = New GetCertificateListInputDs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GetCertificateListInputDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class GetCertificateListInputRow
        Inherits System.Data.DataRow

        Private tableGetCertificateListInput As GetCertificateListInputDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetCertificateListInput = CType(Me.Table, GetCertificateListInputDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CertificateNumber() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.CertificateNumberColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CertificateNumber' in table 'GetCertificateListInput' is DB" & _
                            "Null.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.CertificateNumberColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CustomerName() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.CustomerNameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CustomerName' in table 'GetCertificateListInput' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.CustomerNameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Address() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.AddressColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Address' in table 'GetCertificateListInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.AddressColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ZIP() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.ZIPColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ZIP' in table 'GetCertificateListInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.ZIPColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TaxID() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.TaxIDColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TaxID' in table 'GetCertificateListInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.TaxIDColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DealerCode() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.DealerCodeColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DealerCode' in table 'GetCertificateListInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.DealerCodeColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LimitResultset() As Long
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.LimitResultsetColumn), Long)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LimitResultset' in table 'GetCertificateListInput' is DBNul" & _
                            "l.", e)
                End Try
            End Get
            Set(ByVal value As Long)
                Me(Me.tableGetCertificateListInput.LimitResultsetColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SortBy() As String
            Get
                Try
                    Return CType(Me(Me.tableGetCertificateListInput.SortByColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SortBy' in table 'GetCertificateListInput' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableGetCertificateListInput.SortByColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCertificateNumberNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.CertificateNumberColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCertificateNumberNull()
            Me(Me.tableGetCertificateListInput.CertificateNumberColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.CustomerNameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCustomerNameNull()
            Me(Me.tableGetCertificateListInput.CustomerNameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.AddressColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAddressNull()
            Me(Me.tableGetCertificateListInput.AddressColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsZIPNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.ZIPColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetZIPNull()
            Me(Me.tableGetCertificateListInput.ZIPColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTaxIDNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.TaxIDColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTaxIDNull()
            Me(Me.tableGetCertificateListInput.TaxIDColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDealerCodeNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.DealerCodeColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDealerCodeNull()
            Me(Me.tableGetCertificateListInput.DealerCodeColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLimitResultsetNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.LimitResultsetColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLimitResultsetNull()
            Me(Me.tableGetCertificateListInput.LimitResultsetColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSortByNull() As Boolean
            Return Me.IsNull(Me.tableGetCertificateListInput.SortByColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSortByNull()
            Me(Me.tableGetCertificateListInput.SortByColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class GetCertificateListInputRowChangeEvent
        Inherits System.EventArgs

        Private eventRow As GetCertificateListInputRow

        Private eventAction As System.Data.DataRowAction

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As GetCertificateListInputRow, ByVal action As System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As GetCertificateListInputRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
