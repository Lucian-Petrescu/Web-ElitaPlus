<%@ CodeTemplate Language="C#" TargetLanguage="VB" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

'************* THIS CODE HAS BEEN GENERATED FROM TEMPLATE BusinessObject.cst (<%= DateTime.Now.ToShortDateString() %>)  ********************

Public Class <%= GetClassName(SourceTable) %>
    Inherits BusinessObjectBase

#Region "Constructors"

    'Exiting BO
    Public Sub New(ByVal id As Guid)
        MyBase.New()
        Me.Dataset = New DataSet
        Me.Load(id)
    End Sub

    'New BO
    Public Sub New()
        MyBase.New()
        Me.Dataset = New DataSet
        Me.Load()
    End Sub

    'Exiting BO attaching to a BO family
    Public Sub New(ByVal id As Guid, ByVal familyDS As DataSet)
        MyBase.New(False)
        Me.Dataset = familyDS
        Me.Load(id)
    End Sub

    'New BO attaching to a BO family
    Public Sub New(ByVal familyDS As DataSet)
        MyBase.New(False)
        Me.Dataset = familyDS
        Me.Load()
    End Sub
    
    Public Sub New(ByVal row As DataRow)
        MyBase.New(False)
        Me.Dataset = row.Table.DataSet
        Me.Row = row
    End Sub

    Protected Sub Load()             
        Try
            Dim dal As New <%= GetDALClassName(SourceTable) %>
            If Me.Dataset.Tables.IndexOf(dal.TABLE_NAME) < 0 Then
                dal.LoadSchema(Me.Dataset)
            End If
            Dim newRow As DataRow = Me.Dataset.Tables(dal.TABLE_NAME).NewRow
            Me.Dataset.Tables(dal.TABLE_NAME).Rows.Add(newRow)
            Me.Row = newRow
            setvalue(dal.TABLE_KEY_NAME, Guid.NewGuid)
            Initialize() 
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try
    End Sub

    Protected Sub Load(ByVal id As Guid)               
        Try
            Dim dal As New <%= GetDALClassName(SourceTable) %>            
            If Me._isDSCreator Then
                If Not Me.Row Is Nothing Then
                    Me.Dataset.Tables(dal.TABLE_NAME).Rows.Remove(Me.Row)
                End If
            End If
            Me.Row = Nothing
            If Me.Dataset.Tables.IndexOf(dal.TABLE_NAME) >= 0 Then
                Me.Row = Me.FindRow(id, dal.TABLE_KEY_NAME, Me.Dataset.Tables(dal.TABLE_NAME))
            End If
            If Me.Row Is Nothing Then 'it is not in the dataset, so will bring it from the db
                dal.Load(Me.Dataset, id)
                Me.Row = Me.FindRow(id, dal.TABLE_KEY_NAME, Me.Dataset.Tables(dal.TABLE_NAME))
            End If
            If Me.Row Is Nothing Then
                Throw New DataNotFoundException
            End If
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.ReadErr, ex)
        End Try
    End Sub
#End Region

#Region "Private Members"
	'Initialization code for new objects
    Private Sub Initialize()        
    End Sub
#End Region


#Region "Properties"
    
    'Key Property
    Public ReadOnly Property Id() As <%= GetVariableType(SourceTable.PrimaryKey.MemberColumns[0]) %>
        Get
            If row(<%= GetDALClassName(SourceTable) %>.TABLE_KEY_NAME) Is DBNull.Value Then
                Return Nothing
            Else
                Return <%= GetReturnObject(SourceTable,SourceTable.PrimaryKey.MemberColumns[0]) %>
            End If
        End Get
    End Property
	
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	<% 
	   string cName = SourceTable.NonPrimaryKeyColumns[i].Name.ToUpper();
	   if ( !(cName == "CREATED_DATE" | cName == "MODIFIED_DATE" | cName == "CREATED_BY" | cName == "MODIFIED_BY") )
		{	
	%>
    <%= getValidationCustomAttr(SourceTable.NonPrimaryKeyColumns[i]) %>
    Public Property <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>() As <%= GetVariableType(SourceTable.NonPrimaryKeyColumns[i]) %>
        Get
            CheckDeleted()
            If row(<%= GetDALColName(SourceTable, SourceTable.NonPrimaryKeyColumns[i]) %>) Is DBNull.Value Then
                Return Nothing
            Else
                Return <%= GetReturnObject(SourceTable,SourceTable.NonPrimaryKeyColumns[i]) %>
            End If
        End Get
        Set(ByVal Value As <%= GetVariableType(SourceTable.NonPrimaryKeyColumns[i]) %>)
            CheckDeleted()
            Me.SetValue(<%= GetDALColName(SourceTable, SourceTable.NonPrimaryKeyColumns[i]) %>, Value)
        End Set
    End Property
	
	
	<%	} %>
	<% } %>
   

#End Region

#Region "Public Members"
    Public Overrides Sub Save()         
        Try
            MyBase.Save()
            If Me._isDSCreator AndAlso Me.IsDirty AndAlso Me.Row.RowState <> DataRowState.Detached Then
                Dim dal As New <%= GetDALClassName(SourceTable) %>
                dal.Update(Me.Row)
                'Reload the Data from the DB
                If Me.Row.RowState <> DataRowState.Detached Then
                    Dim objId As Guid = Me.Id
                    Me.Dataset = New DataSet
                    Me.Row = Nothing
                    Me.Load(objId)
                End If
            End If
        Catch ex As Assurant.ElitaPlus.DALObjects.DataBaseAccessException
            Throw New DataBaseAccessException(DataBaseAccessException.DatabaseAccessErrorType.WriteErr, ex)
        End Try
    End Sub
#End Region

#Region "DataView Retrieveing Methods"
    
#End Region

End Class


<script runat="template">
public string GetVariableType(ColumnSchema column)
{
	
	switch (column.DataType)
	{
		case DbType.AnsiString: 
		case DbType.AnsiStringFixedLength: 
		case DbType.String: 
		case DbType.StringFixedLength: return "String";
		
		case DbType.Binary: 
		case DbType.Guid: return "Guid";
		
		case DbType.Boolean: return "BooleanType";
		
		case DbType.Byte: 
		case DbType.Int16: 
		case DbType.Int32: 
		case DbType.Int64: 
		case DbType.UInt16:
		case DbType.UInt32:
		case DbType.UInt64: return "LongType";
		
		case DbType.Currency: 		
		case DbType.Decimal:
		case DbType.Double:
		case DbType.Single: 
		case DbType.VarNumeric: return "DecimalType";
		
		case DbType.Date:
		case DbType.DateTime: 
		case DbType.Time: return "DateType";		
		
		case DbType.Object: return "Object";		
		
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetClassName(TableSchema table)
{
	string tName = table.Name;
	if (table.Name.ToUpper().StartsWith("ELP_"))
	{
	   tName = table.Name.Substring(4);
	}
	if (table.Name.EndsWith("s"))
	{
		
		tName = tName.Substring(0, tName.Length - 1);		
	}
	return DBNameToPascalName(tName);	
}

public string GetReturnObject(TableSchema table, ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String: 
		case DbType.StringFixedLength: return "CType(row(" + GetDALColName(table, column) + "), String)";		
		
		case DbType.Binary: 
		case DbType.Guid: return "New Guid(CType(row(" + GetDALColName(table, column) + "), Byte()))";
		
		case DbType.Boolean: return "New BooleanType(CType(row(" + GetDALColName(table, column) + "), Boolean))";
		
		case DbType.Byte: 
		case DbType.Int16: 
		case DbType.Int32: 
		case DbType.Int64: 
		case DbType.UInt16: 
		case DbType.UInt32: 
		case DbType.UInt64: return "New LongType(CType(row(" + GetDALColName(table, column) + "), Long))";
		
		case DbType.Currency: 
		case DbType.Decimal: 
		case DbType.Double: 
		case DbType.Single: 
		case DbType.VarNumeric: return "New DecimalType(CType(row(" + GetDALColName(table, column) + "), Decimal))";		
		
		case DbType.Date: 
		case DbType.DateTime: 
		case DbType.Time: return "New DateType(CType(row(" + GetDALColName(table, column) + "), Date))";
		
		case DbType.Object: return "CType(row(" + GetDALColName(table, column) + "), Object)";		
		
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}	
}

public string GetDALColName(TableSchema table, ColumnSchema column)
{
	return GetDALClassName(table) + ".COL_NAME_" + column.Name.ToUpper();
}

public string GetDALClassName(TableSchema table)
{
	return GetClassName(table) + "DAL";
}

public string GetPropertyName(ColumnSchema column)
{
	return DBNameToPascalName(column.Name);
}

public string DBNameToPascalName(string dbName)
{
   string[] words = Regex.Split(dbName,"_");
   string result="";
   for (int i =0; i<words.Length; i++)
	{
	  result += words[i].Substring(0, 1).ToUpper() + words[i].Substring(1).ToLower();
	}
   return result;
}

public string getValidationCustomAttr(ColumnSchema column)
{
	string valRules = "";
	//Check for not null fields
	if (!column.AllowDBNull)
	{
		valRules += "<ValueMandatory(\"\")";
	}
	//Check for Max Length
	switch (column.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String: 
		case DbType.StringFixedLength: 
			{
				if (valRules.Length>0) valRules += ",";
				else valRules += "<";
				valRules += "ValidStringLength(\"\", Max:=" + column.Size + ")";			
			}
			break;
		default:
			{	
				break;
			}
	}
	if (valRules.Length>0) valRules += "> _";
	return valRules;
}

</script>